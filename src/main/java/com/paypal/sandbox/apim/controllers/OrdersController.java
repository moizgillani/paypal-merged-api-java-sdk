/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.Server;
import com.paypal.sandbox.apim.exceptions.ApiException;
import com.paypal.sandbox.apim.exceptions.BadRequestError1Exception;
import com.paypal.sandbox.apim.exceptions.CaptureOrdersUnprocessableRequestException;
import com.paypal.sandbox.apim.exceptions.ForbiddenError1Exception;
import com.paypal.sandbox.apim.exceptions.M500ErrorErrorException;
import com.paypal.sandbox.apim.exceptions.OrdersAuthorizeResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersAuthorizeResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersAuthorizeResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersConfirmResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersConfirmResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersPatchResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersPatchResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackCreateResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackCreateResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackCreateResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.ResourceNotFoundException;
import com.paypal.sandbox.apim.exceptions.UnauthorizedRequestError1Exception;
import com.paypal.sandbox.apim.exceptions.UnprocessableRequestError1Exception;
import com.paypal.sandbox.apim.http.request.HttpMethod;
import com.paypal.sandbox.apim.models.AuthorizeRequest;
import com.paypal.sandbox.apim.models.ConfirmOrderRequest;
import com.paypal.sandbox.apim.models.Order;
import com.paypal.sandbox.apim.models.OrderAuthorizeResponse;
import com.paypal.sandbox.apim.models.OrderCaptureRequest;
import com.paypal.sandbox.apim.models.OrderRequest;
import com.paypal.sandbox.apim.models.OrderTrackerRequest;
import com.paypal.sandbox.apim.models.Patch;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class OrdersController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public OrdersController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce
     * risk and payment processing costs. For more information about processing payments, see &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/processing/"&gt;checkout&lt;/a&gt; or &lt;a
     * href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/"&gt;multiparty
     * checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see
     * &lt;a href="/api/rest/reference/orders/v2/errors/#create-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  payPalRequestId  Required parameter: The server stores keys for 6 hours. The API
     *         callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param  body  Required parameter: Example:
     * @param  payPalPartnerAttributionId  Optional parameter: Example:
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order createOrder(
            final String payPalRequestId,
            final OrderRequest body,
            final String payPalPartnerAttributionId,
            final String payPalClientMetadataId,
            final String prefer) throws ApiException, IOException {
        return prepareCreateOrderRequest(payPalRequestId, body, payPalPartnerAttributionId,
                payPalClientMetadataId, prefer).execute();
    }

    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce
     * risk and payment processing costs. For more information about processing payments, see &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/processing/"&gt;checkout&lt;/a&gt; or &lt;a
     * href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/"&gt;multiparty
     * checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see
     * &lt;a href="/api/rest/reference/orders/v2/errors/#create-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  payPalRequestId  Required parameter: The server stores keys for 6 hours. The API
     *         callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param  body  Required parameter: Example:
     * @param  payPalPartnerAttributionId  Optional parameter: Example:
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> createOrderAsync(
            final String payPalRequestId,
            final OrderRequest body,
            final String payPalPartnerAttributionId,
            final String payPalClientMetadataId,
            final String prefer) {
        try { 
            return prepareCreateOrderRequest(payPalRequestId, body, payPalPartnerAttributionId,
            payPalClientMetadataId, prefer).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createOrder.
     */
    private ApiCall<Order, ApiException> prepareCreateOrderRequest(
            final String payPalRequestId,
            final OrderRequest body,
            final String payPalPartnerAttributionId,
            final String payPalClientMetadataId,
            final String prefer) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("PayPal-Request-Id")
                                .value(payPalRequestId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("PayPal-Partner-Attribution-Id")
                                .value(payPalPartnerAttributionId).isRequired(false))
                        .headerParam(param -> param.key("PayPal-Client-Metadata-Id")
                                .value(payPalClientMetadataId).isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new UnauthorizedRequestError1Exception(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new UnprocessableRequestError1Exception(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Shows details for an order, by ID.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and
     * troubleshooting, see &lt;a href="/api/rest/reference/orders/v2/errors/#get-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  fields  Optional parameter: A comma-separated list of fields that should be returned
     *         for the order. Valid filter field is `payment_source`.
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order getOrder(
            final String id,
            final String fields) throws ApiException, IOException {
        return prepareGetOrderRequest(id, fields).execute();
    }

    /**
     * Shows details for an order, by ID.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and
     * troubleshooting, see &lt;a href="/api/rest/reference/orders/v2/errors/#get-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  fields  Optional parameter: A comma-separated list of fields that should be returned
     *         for the order. Valid filter field is `payment_source`.
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> getOrderAsync(
            final String id,
            final String fields) {
        try { 
            return prepareGetOrderRequest(id, fields).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getOrder.
     */
    private ApiCall<Order, ApiException> prepareGetOrderRequest(
            final String id,
            final String fields) throws IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}")
                        .queryParam(param -> param.key("fields")
                                .value(fields).isRequired(false))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new UnauthorizedRequestError1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new ResourceNotFoundException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the
     * `COMPLETED` status.&lt;br/&gt;&lt;br/&gt;To make an update, you must provide a `reference_id`. If you
     * omit this value with an order that contains only one purchase unit, PayPal sets the value to
     * `default` which enables you to use the path:
     * &lt;code&gt;"/purchase_units/{@literal @}reference_id=='default'/{attribute-or-object}"&lt;/code&gt;. Merchants and
     * partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs.
     * For more information about processing payments, see &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/processing/"&gt;checkout&lt;/a&gt; or &lt;a
     * href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/"&gt;multiparty
     * checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see
     * &lt;a href="/api/rest/reference/orders/v2/errors/#patch-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;Patchable attributes or
     * objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;intent&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;Using replace op for &lt;code&gt;payer&lt;/code&gt; will replace the whole &lt;code&gt;payer&lt;/code&gt;
     * object with the value sent in
     * request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].custom_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].description&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payee.email&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.address&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].soft_descriptor&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].amount&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].invoice_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.disbursement_mode&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;By
     * default, &lt;code&gt;disbursement_mode&lt;/code&gt; is
     * &lt;code&gt;INSTANT&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.platform_fees&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.airline&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.card&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;application_context.client_configuration&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void ordersPatch(
            final String id,
            final List<Patch> body) throws ApiException, IOException {
        prepareOrdersPatchRequest(id, body).execute();
    }

    /**
     * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the
     * `COMPLETED` status.&lt;br/&gt;&lt;br/&gt;To make an update, you must provide a `reference_id`. If you
     * omit this value with an order that contains only one purchase unit, PayPal sets the value to
     * `default` which enables you to use the path:
     * &lt;code&gt;"/purchase_units/{@literal @}reference_id=='default'/{attribute-or-object}"&lt;/code&gt;. Merchants and
     * partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs.
     * For more information about processing payments, see &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/processing/"&gt;checkout&lt;/a&gt; or &lt;a
     * href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/"&gt;multiparty
     * checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see
     * &lt;a href="/api/rest/reference/orders/v2/errors/#patch-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;Patchable attributes or
     * objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;intent&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;Using replace op for &lt;code&gt;payer&lt;/code&gt; will replace the whole &lt;code&gt;payer&lt;/code&gt;
     * object with the value sent in
     * request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].custom_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace, add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].description&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payee.email&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.address&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].shipping.type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].soft_descriptor&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].amount&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].invoice_id&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.disbursement_mode&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;By
     * default, &lt;code&gt;disbursement_mode&lt;/code&gt; is
     * &lt;code&gt;INSTANT&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].payment_instruction.platform_fees&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.airline&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;purchase_units[].supplementary_data.card&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add,
     * remove&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;application_context.client_configuration&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> ordersPatchAsync(
            final String id,
            final List<Patch> body) {
        try { 
            return prepareOrdersPatchRequest(id, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for ordersPatch.
     */
    private ApiCall<Void, ApiException> prepareOrdersPatchRequest(
            final String id,
            final List<Patch> body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new UnauthorizedRequestError1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new OrdersPatchResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new OrdersPatchResponse422JsonException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order ordersConfirm(
            final String id,
            final String payPalClientMetadataId,
            final String prefer,
            final ConfirmOrderRequest body) throws ApiException, IOException {
        return prepareOrdersConfirmRequest(id, payPalClientMetadataId, prefer, body).execute();
    }

    /**
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> ordersConfirmAsync(
            final String id,
            final String payPalClientMetadataId,
            final String prefer,
            final ConfirmOrderRequest body) {
        try { 
            return prepareOrdersConfirmRequest(id, payPalClientMetadataId, prefer, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for ordersConfirm.
     */
    private ApiCall<Order, ApiException> prepareOrdersConfirmRequest(
            final String id,
            final String payPalClientMetadataId,
            final String prefer,
            final ConfirmOrderRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}/confirm-payment-source")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("PayPal-Client-Metadata-Id")
                                .value(payPalClientMetadataId).isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Authorization failed due to insufficient permissions.",
                                (reason, context) -> new OrdersConfirmResponse403JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new OrdersConfirmResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("An internal server error has occurred.",
                                (reason, context) -> new M500ErrorErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer
     * must first approve the order or a valid payment_source must be provided in the request. A
     * buyer can approve the order upon being redirected to the rel:approve URL that was returned in
     * the HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error
     * handling and troubleshooting, see &lt;a
     * href="/api/rest/reference/orders/v2/errors/#authorize-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  payPalRequestId  Required parameter: The server stores keys for 6 hours. The API
     *         callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see &lt;a
     *         href="/api/rest/requests/#paypal-auth-assertion"&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrderAuthorizeResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public OrderAuthorizeResponse ordersAuthorize(
            final String id,
            final String payPalRequestId,
            final String prefer,
            final String payPalClientMetadataId,
            final String payPalAuthAssertion,
            final AuthorizeRequest body) throws ApiException, IOException {
        return prepareOrdersAuthorizeRequest(id, payPalRequestId, prefer, payPalClientMetadataId,
                payPalAuthAssertion, body).execute();
    }

    /**
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer
     * must first approve the order or a valid payment_source must be provided in the request. A
     * buyer can approve the order upon being redirected to the rel:approve URL that was returned in
     * the HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error
     * handling and troubleshooting, see &lt;a
     * href="/api/rest/reference/orders/v2/errors/#authorize-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  payPalRequestId  Required parameter: The server stores keys for 6 hours. The API
     *         callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see &lt;a
     *         href="/api/rest/requests/#paypal-auth-assertion"&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param  body  Optional parameter: Example:
     * @return    Returns the OrderAuthorizeResponse response from the API call
     */
    public CompletableFuture<OrderAuthorizeResponse> ordersAuthorizeAsync(
            final String id,
            final String payPalRequestId,
            final String prefer,
            final String payPalClientMetadataId,
            final String payPalAuthAssertion,
            final AuthorizeRequest body) {
        try { 
            return prepareOrdersAuthorizeRequest(id, payPalRequestId, prefer, payPalClientMetadataId,
            payPalAuthAssertion, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for ordersAuthorize.
     */
    private ApiCall<OrderAuthorizeResponse, ApiException> prepareOrdersAuthorizeRequest(
            final String id,
            final String payPalRequestId,
            final String prefer,
            final String payPalClientMetadataId,
            final String payPalAuthAssertion,
            final AuthorizeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<OrderAuthorizeResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}/authorize")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("PayPal-Request-Id")
                                .value(payPalRequestId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("PayPal-Client-Metadata-Id")
                                .value(payPalClientMetadataId).isRequired(false))
                        .headerParam(param -> param.key("PayPal-Auth-Assertion")
                                .value(payPalAuthAssertion).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, OrderAuthorizeResponse.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new UnauthorizedRequestError1Exception(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("The authorized payment failed due to insufficient permissions.",
                                (reason, context) -> new OrdersAuthorizeResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new OrdersAuthorizeResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new OrdersAuthorizeResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("An internal server error has occurred.",
                                (reason, context) -> new M500ErrorErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Captures payment for an order. To successfully capture payment for an order, the buyer must
     * first approve the order or a valid payment_source must be provided in the request. A buyer
     * can approve the order upon being redirected to the rel:approve URL that was returned in the
     * HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error
     * handling and troubleshooting, see &lt;a
     * href="/api/rest/reference/orders/v2/errors/#capture-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  payPalRequestId  Required parameter: The server stores keys for 6 hours. The API
     *         callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see &lt;a
     *         href="/api/rest/requests/#paypal-auth-assertion"&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order captureOrder(
            final String id,
            final String payPalRequestId,
            final String prefer,
            final String payPalClientMetadataId,
            final String payPalAuthAssertion,
            final OrderCaptureRequest body) throws ApiException, IOException {
        return prepareCaptureOrderRequest(id, payPalRequestId, prefer, payPalClientMetadataId,
                payPalAuthAssertion, body).execute();
    }

    /**
     * Captures payment for an order. To successfully capture payment for an order, the buyer must
     * first approve the order or a valid payment_source must be provided in the request. A buyer
     * can approve the order upon being redirected to the rel:approve URL that was returned in the
     * HATEOAS links in the create order response.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error
     * handling and troubleshooting, see &lt;a
     * href="/api/rest/reference/orders/v2/errors/#capture-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  payPalRequestId  Required parameter: The server stores keys for 6 hours. The API
     *         callers can request the times to up to 72 hours by speaking to their Account Manager.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:return=minimal. The server returns a minimal response to
     *         optimize communication between the API caller and the server. A minimal response
     *         includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links. return=representation. The server returns a complete resource representation,
     *         including the current state of the resource.
     * @param  payPalClientMetadataId  Optional parameter: Example:
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see &lt;a
     *         href="/api/rest/requests/#paypal-auth-assertion"&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @param  body  Optional parameter: Example:
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> captureOrderAsync(
            final String id,
            final String payPalRequestId,
            final String prefer,
            final String payPalClientMetadataId,
            final String payPalAuthAssertion,
            final OrderCaptureRequest body) {
        try { 
            return prepareCaptureOrderRequest(id, payPalRequestId, prefer, payPalClientMetadataId,
            payPalAuthAssertion, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for captureOrder.
     */
    private ApiCall<Order, ApiException> prepareCaptureOrderRequest(
            final String id,
            final String payPalRequestId,
            final String prefer,
            final String payPalClientMetadataId,
            final String payPalAuthAssertion,
            final OrderCaptureRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}/capture")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("PayPal-Request-Id")
                                .value(payPalRequestId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("PayPal-Client-Metadata-Id")
                                .value(payPalClientMetadataId).isRequired(false))
                        .headerParam(param -> param.key("PayPal-Auth-Assertion")
                                .value(payPalAuthAssertion).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new UnauthorizedRequestError1Exception(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("The authorized payment failed due to insufficient permissions.",
                                (reason, context) -> new ForbiddenError1Exception(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new ResourceNotFoundException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new CaptureOrdersUnprocessableRequestException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("An internal server error has occurred.",
                                (reason, context) -> new M500ErrorErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Adds tracking information for an Order.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  body  Required parameter: Example:
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see &lt;a
     *         href="/api/rest/requests/#paypal-auth-assertion"&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order ordersTrackCreate(
            final String id,
            final OrderTrackerRequest body,
            final String payPalAuthAssertion) throws ApiException, IOException {
        return prepareOrdersTrackCreateRequest(id, body, payPalAuthAssertion).execute();
    }

    /**
     * Adds tracking information for an Order.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  body  Required parameter: Example:
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see &lt;a
     *         href="/api/rest/requests/#paypal-auth-assertion"&gt;PayPal-Auth-Assertion&lt;/a&gt;.
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> ordersTrackCreateAsync(
            final String id,
            final OrderTrackerRequest body,
            final String payPalAuthAssertion) {
        try { 
            return prepareOrdersTrackCreateRequest(id, body, payPalAuthAssertion).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for ordersTrackCreate.
     */
    private ApiCall<Order, ApiException> prepareOrdersTrackCreateRequest(
            final String id,
            final OrderTrackerRequest body,
            final String payPalAuthAssertion) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}/track")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("PayPal-Auth-Assertion")
                                .value(payPalAuthAssertion).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Authorization failed due to insufficient permissions.",
                                (reason, context) -> new OrdersTrackCreateResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new OrdersTrackCreateResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new OrdersTrackCreateResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("An internal server error has occurred.",
                                (reason, context) -> new M500ErrorErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes
     * or
     * objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Using
     * replace op for &lt;code&gt;items&lt;/code&gt; will replace the entire &lt;code&gt;items&lt;/code&gt; object with the
     * value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;notify_payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Only patching
     * status to CANCELLED is currently supported.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  trackerId  Required parameter: The order tracking ID.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void ordersTrackersPatch(
            final String id,
            final String trackerId,
            final List<Patch> body) throws ApiException, IOException {
        prepareOrdersTrackersPatchRequest(id, trackerId, body).execute();
    }

    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes
     * or
     * objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Using
     * replace op for &lt;code&gt;items&lt;/code&gt; will replace the entire &lt;code&gt;items&lt;/code&gt; object with the
     * value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;notify_payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Only patching
     * status to CANCELLED is currently supported.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  trackerId  Required parameter: The order tracking ID.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> ordersTrackersPatchAsync(
            final String id,
            final String trackerId,
            final List<Patch> body) {
        try { 
            return prepareOrdersTrackersPatchRequest(id, trackerId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for ordersTrackersPatch.
     */
    private ApiCall<Void, ApiException> prepareOrdersTrackersPatchRequest(
            final String id,
            final String trackerId,
            final List<Patch> body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}/trackers/{tracker_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("tracker_id").value(trackerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new BadRequestError1Exception(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Authorization failed due to insufficient permissions.",
                                (reason, context) -> new OrdersTrackersPatchResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new OrdersTrackersPatchResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new OrdersTrackersPatchResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("An internal server error has occurred.",
                                (reason, context) -> new M500ErrorErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}