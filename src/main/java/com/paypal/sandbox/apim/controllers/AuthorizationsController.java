/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.Server;
import com.paypal.sandbox.apim.exceptions.ApiException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsCaptureResponse400JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsCaptureResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsCaptureResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsCaptureResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsGetResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsGetResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsReauthorizeResponse400JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsReauthorizeResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsReauthorizeResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsReauthorizeResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsVoidResponse401JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsVoidResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsVoidResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsVoidResponse409JsonException;
import com.paypal.sandbox.apim.exceptions.AuthorizationsVoidResponse422JsonException;
import com.paypal.sandbox.apim.exceptions.M400ErrorErrorException;
import com.paypal.sandbox.apim.exceptions.M401ErrorErrorException;
import com.paypal.sandbox.apim.http.request.HttpMethod;
import com.paypal.sandbox.apim.models.AdditionalAuthorization;
import com.paypal.sandbox.apim.models.AdditionalCapture;
import com.paypal.sandbox.apim.models.CaptureRequest;
import com.paypal.sandbox.apim.models.ReauthorizeRequest;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AuthorizationsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AuthorizationsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Shows details for an authorized payment, by ID.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @return    Returns the AdditionalAuthorization response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AdditionalAuthorization authorizationsGet(
            final String authorizationId) throws ApiException, IOException {
        return prepareAuthorizationsGetRequest(authorizationId).execute();
    }

    /**
     * Shows details for an authorized payment, by ID.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @return    Returns the AdditionalAuthorization response from the API call
     */
    public CompletableFuture<AdditionalAuthorization> authorizationsGetAsync(
            final String authorizationId) {
        try { 
            return prepareAuthorizationsGetRequest(authorizationId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for authorizationsGet.
     */
    private ApiCall<AdditionalAuthorization, ApiException> prepareAuthorizationsGetRequest(
            final String authorizationId) throws IOException {
        return new ApiCall.Builder<AdditionalAuthorization, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/payments/authorizations/{authorization_id}")
                        .templateParam(param -> param.key("authorization_id").value(authorizationId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AdditionalAuthorization.class))
                        .nullify404(false)
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new M401ErrorErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("The request failed because the caller has insufficient permissions.",
                                (reason, context) -> new AuthorizationsGetResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The request failed because the resource does not exist.",
                                (reason, context) -> new AuthorizationsGetResponse404JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("The request failed because an internal server error occurred.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Captures an authorized payment, by ID.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @param  payPalRequestId  Required parameter: The server stores keys for 45 days.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return=minimal&lt;/code&gt;.
     *         The server returns a minimal response to optimize communication between the API
     *         caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;,
     *         &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return=representation&lt;/code&gt;. The server
     *         returns a complete resource representation, including the current state of the
     *         resource.&lt;/li&gt;&lt;/ul&gt;
     * @param  body  Optional parameter: Example:
     * @return    Returns the AdditionalCapture response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AdditionalCapture authorizationsCapture(
            final String authorizationId,
            final String payPalRequestId,
            final String prefer,
            final CaptureRequest body) throws ApiException, IOException {
        return prepareAuthorizationsCaptureRequest(authorizationId, payPalRequestId, prefer,
                body).execute();
    }

    /**
     * Captures an authorized payment, by ID.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @param  payPalRequestId  Required parameter: The server stores keys for 45 days.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return=minimal&lt;/code&gt;.
     *         The server returns a minimal response to optimize communication between the API
     *         caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;,
     *         &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return=representation&lt;/code&gt;. The server
     *         returns a complete resource representation, including the current state of the
     *         resource.&lt;/li&gt;&lt;/ul&gt;
     * @param  body  Optional parameter: Example:
     * @return    Returns the AdditionalCapture response from the API call
     */
    public CompletableFuture<AdditionalCapture> authorizationsCaptureAsync(
            final String authorizationId,
            final String payPalRequestId,
            final String prefer,
            final CaptureRequest body) {
        try { 
            return prepareAuthorizationsCaptureRequest(authorizationId, payPalRequestId, prefer,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for authorizationsCapture.
     */
    private ApiCall<AdditionalCapture, ApiException> prepareAuthorizationsCaptureRequest(
            final String authorizationId,
            final String payPalRequestId,
            final String prefer,
            final CaptureRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AdditionalCapture, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/payments/authorizations/{authorization_id}/capture")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("authorization_id").value(authorizationId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("PayPal-Request-Id")
                                .value(payPalRequestId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AdditionalCapture.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
                                (reason, context) -> new AuthorizationsCaptureResponse400JsonException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new M401ErrorErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("The request failed because the caller has insufficient permissions.",
                                (reason, context) -> new AuthorizationsCaptureResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The request failed because the resource does not exist.",
                                (reason, context) -> new AuthorizationsCaptureResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The request failed because it is semantically incorrect or failed business validation.",
                                (reason, context) -> new AuthorizationsCaptureResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("The request failed because an internal server error occurred.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still
     * available, reauthorize a payment after its initial three-day honor period expires. Within the
     * 29-day authorization period, you can issue multiple re-authorizations after the honor period
     * expires.&lt;br/&gt;&lt;br/&gt;If 30 days have transpired since the date of the original authorization,
     * you must create an authorized payment instead of reauthorizing the original authorized
     * payment.&lt;br/&gt;&lt;br/&gt;A reauthorized payment itself has a new honor period of three
     * days.&lt;br/&gt;&lt;br/&gt;You can reauthorize an authorized payment once for up to 115% of the original
     * authorized amount, not to exceed an increase of $75 USD.&lt;br/&gt;&lt;br/&gt;Supports only the `amount`
     * request parameter.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; This request is currently not supported
     * for Partner use cases.&lt;/blockquote&gt;.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @param  payPalRequestId  Required parameter: The server stores keys for 45 days.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return=minimal&lt;/code&gt;.
     *         The server returns a minimal response to optimize communication between the API
     *         caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;,
     *         &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return=representation&lt;/code&gt;. The server
     *         returns a complete resource representation, including the current state of the
     *         resource.&lt;/li&gt;&lt;/ul&gt;
     * @param  body  Optional parameter: Example:
     * @return    Returns the AdditionalAuthorization response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AdditionalAuthorization authorizationsReauthorize(
            final String authorizationId,
            final String payPalRequestId,
            final String prefer,
            final ReauthorizeRequest body) throws ApiException, IOException {
        return prepareAuthorizationsReauthorizeRequest(authorizationId, payPalRequestId, prefer,
                body).execute();
    }

    /**
     * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still
     * available, reauthorize a payment after its initial three-day honor period expires. Within the
     * 29-day authorization period, you can issue multiple re-authorizations after the honor period
     * expires.&lt;br/&gt;&lt;br/&gt;If 30 days have transpired since the date of the original authorization,
     * you must create an authorized payment instead of reauthorizing the original authorized
     * payment.&lt;br/&gt;&lt;br/&gt;A reauthorized payment itself has a new honor period of three
     * days.&lt;br/&gt;&lt;br/&gt;You can reauthorize an authorized payment once for up to 115% of the original
     * authorized amount, not to exceed an increase of $75 USD.&lt;br/&gt;&lt;br/&gt;Supports only the `amount`
     * request parameter.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; This request is currently not supported
     * for Partner use cases.&lt;/blockquote&gt;.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @param  payPalRequestId  Required parameter: The server stores keys for 45 days.
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return=minimal&lt;/code&gt;.
     *         The server returns a minimal response to optimize communication between the API
     *         caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;,
     *         &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return=representation&lt;/code&gt;. The server
     *         returns a complete resource representation, including the current state of the
     *         resource.&lt;/li&gt;&lt;/ul&gt;
     * @param  body  Optional parameter: Example:
     * @return    Returns the AdditionalAuthorization response from the API call
     */
    public CompletableFuture<AdditionalAuthorization> authorizationsReauthorizeAsync(
            final String authorizationId,
            final String payPalRequestId,
            final String prefer,
            final ReauthorizeRequest body) {
        try { 
            return prepareAuthorizationsReauthorizeRequest(authorizationId, payPalRequestId, prefer,
            body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for authorizationsReauthorize.
     */
    private ApiCall<AdditionalAuthorization, ApiException> prepareAuthorizationsReauthorizeRequest(
            final String authorizationId,
            final String payPalRequestId,
            final String prefer,
            final ReauthorizeRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<AdditionalAuthorization, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/payments/authorizations/{authorization_id}/reauthorize")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("authorization_id").value(authorizationId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("PayPal-Request-Id")
                                .value(payPalRequestId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AdditionalAuthorization.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
                                (reason, context) -> new AuthorizationsReauthorizeResponse400JsonException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new M401ErrorErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("The request failed because the caller has insufficient permissions.",
                                (reason, context) -> new AuthorizationsReauthorizeResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The request failed because the resource does not exist.",
                                (reason, context) -> new AuthorizationsReauthorizeResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The request failed because it either is semantically incorrect or failed business validation.",
                                (reason, context) -> new AuthorizationsReauthorizeResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("The request failed because an internal server error occurred.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that
     * has been fully captured.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see
     *         [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;For
     *         three party transactions in which a partner is managing the API calls on behalf of a
     *         merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion
     *         header or an access token with target_subject.&lt;/blockquote&gt;
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return=minimal&lt;/code&gt;.
     *         The server returns a minimal response to optimize communication between the API
     *         caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;,
     *         &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return=representation&lt;/code&gt;. The server
     *         returns a complete resource representation, including the current state of the
     *         resource.&lt;/li&gt;&lt;/ul&gt;
     * @return    Returns the AdditionalAuthorization response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AdditionalAuthorization authorizationsVoid(
            final String authorizationId,
            final String payPalAuthAssertion,
            final String prefer) throws ApiException, IOException {
        return prepareAuthorizationsVoidRequest(authorizationId, payPalAuthAssertion,
                prefer).execute();
    }

    /**
     * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that
     * has been fully captured.
     * @param  authorizationId  Required parameter: The PayPal-generated ID for the authorized
     *         payment to void.
     * @param  payPalAuthAssertion  Optional parameter: An API-caller-provided JSON Web Token (JWT)
     *         assertion that identifies the merchant. For details, see
     *         [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;For
     *         three party transactions in which a partner is managing the API calls on behalf of a
     *         merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion
     *         header or an access token with target_subject.&lt;/blockquote&gt;
     * @param  prefer  Optional parameter: The preferred server response upon successful completion
     *         of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return=minimal&lt;/code&gt;.
     *         The server returns a minimal response to optimize communication between the API
     *         caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;,
     *         &lt;code&gt;status&lt;/code&gt; and HATEOAS
     *         links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return=representation&lt;/code&gt;. The server
     *         returns a complete resource representation, including the current state of the
     *         resource.&lt;/li&gt;&lt;/ul&gt;
     * @return    Returns the AdditionalAuthorization response from the API call
     */
    public CompletableFuture<AdditionalAuthorization> authorizationsVoidAsync(
            final String authorizationId,
            final String payPalAuthAssertion,
            final String prefer) {
        try { 
            return prepareAuthorizationsVoidRequest(authorizationId, payPalAuthAssertion,
            prefer).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for authorizationsVoid.
     */
    private ApiCall<AdditionalAuthorization, ApiException> prepareAuthorizationsVoidRequest(
            final String authorizationId,
            final String payPalAuthAssertion,
            final String prefer) throws IOException {
        return new ApiCall.Builder<AdditionalAuthorization, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/payments/authorizations/{authorization_id}/void")
                        .templateParam(param -> param.key("authorization_id").value(authorizationId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("PayPal-Auth-Assertion")
                                .value(payPalAuthAssertion).isRequired(false))
                        .headerParam(param -> param.key("Prefer")
                                .value((prefer != null) ? prefer : "return=minimal").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AdditionalAuthorization.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("The request failed because it is not well-formed or is syntactically incorrect or violates schema.",
                                (reason, context) -> new M400ErrorErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Authentication failed due to missing authorization header, or invalid authentication credentials.",
                                (reason, context) -> new AuthorizationsVoidResponse401JsonException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("The request failed because the caller has insufficient permissions.",
                                (reason, context) -> new AuthorizationsVoidResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The request failed because the resource does not exist.",
                                (reason, context) -> new AuthorizationsVoidResponse404JsonException(reason, context)))
                        .localErrorCase("409",
                                 ErrorCase.setReason("The request failed because a previous call for the given resource is in progress.",
                                (reason, context) -> new AuthorizationsVoidResponse409JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The request failed because it either is semantically incorrect or failed business validation.",
                                (reason, context) -> new AuthorizationsVoidResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("The request failed because an internal server error occurred.",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}