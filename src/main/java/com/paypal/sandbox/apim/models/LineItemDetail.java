/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for LineItemDetail type.
 */
public class LineItemDetail {
    private String commodityCode;
    private Money discountAmount;
    private Money totalAmount;
    private String unitOfMeasure;

    /**
     * Default constructor.
     */
    public LineItemDetail() {
    }

    /**
     * Initialization constructor.
     * @param  commodityCode  String value for commodityCode.
     * @param  discountAmount  Money value for discountAmount.
     * @param  totalAmount  Money value for totalAmount.
     * @param  unitOfMeasure  String value for unitOfMeasure.
     */
    public LineItemDetail(
            String commodityCode,
            Money discountAmount,
            Money totalAmount,
            String unitOfMeasure) {
        this.commodityCode = commodityCode;
        this.discountAmount = discountAmount;
        this.totalAmount = totalAmount;
        this.unitOfMeasure = unitOfMeasure;
    }

    /**
     * Getter for CommodityCode.
     * Code used to classify items purchased and track the total amount spent across various
     * categories of products and services. Different corporate purchasing organizations may use
     * different standards, but the United Nations Standard Products and Services Code (UNSPSC) is
     * frequently used.
     * @return Returns the String
     */
    @JsonGetter("commodity_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommodityCode() {
        return commodityCode;
    }

    /**
     * Setter for CommodityCode.
     * Code used to classify items purchased and track the total amount spent across various
     * categories of products and services. Different corporate purchasing organizations may use
     * different standards, but the United Nations Standard Products and Services Code (UNSPSC) is
     * frequently used.
     * @param commodityCode Value for String
     */
    @JsonSetter("commodity_code")
    public void setCommodityCode(String commodityCode) {
        this.commodityCode = commodityCode;
    }

    /**
     * Getter for DiscountAmount.
     * Use this field to break down the discount amount included in the total purchase amount. The
     * value provided here will not add to the total purchase amount. The value cannot be negative.
     * @return Returns the Money
     */
    @JsonGetter("discount_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Money getDiscountAmount() {
        return discountAmount;
    }

    /**
     * Setter for DiscountAmount.
     * Use this field to break down the discount amount included in the total purchase amount. The
     * value provided here will not add to the total purchase amount. The value cannot be negative.
     * @param discountAmount Value for Money
     */
    @JsonSetter("discount_amount")
    public void setDiscountAmount(Money discountAmount) {
        this.discountAmount = discountAmount;
    }

    /**
     * Getter for TotalAmount.
     * The subtotal for all items. Must equal the sum of (items[].unit_amount * items[].quantity)
     * for all items. item_total.value can not be a negative number.
     * @return Returns the Money
     */
    @JsonGetter("total_amount")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Money getTotalAmount() {
        return totalAmount;
    }

    /**
     * Setter for TotalAmount.
     * The subtotal for all items. Must equal the sum of (items[].unit_amount * items[].quantity)
     * for all items. item_total.value can not be a negative number.
     * @param totalAmount Value for Money
     */
    @JsonSetter("total_amount")
    public void setTotalAmount(Money totalAmount) {
        this.totalAmount = totalAmount;
    }

    /**
     * Getter for UnitOfMeasure.
     * Unit of measure is a standard used to express the magnitude of a quantity in international
     * trade. Most commonly used (but not limited to) examples are: Acre (ACR), Ampere (AMP),
     * Centigram (CGM), Centimetre (CMT), Cubic inch (INQ), Cubic metre (MTQ), Fluid ounce (OZA),
     * Foot (FOT), Hour (HUR), Item (ITM), Kilogram (KGM), Kilometre (KMT), Kilowatt (KWT), Liquid
     * gallon (GLL), Liter (LTR), Pounds (LBS), Square foot (FTK).
     * @return Returns the String
     */
    @JsonGetter("unit_of_measure")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUnitOfMeasure() {
        return unitOfMeasure;
    }

    /**
     * Setter for UnitOfMeasure.
     * Unit of measure is a standard used to express the magnitude of a quantity in international
     * trade. Most commonly used (but not limited to) examples are: Acre (ACR), Ampere (AMP),
     * Centigram (CGM), Centimetre (CMT), Cubic inch (INQ), Cubic metre (MTQ), Fluid ounce (OZA),
     * Foot (FOT), Hour (HUR), Item (ITM), Kilogram (KGM), Kilometre (KMT), Kilowatt (KWT), Liquid
     * gallon (GLL), Liter (LTR), Pounds (LBS), Square foot (FTK).
     * @param unitOfMeasure Value for String
     */
    @JsonSetter("unit_of_measure")
    public void setUnitOfMeasure(String unitOfMeasure) {
        this.unitOfMeasure = unitOfMeasure;
    }

    /**
     * Converts this LineItemDetail into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LineItemDetail [" + "commodityCode=" + commodityCode + ", discountAmount="
                + discountAmount + ", totalAmount=" + totalAmount + ", unitOfMeasure="
                + unitOfMeasure + "]";
    }

    /**
     * Builds a new {@link LineItemDetail.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LineItemDetail.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .commodityCode(getCommodityCode())
                .discountAmount(getDiscountAmount())
                .totalAmount(getTotalAmount())
                .unitOfMeasure(getUnitOfMeasure());
        return builder;
    }

    /**
     * Class to build instances of {@link LineItemDetail}.
     */
    public static class Builder {
        private String commodityCode;
        private Money discountAmount;
        private Money totalAmount;
        private String unitOfMeasure;



        /**
         * Setter for commodityCode.
         * @param  commodityCode  String value for commodityCode.
         * @return Builder
         */
        public Builder commodityCode(String commodityCode) {
            this.commodityCode = commodityCode;
            return this;
        }

        /**
         * Setter for discountAmount.
         * @param  discountAmount  Money value for discountAmount.
         * @return Builder
         */
        public Builder discountAmount(Money discountAmount) {
            this.discountAmount = discountAmount;
            return this;
        }

        /**
         * Setter for totalAmount.
         * @param  totalAmount  Money value for totalAmount.
         * @return Builder
         */
        public Builder totalAmount(Money totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Setter for unitOfMeasure.
         * @param  unitOfMeasure  String value for unitOfMeasure.
         * @return Builder
         */
        public Builder unitOfMeasure(String unitOfMeasure) {
            this.unitOfMeasure = unitOfMeasure;
            return this;
        }

        /**
         * Builds a new {@link LineItemDetail} object using the set fields.
         * @return {@link LineItemDetail}
         */
        public LineItemDetail build() {
            return new LineItemDetail(commodityCode, discountAmount, totalAmount, unitOfMeasure);
        }
    }
}
