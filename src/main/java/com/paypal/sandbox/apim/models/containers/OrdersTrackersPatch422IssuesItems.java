/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.models.INVALIDJSONPOINTERFORMATERROR;
import com.paypal.sandbox.apim.models.ITEMSKUMISMATCHERROR;
import com.paypal.sandbox.apim.models.NOTPATCHABLEERROR;
import com.paypal.sandbox.apim.models.PATCHPATHREQUIREDERROR;
import com.paypal.sandbox.apim.models.PATCHVALUEREQUIREDERROR;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = OrdersTrackersPatch422IssuesItems.OrdersTrackersPatch422IssuesItemsDeserializer.class)
public abstract class OrdersTrackersPatch422IssuesItems {
    
    /**
     * This is INVALID_JSON_POINTER_FORMAT_ERROR case.
     * @param iNVALIDJSONPOINTERFORMATERROR INVALIDJSONPOINTERFORMATERROR value for iNVALIDJSONPOINTERFORMATERROR.
     * @return The INVALIDJSONPOINTERFORMATERRORCase object.
     */
    public static OrdersTrackersPatch422IssuesItems fromINVALIDJSONPOINTERFORMATERROR(
            INVALIDJSONPOINTERFORMATERROR iNVALIDJSONPOINTERFORMATERROR) {
        return iNVALIDJSONPOINTERFORMATERROR == null ? null : new INVALIDJSONPOINTERFORMATERRORCase(iNVALIDJSONPOINTERFORMATERROR);
    }

    /**
     * This is NOT_PATCHABLE_ERROR case.
     * @param nOTPATCHABLEERROR NOTPATCHABLEERROR value for nOTPATCHABLEERROR.
     * @return The NOTPATCHABLEERRORCase object.
     */
    public static OrdersTrackersPatch422IssuesItems fromNOTPATCHABLEERROR(
            NOTPATCHABLEERROR nOTPATCHABLEERROR) {
        return nOTPATCHABLEERROR == null ? null : new NOTPATCHABLEERRORCase(nOTPATCHABLEERROR);
    }

    /**
     * This is PATCH_VALUE_REQUIRED_ERROR case.
     * @param pATCHVALUEREQUIREDERROR PATCHVALUEREQUIREDERROR value for pATCHVALUEREQUIREDERROR.
     * @return The PATCHVALUEREQUIREDERRORCase object.
     */
    public static OrdersTrackersPatch422IssuesItems fromPATCHVALUEREQUIREDERROR(
            PATCHVALUEREQUIREDERROR pATCHVALUEREQUIREDERROR) {
        return pATCHVALUEREQUIREDERROR == null ? null : new PATCHVALUEREQUIREDERRORCase(pATCHVALUEREQUIREDERROR);
    }

    /**
     * This is PATCH_PATH_REQUIRED_ERROR case.
     * @param pATCHPATHREQUIREDERROR PATCHPATHREQUIREDERROR value for pATCHPATHREQUIREDERROR.
     * @return The PATCHPATHREQUIREDERRORCase object.
     */
    public static OrdersTrackersPatch422IssuesItems fromPATCHPATHREQUIREDERROR(
            PATCHPATHREQUIREDERROR pATCHPATHREQUIREDERROR) {
        return pATCHPATHREQUIREDERROR == null ? null : new PATCHPATHREQUIREDERRORCase(pATCHPATHREQUIREDERROR);
    }

    /**
     * This is ITEM_SKU_MISMATCH_ERROR case.
     * @param iTEMSKUMISMATCHERROR ITEMSKUMISMATCHERROR value for iTEMSKUMISMATCHERROR.
     * @return The ITEMSKUMISMATCHERRORCase object.
     */
    public static OrdersTrackersPatch422IssuesItems fromITEMSKUMISMATCHERROR(
            ITEMSKUMISMATCHERROR iTEMSKUMISMATCHERROR) {
        return iTEMSKUMISMATCHERROR == null ? null : new ITEMSKUMISMATCHERRORCase(iTEMSKUMISMATCHERROR);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R iNVALIDJSONPOINTERFORMATERROR(INVALIDJSONPOINTERFORMATERROR iNVALIDJSONPOINTERFORMATERROR);

        R nOTPATCHABLEERROR(NOTPATCHABLEERROR nOTPATCHABLEERROR);

        R pATCHVALUEREQUIREDERROR(PATCHVALUEREQUIREDERROR pATCHVALUEREQUIREDERROR);

        R pATCHPATHREQUIREDERROR(PATCHPATHREQUIREDERROR pATCHPATHREQUIREDERROR);

        R iTEMSKUMISMATCHERROR(ITEMSKUMISMATCHERROR iTEMSKUMISMATCHERROR);
    }

    /**
     * This is a implementation class for INVALIDJSONPOINTERFORMATERRORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDJSONPOINTERFORMATERROR")
    private static class INVALIDJSONPOINTERFORMATERRORCase extends OrdersTrackersPatch422IssuesItems {

        @JsonValue
        private INVALIDJSONPOINTERFORMATERROR iNVALIDJSONPOINTERFORMATERROR;

        INVALIDJSONPOINTERFORMATERRORCase(INVALIDJSONPOINTERFORMATERROR iNVALIDJSONPOINTERFORMATERROR) {
            this.iNVALIDJSONPOINTERFORMATERROR = iNVALIDJSONPOINTERFORMATERROR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDJSONPOINTERFORMATERROR(this.iNVALIDJSONPOINTERFORMATERROR);
        }

        @JsonCreator
        private INVALIDJSONPOINTERFORMATERRORCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDJSONPOINTERFORMATERROR = ApiHelper.deserialize(jsonNode,
                INVALIDJSONPOINTERFORMATERROR.class);
        }

        @Override
        public String toString() {
            return iNVALIDJSONPOINTERFORMATERROR.toString();
        }
    }

    /**
     * This is a implementation class for NOTPATCHABLEERRORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTPATCHABLEERROR")
    private static class NOTPATCHABLEERRORCase extends OrdersTrackersPatch422IssuesItems {

        @JsonValue
        private NOTPATCHABLEERROR nOTPATCHABLEERROR;

        NOTPATCHABLEERRORCase(NOTPATCHABLEERROR nOTPATCHABLEERROR) {
            this.nOTPATCHABLEERROR = nOTPATCHABLEERROR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTPATCHABLEERROR(this.nOTPATCHABLEERROR);
        }

        @JsonCreator
        private NOTPATCHABLEERRORCase(JsonNode jsonNode) throws IOException {
            this.nOTPATCHABLEERROR = ApiHelper.deserialize(jsonNode,
                NOTPATCHABLEERROR.class);
        }

        @Override
        public String toString() {
            return nOTPATCHABLEERROR.toString();
        }
    }

    /**
     * This is a implementation class for PATCHVALUEREQUIREDERRORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PATCHVALUEREQUIREDERROR")
    private static class PATCHVALUEREQUIREDERRORCase extends OrdersTrackersPatch422IssuesItems {

        @JsonValue
        private PATCHVALUEREQUIREDERROR pATCHVALUEREQUIREDERROR;

        PATCHVALUEREQUIREDERRORCase(PATCHVALUEREQUIREDERROR pATCHVALUEREQUIREDERROR) {
            this.pATCHVALUEREQUIREDERROR = pATCHVALUEREQUIREDERROR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pATCHVALUEREQUIREDERROR(this.pATCHVALUEREQUIREDERROR);
        }

        @JsonCreator
        private PATCHVALUEREQUIREDERRORCase(JsonNode jsonNode) throws IOException {
            this.pATCHVALUEREQUIREDERROR = ApiHelper.deserialize(jsonNode,
                PATCHVALUEREQUIREDERROR.class);
        }

        @Override
        public String toString() {
            return pATCHVALUEREQUIREDERROR.toString();
        }
    }

    /**
     * This is a implementation class for PATCHPATHREQUIREDERRORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PATCHPATHREQUIREDERROR")
    private static class PATCHPATHREQUIREDERRORCase extends OrdersTrackersPatch422IssuesItems {

        @JsonValue
        private PATCHPATHREQUIREDERROR pATCHPATHREQUIREDERROR;

        PATCHPATHREQUIREDERRORCase(PATCHPATHREQUIREDERROR pATCHPATHREQUIREDERROR) {
            this.pATCHPATHREQUIREDERROR = pATCHPATHREQUIREDERROR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pATCHPATHREQUIREDERROR(this.pATCHPATHREQUIREDERROR);
        }

        @JsonCreator
        private PATCHPATHREQUIREDERRORCase(JsonNode jsonNode) throws IOException {
            this.pATCHPATHREQUIREDERROR = ApiHelper.deserialize(jsonNode,
                PATCHPATHREQUIREDERROR.class);
        }

        @Override
        public String toString() {
            return pATCHPATHREQUIREDERROR.toString();
        }
    }

    /**
     * This is a implementation class for ITEMSKUMISMATCHERRORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ITEMSKUMISMATCHERROR")
    private static class ITEMSKUMISMATCHERRORCase extends OrdersTrackersPatch422IssuesItems {

        @JsonValue
        private ITEMSKUMISMATCHERROR iTEMSKUMISMATCHERROR;

        ITEMSKUMISMATCHERRORCase(ITEMSKUMISMATCHERROR iTEMSKUMISMATCHERROR) {
            this.iTEMSKUMISMATCHERROR = iTEMSKUMISMATCHERROR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iTEMSKUMISMATCHERROR(this.iTEMSKUMISMATCHERROR);
        }

        @JsonCreator
        private ITEMSKUMISMATCHERRORCase(JsonNode jsonNode) throws IOException {
            this.iTEMSKUMISMATCHERROR = ApiHelper.deserialize(jsonNode,
                ITEMSKUMISMATCHERROR.class);
        }

        @Override
        public String toString() {
            return iTEMSKUMISMATCHERROR.toString();
        }
    }

    /**
     * This is a custom deserializer class for OrdersTrackersPatch422IssuesItems.
     */
    protected static class OrdersTrackersPatch422IssuesItemsDeserializer
            extends JsonDeserializer<OrdersTrackersPatch422IssuesItems> {

        @Override
        public OrdersTrackersPatch422IssuesItems deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(
                    INVALIDJSONPOINTERFORMATERRORCase.class, NOTPATCHABLEERRORCase.class,
                    PATCHVALUEREQUIREDERRORCase.class, PATCHPATHREQUIREDERRORCase.class,
                    ITEMSKUMISMATCHERRORCase.class), false);
        }
    }

}
