/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for PaymentSourceDefinition type.
 */
public class PaymentSourceDefinition {
    private CardRequest card;
    private Token token;
    private PayPalWallet paypal;
    private BancontactPaymentInformation bancontact;
    private BLIKPaymentInformation blik;
    private AnEpsPaymentInformation eps;
    private AGiropayPaymentInformation giropay;
    private TheIDEALPaymentInformation ideal;
    private MyBankPaymentInformation mybank;
    private P24PaymentInformation p24;
    private SofortPaymentInformation sofort;
    private TrustlyPaymentInformation trustly;
    private ApplePayPaymentRequestObject applePay;
    private Object googlePay;
    private VenmoPaymentRequestObject venmo;

    /**
     * Default constructor.
     */
    public PaymentSourceDefinition() {
    }

    /**
     * Initialization constructor.
     * @param  card  CardRequest value for card.
     * @param  token  Token value for token.
     * @param  paypal  PayPalWallet value for paypal.
     * @param  bancontact  BancontactPaymentInformation value for bancontact.
     * @param  blik  BLIKPaymentInformation value for blik.
     * @param  eps  AnEpsPaymentInformation value for eps.
     * @param  giropay  AGiropayPaymentInformation value for giropay.
     * @param  ideal  TheIDEALPaymentInformation value for ideal.
     * @param  mybank  MyBankPaymentInformation value for mybank.
     * @param  p24  P24PaymentInformation value for p24.
     * @param  sofort  SofortPaymentInformation value for sofort.
     * @param  trustly  TrustlyPaymentInformation value for trustly.
     * @param  applePay  ApplePayPaymentRequestObject value for applePay.
     * @param  googlePay  Object value for googlePay.
     * @param  venmo  VenmoPaymentRequestObject value for venmo.
     */
    public PaymentSourceDefinition(
            CardRequest card,
            Token token,
            PayPalWallet paypal,
            BancontactPaymentInformation bancontact,
            BLIKPaymentInformation blik,
            AnEpsPaymentInformation eps,
            AGiropayPaymentInformation giropay,
            TheIDEALPaymentInformation ideal,
            MyBankPaymentInformation mybank,
            P24PaymentInformation p24,
            SofortPaymentInformation sofort,
            TrustlyPaymentInformation trustly,
            ApplePayPaymentRequestObject applePay,
            Object googlePay,
            VenmoPaymentRequestObject venmo) {
        this.card = card;
        this.token = token;
        this.paypal = paypal;
        this.bancontact = bancontact;
        this.blik = blik;
        this.eps = eps;
        this.giropay = giropay;
        this.ideal = ideal;
        this.mybank = mybank;
        this.p24 = p24;
        this.sofort = sofort;
        this.trustly = trustly;
        this.applePay = applePay;
        this.googlePay = googlePay;
        this.venmo = venmo;
    }

    /**
     * Getter for Card.
     * The payment card to use to fund a payment. Can be a credit or debit
     * card.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Passing card number, cvv and expiry directly via the
     * API requires &lt;a
     * href="https://www.pcisecuritystandards.org/pci_security/completing_self_assessment"&gt; PCI SAQ
     * D compliance&lt;/a&gt;. &lt;br&gt;*PayPal offers a mechanism by which you do not have to take on the
     * &lt;strong&gt;PCI SAQ D&lt;/strong&gt; burden by using hosted fields - refer to &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/integrate/"&gt;this Integration
     * Guide&lt;/a&gt;*.&lt;/blockquote&gt;
     * @return Returns the CardRequest
     */
    @JsonGetter("card")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CardRequest getCard() {
        return card;
    }

    /**
     * Setter for Card.
     * The payment card to use to fund a payment. Can be a credit or debit
     * card.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; Passing card number, cvv and expiry directly via the
     * API requires &lt;a
     * href="https://www.pcisecuritystandards.org/pci_security/completing_self_assessment"&gt; PCI SAQ
     * D compliance&lt;/a&gt;. &lt;br&gt;*PayPal offers a mechanism by which you do not have to take on the
     * &lt;strong&gt;PCI SAQ D&lt;/strong&gt; burden by using hosted fields - refer to &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/integrate/"&gt;this Integration
     * Guide&lt;/a&gt;*.&lt;/blockquote&gt;
     * @param card Value for CardRequest
     */
    @JsonSetter("card")
    public void setCard(CardRequest card) {
        this.card = card;
    }

    /**
     * Getter for Token.
     * The tokenized payment source to fund a payment.
     * @return Returns the Token
     */
    @JsonGetter("token")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Token getToken() {
        return token;
    }

    /**
     * Setter for Token.
     * The tokenized payment source to fund a payment.
     * @param token Value for Token
     */
    @JsonSetter("token")
    public void setToken(Token token) {
        this.token = token;
    }

    /**
     * Getter for Paypal.
     * Indicates that PayPal Wallet is the payment source. Main use of this selection is to provide
     * additional instructions associated with this choice like vaulting.
     * @return Returns the PayPalWallet
     */
    @JsonGetter("paypal")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PayPalWallet getPaypal() {
        return paypal;
    }

    /**
     * Setter for Paypal.
     * Indicates that PayPal Wallet is the payment source. Main use of this selection is to provide
     * additional instructions associated with this choice like vaulting.
     * @param paypal Value for PayPalWallet
     */
    @JsonSetter("paypal")
    public void setPaypal(PayPalWallet paypal) {
        this.paypal = paypal;
    }

    /**
     * Getter for Bancontact.
     * Bancontact is the most popular online payment in Belgium. [More
     * Details](https://www.bancontact.com/).
     * @return Returns the BancontactPaymentInformation
     */
    @JsonGetter("bancontact")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BancontactPaymentInformation getBancontact() {
        return bancontact;
    }

    /**
     * Setter for Bancontact.
     * Bancontact is the most popular online payment in Belgium. [More
     * Details](https://www.bancontact.com/).
     * @param bancontact Value for BancontactPaymentInformation
     */
    @JsonSetter("bancontact")
    public void setBancontact(BancontactPaymentInformation bancontact) {
        this.bancontact = bancontact;
    }

    /**
     * Getter for Blik.
     * BLIK is a mobile payment system, created by Polish Payment Standard in order to allow
     * millions of users to pay in shops, payout cash in ATMs and make online purchases and
     * payments. [More Details](https://blikmobile.pl/).
     * @return Returns the BLIKPaymentInformation
     */
    @JsonGetter("blik")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public BLIKPaymentInformation getBlik() {
        return blik;
    }

    /**
     * Setter for Blik.
     * BLIK is a mobile payment system, created by Polish Payment Standard in order to allow
     * millions of users to pay in shops, payout cash in ATMs and make online purchases and
     * payments. [More Details](https://blikmobile.pl/).
     * @param blik Value for BLIKPaymentInformation
     */
    @JsonSetter("blik")
    public void setBlik(BLIKPaymentInformation blik) {
        this.blik = blik;
    }

    /**
     * Getter for Eps.
     * The eps transfer is an online payment method developed by many Austrian banks. [More
     * Details](https://www.eps-ueberweisung.at/).
     * @return Returns the AnEpsPaymentInformation
     */
    @JsonGetter("eps")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AnEpsPaymentInformation getEps() {
        return eps;
    }

    /**
     * Setter for Eps.
     * The eps transfer is an online payment method developed by many Austrian banks. [More
     * Details](https://www.eps-ueberweisung.at/).
     * @param eps Value for AnEpsPaymentInformation
     */
    @JsonSetter("eps")
    public void setEps(AnEpsPaymentInformation eps) {
        this.eps = eps;
    }

    /**
     * Getter for Giropay.
     * Giropay is an Internet payment System in Germany, based on online banking. [More
     * Details](https://giropay.de/).
     * @return Returns the AGiropayPaymentInformation
     */
    @JsonGetter("giropay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AGiropayPaymentInformation getGiropay() {
        return giropay;
    }

    /**
     * Setter for Giropay.
     * Giropay is an Internet payment System in Germany, based on online banking. [More
     * Details](https://giropay.de/).
     * @param giropay Value for AGiropayPaymentInformation
     */
    @JsonSetter("giropay")
    public void setGiropay(AGiropayPaymentInformation giropay) {
        this.giropay = giropay;
    }

    /**
     * Getter for Ideal.
     * The Dutch payment method iDEAL is an online payment method that enables consumers to pay
     * online through their own bank. [More Details](https://www.ideal.nl/).
     * @return Returns the TheIDEALPaymentInformation
     */
    @JsonGetter("ideal")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TheIDEALPaymentInformation getIdeal() {
        return ideal;
    }

    /**
     * Setter for Ideal.
     * The Dutch payment method iDEAL is an online payment method that enables consumers to pay
     * online through their own bank. [More Details](https://www.ideal.nl/).
     * @param ideal Value for TheIDEALPaymentInformation
     */
    @JsonSetter("ideal")
    public void setIdeal(TheIDEALPaymentInformation ideal) {
        this.ideal = ideal;
    }

    /**
     * Getter for Mybank.
     * MyBank is an e-authorisation solution which enables safe digital payments and identity
     * authentication through a consumer’s own online banking portal or mobile application. [More
     * Details](https://www.mybank.eu/).
     * @return Returns the MyBankPaymentInformation
     */
    @JsonGetter("mybank")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MyBankPaymentInformation getMybank() {
        return mybank;
    }

    /**
     * Setter for Mybank.
     * MyBank is an e-authorisation solution which enables safe digital payments and identity
     * authentication through a consumer’s own online banking portal or mobile application. [More
     * Details](https://www.mybank.eu/).
     * @param mybank Value for MyBankPaymentInformation
     */
    @JsonSetter("mybank")
    public void setMybank(MyBankPaymentInformation mybank) {
        this.mybank = mybank;
    }

    /**
     * Getter for P24.
     * P24 (Przelewy24) is a secure and fast online bank transfer service linked to all the major
     * banks in Poland. [More Details](https://www.przelewy24.pl/).
     * @return Returns the P24PaymentInformation
     */
    @JsonGetter("p24")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public P24PaymentInformation getP24() {
        return p24;
    }

    /**
     * Setter for P24.
     * P24 (Przelewy24) is a secure and fast online bank transfer service linked to all the major
     * banks in Poland. [More Details](https://www.przelewy24.pl/).
     * @param p24 Value for P24PaymentInformation
     */
    @JsonSetter("p24")
    public void setP24(P24PaymentInformation p24) {
        this.p24 = p24;
    }

    /**
     * Getter for Sofort.
     * SOFORT Banking is a real-time bank transfer payment method that buyers use to transfer funds
     * directly to merchants from their bank accounts. [More
     * Details](https://www.klarna.com/sofort/).
     * @return Returns the SofortPaymentInformation
     */
    @JsonGetter("sofort")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SofortPaymentInformation getSofort() {
        return sofort;
    }

    /**
     * Setter for Sofort.
     * SOFORT Banking is a real-time bank transfer payment method that buyers use to transfer funds
     * directly to merchants from their bank accounts. [More
     * Details](https://www.klarna.com/sofort/).
     * @param sofort Value for SofortPaymentInformation
     */
    @JsonSetter("sofort")
    public void setSofort(SofortPaymentInformation sofort) {
        this.sofort = sofort;
    }

    /**
     * Getter for Trustly.
     * Trustly is a payment method that allows customers to shop and pay from their bank account.
     * [More Details](https://www.trustly.net/).
     * @return Returns the TrustlyPaymentInformation
     */
    @JsonGetter("trustly")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TrustlyPaymentInformation getTrustly() {
        return trustly;
    }

    /**
     * Setter for Trustly.
     * Trustly is a payment method that allows customers to shop and pay from their bank account.
     * [More Details](https://www.trustly.net/).
     * @param trustly Value for TrustlyPaymentInformation
     */
    @JsonSetter("trustly")
    public void setTrustly(TrustlyPaymentInformation trustly) {
        this.trustly = trustly;
    }

    /**
     * Getter for ApplePay.
     * ApplePay payment source, allows buyer to pay using ApplePay, both on Web as well as on
     * Native.
     * @return Returns the ApplePayPaymentRequestObject
     */
    @JsonGetter("apple_pay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ApplePayPaymentRequestObject getApplePay() {
        return applePay;
    }

    /**
     * Setter for ApplePay.
     * ApplePay payment source, allows buyer to pay using ApplePay, both on Web as well as on
     * Native.
     * @param applePay Value for ApplePayPaymentRequestObject
     */
    @JsonSetter("apple_pay")
    public void setApplePay(ApplePayPaymentRequestObject applePay) {
        this.applePay = applePay;
    }

    /**
     * Getter for GooglePay.
     * Google Pay payment source, allows buyer to pay using Google Pay.
     * @return Returns the Object
     */
    @JsonGetter("google_pay")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getGooglePay() {
        return googlePay;
    }

    /**
     * Setter for GooglePay.
     * Google Pay payment source, allows buyer to pay using Google Pay.
     * @param googlePay Value for Object
     */
    @JsonSetter("google_pay")
    public void setGooglePay(Object googlePay) {
        this.googlePay = googlePay;
    }

    /**
     * Getter for Venmo.
     * Information needed to indicate that Venmo is being used to fund the payment.
     * @return Returns the VenmoPaymentRequestObject
     */
    @JsonGetter("venmo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public VenmoPaymentRequestObject getVenmo() {
        return venmo;
    }

    /**
     * Setter for Venmo.
     * Information needed to indicate that Venmo is being used to fund the payment.
     * @param venmo Value for VenmoPaymentRequestObject
     */
    @JsonSetter("venmo")
    public void setVenmo(VenmoPaymentRequestObject venmo) {
        this.venmo = venmo;
    }

    /**
     * Converts this PaymentSourceDefinition into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "PaymentSourceDefinition [" + "card=" + card + ", token=" + token + ", paypal="
                + paypal + ", bancontact=" + bancontact + ", blik=" + blik + ", eps=" + eps
                + ", giropay=" + giropay + ", ideal=" + ideal + ", mybank=" + mybank + ", p24="
                + p24 + ", sofort=" + sofort + ", trustly=" + trustly + ", applePay=" + applePay
                + ", googlePay=" + googlePay + ", venmo=" + venmo + "]";
    }

    /**
     * Builds a new {@link PaymentSourceDefinition.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link PaymentSourceDefinition.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .card(getCard())
                .token(getToken())
                .paypal(getPaypal())
                .bancontact(getBancontact())
                .blik(getBlik())
                .eps(getEps())
                .giropay(getGiropay())
                .ideal(getIdeal())
                .mybank(getMybank())
                .p24(getP24())
                .sofort(getSofort())
                .trustly(getTrustly())
                .applePay(getApplePay())
                .googlePay(getGooglePay())
                .venmo(getVenmo());
        return builder;
    }

    /**
     * Class to build instances of {@link PaymentSourceDefinition}.
     */
    public static class Builder {
        private CardRequest card;
        private Token token;
        private PayPalWallet paypal;
        private BancontactPaymentInformation bancontact;
        private BLIKPaymentInformation blik;
        private AnEpsPaymentInformation eps;
        private AGiropayPaymentInformation giropay;
        private TheIDEALPaymentInformation ideal;
        private MyBankPaymentInformation mybank;
        private P24PaymentInformation p24;
        private SofortPaymentInformation sofort;
        private TrustlyPaymentInformation trustly;
        private ApplePayPaymentRequestObject applePay;
        private Object googlePay;
        private VenmoPaymentRequestObject venmo;



        /**
         * Setter for card.
         * @param  card  CardRequest value for card.
         * @return Builder
         */
        public Builder card(CardRequest card) {
            this.card = card;
            return this;
        }

        /**
         * Setter for token.
         * @param  token  Token value for token.
         * @return Builder
         */
        public Builder token(Token token) {
            this.token = token;
            return this;
        }

        /**
         * Setter for paypal.
         * @param  paypal  PayPalWallet value for paypal.
         * @return Builder
         */
        public Builder paypal(PayPalWallet paypal) {
            this.paypal = paypal;
            return this;
        }

        /**
         * Setter for bancontact.
         * @param  bancontact  BancontactPaymentInformation value for bancontact.
         * @return Builder
         */
        public Builder bancontact(BancontactPaymentInformation bancontact) {
            this.bancontact = bancontact;
            return this;
        }

        /**
         * Setter for blik.
         * @param  blik  BLIKPaymentInformation value for blik.
         * @return Builder
         */
        public Builder blik(BLIKPaymentInformation blik) {
            this.blik = blik;
            return this;
        }

        /**
         * Setter for eps.
         * @param  eps  AnEpsPaymentInformation value for eps.
         * @return Builder
         */
        public Builder eps(AnEpsPaymentInformation eps) {
            this.eps = eps;
            return this;
        }

        /**
         * Setter for giropay.
         * @param  giropay  AGiropayPaymentInformation value for giropay.
         * @return Builder
         */
        public Builder giropay(AGiropayPaymentInformation giropay) {
            this.giropay = giropay;
            return this;
        }

        /**
         * Setter for ideal.
         * @param  ideal  TheIDEALPaymentInformation value for ideal.
         * @return Builder
         */
        public Builder ideal(TheIDEALPaymentInformation ideal) {
            this.ideal = ideal;
            return this;
        }

        /**
         * Setter for mybank.
         * @param  mybank  MyBankPaymentInformation value for mybank.
         * @return Builder
         */
        public Builder mybank(MyBankPaymentInformation mybank) {
            this.mybank = mybank;
            return this;
        }

        /**
         * Setter for p24.
         * @param  p24  P24PaymentInformation value for p24.
         * @return Builder
         */
        public Builder p24(P24PaymentInformation p24) {
            this.p24 = p24;
            return this;
        }

        /**
         * Setter for sofort.
         * @param  sofort  SofortPaymentInformation value for sofort.
         * @return Builder
         */
        public Builder sofort(SofortPaymentInformation sofort) {
            this.sofort = sofort;
            return this;
        }

        /**
         * Setter for trustly.
         * @param  trustly  TrustlyPaymentInformation value for trustly.
         * @return Builder
         */
        public Builder trustly(TrustlyPaymentInformation trustly) {
            this.trustly = trustly;
            return this;
        }

        /**
         * Setter for applePay.
         * @param  applePay  ApplePayPaymentRequestObject value for applePay.
         * @return Builder
         */
        public Builder applePay(ApplePayPaymentRequestObject applePay) {
            this.applePay = applePay;
            return this;
        }

        /**
         * Setter for googlePay.
         * @param  googlePay  Object value for googlePay.
         * @return Builder
         */
        public Builder googlePay(Object googlePay) {
            this.googlePay = googlePay;
            return this;
        }

        /**
         * Setter for venmo.
         * @param  venmo  VenmoPaymentRequestObject value for venmo.
         * @return Builder
         */
        public Builder venmo(VenmoPaymentRequestObject venmo) {
            this.venmo = venmo;
            return this;
        }

        /**
         * Builds a new {@link PaymentSourceDefinition} object using the set fields.
         * @return {@link PaymentSourceDefinition}
         */
        public PaymentSourceDefinition build() {
            return new PaymentSourceDefinition(card, token, paypal, bancontact, blik, eps, giropay,
                    ideal, mybank, p24, sofort, trustly, applePay, googlePay, venmo);
        }
    }
}
