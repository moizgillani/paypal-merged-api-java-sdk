/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * CapturesRefund422IssuesItemsAnyof12DescriptionEnum to be used.
 */
public enum CapturesRefund422IssuesItemsAnyof12DescriptionEnum {
    ENUM_CAPTURE_COULD_NOT_BE_REFUNDED_DUE_TO_INSUFFICIENT_FUNDS_PLEASE_CHECK_TO_SEE_IF_YOU_HAVE_SUFFICIENT_FUNDS_IN_YOUR_PAYPAL_ACCOUNT_OR_IF_THE_BANK_ACCOUNT_LINKED_TO_YOUR_PAYPAL_ACCOUNT_IS_VERIFIED_AND_HAS_SUFFICIENT_FUNDS;


    private static TreeMap<String, CapturesRefund422IssuesItemsAnyof12DescriptionEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_CAPTURE_COULD_NOT_BE_REFUNDED_DUE_TO_INSUFFICIENT_FUNDS_PLEASE_CHECK_TO_SEE_IF_YOU_HAVE_SUFFICIENT_FUNDS_IN_YOUR_PAYPAL_ACCOUNT_OR_IF_THE_BANK_ACCOUNT_LINKED_TO_YOUR_PAYPAL_ACCOUNT_IS_VERIFIED_AND_HAS_SUFFICIENT_FUNDS.value = "Capture could not be refunded due to insufficient funds. Please check to see if you have sufficient funds in your PayPal account or if the bank account linked to your PayPal account is verified and has sufficient funds.";

        valueMap.put("Capture could not be refunded due to insufficient funds. Please check to see if you have sufficient funds in your PayPal account or if the bank account linked to your PayPal account is verified and has sufficient funds.", ENUM_CAPTURE_COULD_NOT_BE_REFUNDED_DUE_TO_INSUFFICIENT_FUNDS_PLEASE_CHECK_TO_SEE_IF_YOU_HAVE_SUFFICIENT_FUNDS_IN_YOUR_PAYPAL_ACCOUNT_OR_IF_THE_BANK_ACCOUNT_LINKED_TO_YOUR_PAYPAL_ACCOUNT_IS_VERIFIED_AND_HAS_SUFFICIENT_FUNDS);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static CapturesRefund422IssuesItemsAnyof12DescriptionEnum constructFromString(String toConvert) throws IOException {
        CapturesRefund422IssuesItemsAnyof12DescriptionEnum enumValue = fromString(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static CapturesRefund422IssuesItemsAnyof12DescriptionEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of CapturesRefund422IssuesItemsAnyof12DescriptionEnum values to list of string values.
     * @param toConvert The list of CapturesRefund422IssuesItemsAnyof12DescriptionEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<CapturesRefund422IssuesItemsAnyof12DescriptionEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (CapturesRefund422IssuesItemsAnyof12DescriptionEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 