/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * CaptureStatusReasonEnum to be used.
 */
public enum CaptureStatusReasonEnum {
    BUYER_COMPLAINT,

    CHARGEBACK,

    ECHECK,

    INTERNATIONAL_WITHDRAWAL,

    OTHER,

    PENDING_REVIEW,

    RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION,

    REFUNDED,

    TRANSACTION_APPROVED_AWAITING_FUNDING,

    UNILATERAL,

    VERIFICATION_REQUIRED;


    private static TreeMap<String, CaptureStatusReasonEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        BUYER_COMPLAINT.value = "BUYER_COMPLAINT";
        CHARGEBACK.value = "CHARGEBACK";
        ECHECK.value = "ECHECK";
        INTERNATIONAL_WITHDRAWAL.value = "INTERNATIONAL_WITHDRAWAL";
        OTHER.value = "OTHER";
        PENDING_REVIEW.value = "PENDING_REVIEW";
        RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION.value = "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION";
        REFUNDED.value = "REFUNDED";
        TRANSACTION_APPROVED_AWAITING_FUNDING.value = "TRANSACTION_APPROVED_AWAITING_FUNDING";
        UNILATERAL.value = "UNILATERAL";
        VERIFICATION_REQUIRED.value = "VERIFICATION_REQUIRED";

        valueMap.put("BUYER_COMPLAINT", BUYER_COMPLAINT);
        valueMap.put("CHARGEBACK", CHARGEBACK);
        valueMap.put("ECHECK", ECHECK);
        valueMap.put("INTERNATIONAL_WITHDRAWAL", INTERNATIONAL_WITHDRAWAL);
        valueMap.put("OTHER", OTHER);
        valueMap.put("PENDING_REVIEW", PENDING_REVIEW);
        valueMap.put("RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION", RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION);
        valueMap.put("REFUNDED", REFUNDED);
        valueMap.put("TRANSACTION_APPROVED_AWAITING_FUNDING", TRANSACTION_APPROVED_AWAITING_FUNDING);
        valueMap.put("UNILATERAL", UNILATERAL);
        valueMap.put("VERIFICATION_REQUIRED", VERIFICATION_REQUIRED);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static CaptureStatusReasonEnum constructFromString(String toConvert) throws IOException {
        CaptureStatusReasonEnum enumValue = fromString(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static CaptureStatusReasonEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of CaptureStatusReasonEnum values to list of string values.
     * @param toConvert The list of CaptureStatusReasonEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<CaptureStatusReasonEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (CaptureStatusReasonEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 