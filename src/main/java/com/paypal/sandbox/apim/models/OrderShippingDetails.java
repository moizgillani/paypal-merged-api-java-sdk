/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for OrderShippingDetails type.
 */
public class OrderShippingDetails {
    private PartyName name;
    private ShippingType1Enum type;
    private List<ShippingOption> options;
    private PortableInternationalPostalAddress address;
    private List<OrderTrackerResponse> trackers;

    /**
     * Default constructor.
     */
    public OrderShippingDetails() {
    }

    /**
     * Initialization constructor.
     * @param  name  PartyName value for name.
     * @param  type  ShippingType1Enum value for type.
     * @param  options  List of ShippingOption value for options.
     * @param  address  PortableInternationalPostalAddress value for address.
     * @param  trackers  List of OrderTrackerResponse value for trackers.
     */
    public OrderShippingDetails(
            PartyName name,
            ShippingType1Enum type,
            List<ShippingOption> options,
            PortableInternationalPostalAddress address,
            List<OrderTrackerResponse> trackers) {
        this.name = name;
        this.type = type;
        this.options = options;
        this.address = address;
        this.trackers = trackers;
    }

    /**
     * Getter for Name.
     * The name of the person to whom to ship the items. Supports only the `full_name` property.
     * @return Returns the PartyName
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PartyName getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The name of the person to whom to ship the items. Supports only the `full_name` property.
     * @param name Value for PartyName
     */
    @JsonSetter("name")
    public void setName(PartyName name) {
        this.name = name;
    }

    /**
     * Getter for Type.
     * The method by which the payer wants to get their items from the payee e.g shipping, in-person
     * pickup. Either type or options but not both may be present.
     * @return Returns the ShippingType1Enum
     */
    @JsonGetter("type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ShippingType1Enum getType() {
        return type;
    }

    /**
     * Setter for Type.
     * The method by which the payer wants to get their items from the payee e.g shipping, in-person
     * pickup. Either type or options but not both may be present.
     * @param type Value for ShippingType1Enum
     */
    @JsonSetter("type")
    public void setType(ShippingType1Enum type) {
        this.type = type;
    }

    /**
     * Getter for Options.
     * An array of shipping options that the payee or merchant offers to the payer to ship or pick
     * up their items.
     * @return Returns the List of ShippingOption
     */
    @JsonGetter("options")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<ShippingOption> getOptions() {
        return options;
    }

    /**
     * Setter for Options.
     * An array of shipping options that the payee or merchant offers to the payer to ship or pick
     * up their items.
     * @param options Value for List of ShippingOption
     */
    @JsonSetter("options")
    public void setOptions(List<ShippingOption> options) {
        this.options = options;
    }

    /**
     * Getter for Address.
     * The address of the payer. Supports only the `address_line_1`, `address_line_2`,
     * `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. Also referred
     * to as the billing address of the customer.
     * @return Returns the PortableInternationalPostalAddress
     */
    @JsonGetter("address")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PortableInternationalPostalAddress getAddress() {
        return address;
    }

    /**
     * Setter for Address.
     * The address of the payer. Supports only the `address_line_1`, `address_line_2`,
     * `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. Also referred
     * to as the billing address of the customer.
     * @param address Value for PortableInternationalPostalAddress
     */
    @JsonSetter("address")
    public void setAddress(PortableInternationalPostalAddress address) {
        this.address = address;
    }

    /**
     * Getter for Trackers.
     * An array of trackers for a transaction.
     * @return Returns the List of OrderTrackerResponse
     */
    @JsonGetter("trackers")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<OrderTrackerResponse> getTrackers() {
        return trackers;
    }

    /**
     * Setter for Trackers.
     * An array of trackers for a transaction.
     * @param trackers Value for List of OrderTrackerResponse
     */
    @JsonSetter("trackers")
    public void setTrackers(List<OrderTrackerResponse> trackers) {
        this.trackers = trackers;
    }

    /**
     * Converts this OrderShippingDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "OrderShippingDetails [" + "name=" + name + ", type=" + type + ", options=" + options
                + ", address=" + address + ", trackers=" + trackers + "]";
    }

    /**
     * Builds a new {@link OrderShippingDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link OrderShippingDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .name(getName())
                .type(getType())
                .options(getOptions())
                .address(getAddress())
                .trackers(getTrackers());
        return builder;
    }

    /**
     * Class to build instances of {@link OrderShippingDetails}.
     */
    public static class Builder {
        private PartyName name;
        private ShippingType1Enum type;
        private List<ShippingOption> options;
        private PortableInternationalPostalAddress address;
        private List<OrderTrackerResponse> trackers;



        /**
         * Setter for name.
         * @param  name  PartyName value for name.
         * @return Builder
         */
        public Builder name(PartyName name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  ShippingType1Enum value for type.
         * @return Builder
         */
        public Builder type(ShippingType1Enum type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for options.
         * @param  options  List of ShippingOption value for options.
         * @return Builder
         */
        public Builder options(List<ShippingOption> options) {
            this.options = options;
            return this;
        }

        /**
         * Setter for address.
         * @param  address  PortableInternationalPostalAddress value for address.
         * @return Builder
         */
        public Builder address(PortableInternationalPostalAddress address) {
            this.address = address;
            return this;
        }

        /**
         * Setter for trackers.
         * @param  trackers  List of OrderTrackerResponse value for trackers.
         * @return Builder
         */
        public Builder trackers(List<OrderTrackerResponse> trackers) {
            this.trackers = trackers;
            return this;
        }

        /**
         * Builds a new {@link OrderShippingDetails} object using the set fields.
         * @return {@link OrderShippingDetails}
         */
        public OrderShippingDetails build() {
            return new OrderShippingDetails(name, type, options, address, trackers);
        }
    }
}
