/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.models.NOTENABLEDFORCARDPROCESSING;
import com.paypal.sandbox.apim.models.PAYEEACCOUNTNOTVERIFIED;
import com.paypal.sandbox.apim.models.PERMISSIONDENIED;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = ForbiddenErrorIssuesItems.ForbiddenErrorIssuesItemsDeserializer.class)
public abstract class ForbiddenErrorIssuesItems {
    
    /**
     * This is PERMISSION_DENIED case.
     * @param pERMISSIONDENIED PERMISSIONDENIED value for pERMISSIONDENIED.
     * @return The PERMISSIONDENIEDCase object.
     */
    public static ForbiddenErrorIssuesItems fromPERMISSIONDENIED(
            PERMISSIONDENIED pERMISSIONDENIED) {
        return pERMISSIONDENIED == null ? null : new PERMISSIONDENIEDCase(pERMISSIONDENIED);
    }

    /**
     * This is NOT_ENABLED_FOR_CARD_PROCESSING case.
     * @param nOTENABLEDFORCARDPROCESSING NOTENABLEDFORCARDPROCESSING value for nOTENABLEDFORCARDPROCESSING.
     * @return The NOTENABLEDFORCARDPROCESSINGCase object.
     */
    public static ForbiddenErrorIssuesItems fromNOTENABLEDFORCARDPROCESSING(
            NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING) {
        return nOTENABLEDFORCARDPROCESSING == null ? null : new NOTENABLEDFORCARDPROCESSINGCase(nOTENABLEDFORCARDPROCESSING);
    }

    /**
     * This is PAYEE_ACCOUNT_NOT_VERIFIED case.
     * @param pAYEEACCOUNTNOTVERIFIED PAYEEACCOUNTNOTVERIFIED value for pAYEEACCOUNTNOTVERIFIED.
     * @return The PAYEEACCOUNTNOTVERIFIEDCase object.
     */
    public static ForbiddenErrorIssuesItems fromPAYEEACCOUNTNOTVERIFIED(
            PAYEEACCOUNTNOTVERIFIED pAYEEACCOUNTNOTVERIFIED) {
        return pAYEEACCOUNTNOTVERIFIED == null ? null : new PAYEEACCOUNTNOTVERIFIEDCase(pAYEEACCOUNTNOTVERIFIED);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R pERMISSIONDENIED(PERMISSIONDENIED pERMISSIONDENIED);

        R nOTENABLEDFORCARDPROCESSING(NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING);

        R pAYEEACCOUNTNOTVERIFIED(PAYEEACCOUNTNOTVERIFIED pAYEEACCOUNTNOTVERIFIED);
    }

    /**
     * This is a implementation class for PERMISSIONDENIEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PERMISSIONDENIED")
    private static class PERMISSIONDENIEDCase extends ForbiddenErrorIssuesItems {

        @JsonValue
        private PERMISSIONDENIED pERMISSIONDENIED;

        PERMISSIONDENIEDCase(PERMISSIONDENIED pERMISSIONDENIED) {
            this.pERMISSIONDENIED = pERMISSIONDENIED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pERMISSIONDENIED(this.pERMISSIONDENIED);
        }

        @JsonCreator
        private PERMISSIONDENIEDCase(JsonNode jsonNode) throws IOException {
            this.pERMISSIONDENIED = ApiHelper.deserialize(jsonNode,
                PERMISSIONDENIED.class);
        }

        @Override
        public String toString() {
            return pERMISSIONDENIED.toString();
        }
    }

    /**
     * This is a implementation class for NOTENABLEDFORCARDPROCESSINGCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTENABLEDFORCARDPROCESSING")
    private static class NOTENABLEDFORCARDPROCESSINGCase extends ForbiddenErrorIssuesItems {

        @JsonValue
        private NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING;

        NOTENABLEDFORCARDPROCESSINGCase(NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING) {
            this.nOTENABLEDFORCARDPROCESSING = nOTENABLEDFORCARDPROCESSING;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTENABLEDFORCARDPROCESSING(this.nOTENABLEDFORCARDPROCESSING);
        }

        @JsonCreator
        private NOTENABLEDFORCARDPROCESSINGCase(JsonNode jsonNode) throws IOException {
            this.nOTENABLEDFORCARDPROCESSING = ApiHelper.deserialize(jsonNode,
                NOTENABLEDFORCARDPROCESSING.class);
        }

        @Override
        public String toString() {
            return nOTENABLEDFORCARDPROCESSING.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEACCOUNTNOTVERIFIEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEACCOUNTNOTVERIFIED")
    private static class PAYEEACCOUNTNOTVERIFIEDCase extends ForbiddenErrorIssuesItems {

        @JsonValue
        private PAYEEACCOUNTNOTVERIFIED pAYEEACCOUNTNOTVERIFIED;

        PAYEEACCOUNTNOTVERIFIEDCase(PAYEEACCOUNTNOTVERIFIED pAYEEACCOUNTNOTVERIFIED) {
            this.pAYEEACCOUNTNOTVERIFIED = pAYEEACCOUNTNOTVERIFIED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEACCOUNTNOTVERIFIED(this.pAYEEACCOUNTNOTVERIFIED);
        }

        @JsonCreator
        private PAYEEACCOUNTNOTVERIFIEDCase(JsonNode jsonNode) throws IOException {
            this.pAYEEACCOUNTNOTVERIFIED = ApiHelper.deserialize(jsonNode,
                PAYEEACCOUNTNOTVERIFIED.class);
        }

        @Override
        public String toString() {
            return pAYEEACCOUNTNOTVERIFIED.toString();
        }
    }

    /**
     * This is a custom deserializer class for ForbiddenErrorIssuesItems.
     */
    protected static class ForbiddenErrorIssuesItemsDeserializer
            extends JsonDeserializer<ForbiddenErrorIssuesItems> {

        @Override
        public ForbiddenErrorIssuesItems deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(PERMISSIONDENIEDCase.class,
                    NOTENABLEDFORCARDPROCESSINGCase.class,
                    PAYEEACCOUNTNOTVERIFIEDCase.class), false);
        }
    }

}
