/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * OAuthScopeOauth2Enum to be used.
 */
public enum OAuthScopeOauth2Enum {
    /**
     * Manage payments and checkout workflow.
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT,

    /**
     * Permission to initiate reference transaction
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT_REFERENCE_TRANSACTION,

    /**
     * Initiates payments and checkout workflows.
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_INITIATEPAYMENT,

    /**
     * Allows client-side integration on Create, Get, Patch, Authorize &amp; Capture Order endpoints.
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_ORDERS_CLIENT_SIDE_INTEGRATION,

    /**
     * Permission to do non-real time payments like capture on authorization
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT_AUTHCAPTURE,

    /**
     * Permission to initiate a refund on a capture transaction
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REFUND,

    /**
     * Permission to initiate non referenced credit
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_NON_REFERENCED_CREDIT,

    /**
     * Permission to do any real time payment, with support for sale/authorize/order intents
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REALTIMEPAYMENT,

    /**
     * Permission to do any reverse payment
     */
    HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REVERSEPAYMENT;


    private static TreeMap<String, OAuthScopeOauth2Enum> valueMap = new TreeMap<>();
    private String value;

    static {
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT.value = "https://uri.paypal.com/services/payments/payment";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT_REFERENCE_TRANSACTION.value = "https://uri.paypal.com/services/payments/payment/reference-transaction";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_INITIATEPAYMENT.value = "https://uri.paypal.com/services/payments/initiatepayment";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_ORDERS_CLIENT_SIDE_INTEGRATION.value = "https://uri.paypal.com/services/payments/orders/client-side-integration";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT_AUTHCAPTURE.value = "https://uri.paypal.com/services/payments/payment/authcapture";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REFUND.value = "https://uri.paypal.com/services/payments/refund";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_NON_REFERENCED_CREDIT.value = "https://uri.paypal.com/services/payments/non-referenced-credit";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REALTIMEPAYMENT.value = "https://uri.paypal.com/services/payments/realtimepayment";
        HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REVERSEPAYMENT.value = "https://uri.paypal.com/services/payments/reversepayment";

        valueMap.put("https://uri.paypal.com/services/payments/payment", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT);
        valueMap.put("https://uri.paypal.com/services/payments/payment/reference-transaction", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT_REFERENCE_TRANSACTION);
        valueMap.put("https://uri.paypal.com/services/payments/initiatepayment", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_INITIATEPAYMENT);
        valueMap.put("https://uri.paypal.com/services/payments/orders/client-side-integration", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_ORDERS_CLIENT_SIDE_INTEGRATION);
        valueMap.put("https://uri.paypal.com/services/payments/payment/authcapture", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_PAYMENT_AUTHCAPTURE);
        valueMap.put("https://uri.paypal.com/services/payments/refund", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REFUND);
        valueMap.put("https://uri.paypal.com/services/payments/non-referenced-credit", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_NON_REFERENCED_CREDIT);
        valueMap.put("https://uri.paypal.com/services/payments/realtimepayment", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REALTIMEPAYMENT);
        valueMap.put("https://uri.paypal.com/services/payments/reversepayment", HTTPS_URI_PAYPAL_COM_SERVICES_PAYMENTS_REVERSEPAYMENT);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static OAuthScopeOauth2Enum constructFromString(String toConvert) throws IOException {
        OAuthScopeOauth2Enum enumValue = fromString(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static OAuthScopeOauth2Enum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of OAuthScopeOauth2Enum values to list of string values.
     * @param toConvert The list of OAuthScopeOauth2Enum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<OAuthScopeOauth2Enum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (OAuthScopeOauth2Enum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 