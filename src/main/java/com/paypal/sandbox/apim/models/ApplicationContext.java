/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for ApplicationContext type.
 */
public class ApplicationContext {
    private String brandName;
    private String locale;
    private ApplicationContextLandingPageEnum landingPage;
    private ApplicationContextShippingPreferenceEnum shippingPreference;
    private ApplicationContextUserActionEnum userAction;
    private PaymentMethod paymentMethod;
    private String returnUrl;
    private String cancelUrl;
    private StoredPaymentSource storedPaymentSource;

    /**
     * Default constructor.
     */
    public ApplicationContext() {
        landingPage = ApplicationContextLandingPageEnum.NO_PREFERENCE;
        shippingPreference = ApplicationContextShippingPreferenceEnum.GET_FROM_FILE;
        userAction = ApplicationContextUserActionEnum.CONTINUE;
    }

    /**
     * Initialization constructor.
     * @param  brandName  String value for brandName.
     * @param  locale  String value for locale.
     * @param  landingPage  ApplicationContextLandingPageEnum value for landingPage.
     * @param  shippingPreference  ApplicationContextShippingPreferenceEnum value for
     *         shippingPreference.
     * @param  userAction  ApplicationContextUserActionEnum value for userAction.
     * @param  paymentMethod  PaymentMethod value for paymentMethod.
     * @param  returnUrl  String value for returnUrl.
     * @param  cancelUrl  String value for cancelUrl.
     * @param  storedPaymentSource  StoredPaymentSource value for storedPaymentSource.
     */
    public ApplicationContext(
            String brandName,
            String locale,
            ApplicationContextLandingPageEnum landingPage,
            ApplicationContextShippingPreferenceEnum shippingPreference,
            ApplicationContextUserActionEnum userAction,
            PaymentMethod paymentMethod,
            String returnUrl,
            String cancelUrl,
            StoredPaymentSource storedPaymentSource) {
        this.brandName = brandName;
        this.locale = locale;
        this.landingPage = landingPage;
        this.shippingPreference = shippingPreference;
        this.userAction = userAction;
        this.paymentMethod = paymentMethod;
        this.returnUrl = returnUrl;
        this.cancelUrl = cancelUrl;
        this.storedPaymentSource = storedPaymentSource;
    }

    /**
     * Getter for BrandName.
     * DEPRECATED. The label that overrides the business name in the PayPal account on the PayPal
     * site. The fields in `application_context` are now available in the `experience_context`
     * object under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.brand_name`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @return Returns the String
     */
    @JsonGetter("brand_name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBrandName() {
        return brandName;
    }

    /**
     * Setter for BrandName.
     * DEPRECATED. The label that overrides the business name in the PayPal account on the PayPal
     * site. The fields in `application_context` are now available in the `experience_context`
     * object under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.brand_name`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @param brandName Value for String
     */
    @JsonSetter("brand_name")
    public void setBrandName(String brandName) {
        this.brandName = brandName;
    }

    /**
     * Getter for Locale.
     * The BCP 47-formatted locale of pages that the PayPal payment experience shows. PayPal
     * supports a five-character code. For example, `da-DK`, `he-IL`, `id-ID`, `ja-JP`, `no-NO`,
     * `pt-BR`, `ru-RU`, `sv-SE`, `th-TH`, `zh-CN`, `zh-HK`, or `zh-TW`.
     * @return Returns the String
     */
    @JsonGetter("locale")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocale() {
        return locale;
    }

    /**
     * Setter for Locale.
     * The BCP 47-formatted locale of pages that the PayPal payment experience shows. PayPal
     * supports a five-character code. For example, `da-DK`, `he-IL`, `id-ID`, `ja-JP`, `no-NO`,
     * `pt-BR`, `ru-RU`, `sv-SE`, `th-TH`, `zh-CN`, `zh-HK`, or `zh-TW`.
     * @param locale Value for String
     */
    @JsonSetter("locale")
    public void setLocale(String locale) {
        this.locale = locale;
    }

    /**
     * Getter for LandingPage.
     * DEPRECATED. DEPRECATED. The type of landing page to show on the PayPal site for customer
     * checkout. The fields in `application_context` are now available in the `experience_context`
     * object under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.landing_page`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @return Returns the ApplicationContextLandingPageEnum
     */
    @JsonGetter("landing_page")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ApplicationContextLandingPageEnum getLandingPage() {
        return landingPage;
    }

    /**
     * Setter for LandingPage.
     * DEPRECATED. DEPRECATED. The type of landing page to show on the PayPal site for customer
     * checkout. The fields in `application_context` are now available in the `experience_context`
     * object under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.landing_page`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @param landingPage Value for ApplicationContextLandingPageEnum
     */
    @JsonSetter("landing_page")
    public void setLandingPage(ApplicationContextLandingPageEnum landingPage) {
        this.landingPage = landingPage;
    }

    /**
     * Getter for ShippingPreference.
     * DEPRECATED. DEPRECATED. The shipping preference: Displays the shipping address to the
     * customer. Enables the customer to choose an address on the PayPal site. Restricts the
     * customer from changing the address during the payment-approval process. The fields in
     * `application_context` are now available in the `experience_context` object under the
     * `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.shipping_preference`). Please specify this field in
     * the `experience_context` object instead of the `application_context` object.
     * @return Returns the ApplicationContextShippingPreferenceEnum
     */
    @JsonGetter("shipping_preference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ApplicationContextShippingPreferenceEnum getShippingPreference() {
        return shippingPreference;
    }

    /**
     * Setter for ShippingPreference.
     * DEPRECATED. DEPRECATED. The shipping preference: Displays the shipping address to the
     * customer. Enables the customer to choose an address on the PayPal site. Restricts the
     * customer from changing the address during the payment-approval process. The fields in
     * `application_context` are now available in the `experience_context` object under the
     * `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.shipping_preference`). Please specify this field in
     * the `experience_context` object instead of the `application_context` object.
     * @param shippingPreference Value for ApplicationContextShippingPreferenceEnum
     */
    @JsonSetter("shipping_preference")
    public void setShippingPreference(ApplicationContextShippingPreferenceEnum shippingPreference) {
        this.shippingPreference = shippingPreference;
    }

    /**
     * Getter for UserAction.
     * DEPRECATED. Configures a &lt;strong&gt;Continue&lt;/strong&gt; or &lt;strong&gt;Pay Now&lt;/strong&gt; checkout flow.
     * The fields in `application_context` are now available in the `experience_context` object
     * under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.user_action`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @return Returns the ApplicationContextUserActionEnum
     */
    @JsonGetter("user_action")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ApplicationContextUserActionEnum getUserAction() {
        return userAction;
    }

    /**
     * Setter for UserAction.
     * DEPRECATED. Configures a &lt;strong&gt;Continue&lt;/strong&gt; or &lt;strong&gt;Pay Now&lt;/strong&gt; checkout flow.
     * The fields in `application_context` are now available in the `experience_context` object
     * under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.user_action`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @param userAction Value for ApplicationContextUserActionEnum
     */
    @JsonSetter("user_action")
    public void setUserAction(ApplicationContextUserActionEnum userAction) {
        this.userAction = userAction;
    }

    /**
     * Getter for PaymentMethod.
     * DEPRECATED. The customer and merchant payment preferences. The fields in
     * `application_context` are now available in the `experience_context` object under the
     * `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.payment_method_selected`). Please specify this
     * field in the `experience_context` object instead of the `application_context` object..
     * @return Returns the PaymentMethod
     */
    @JsonGetter("payment_method")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * Setter for PaymentMethod.
     * DEPRECATED. The customer and merchant payment preferences. The fields in
     * `application_context` are now available in the `experience_context` object under the
     * `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.payment_method_selected`). Please specify this
     * field in the `experience_context` object instead of the `application_context` object..
     * @param paymentMethod Value for PaymentMethod
     */
    @JsonSetter("payment_method")
    public void setPaymentMethod(PaymentMethod paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    /**
     * Getter for ReturnUrl.
     * DEPRECATED. The URL where the customer is redirected after the customer approves the payment.
     * The fields in `application_context` are now available in the `experience_context` object
     * under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.return_url`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @return Returns the String
     */
    @JsonGetter("return_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getReturnUrl() {
        return returnUrl;
    }

    /**
     * Setter for ReturnUrl.
     * DEPRECATED. The URL where the customer is redirected after the customer approves the payment.
     * The fields in `application_context` are now available in the `experience_context` object
     * under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.return_url`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @param returnUrl Value for String
     */
    @JsonSetter("return_url")
    public void setReturnUrl(String returnUrl) {
        this.returnUrl = returnUrl;
    }

    /**
     * Getter for CancelUrl.
     * DEPRECATED. The URL where the customer is redirected after the customer cancels the payment.
     * The fields in `application_context` are now available in the `experience_context` object
     * under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.cancel_url`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @return Returns the String
     */
    @JsonGetter("cancel_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCancelUrl() {
        return cancelUrl;
    }

    /**
     * Setter for CancelUrl.
     * DEPRECATED. The URL where the customer is redirected after the customer cancels the payment.
     * The fields in `application_context` are now available in the `experience_context` object
     * under the `payment_source` which supports them (eg.
     * `payment_source.paypal.experience_context.cancel_url`). Please specify this field in the
     * `experience_context` object instead of the `application_context` object.
     * @param cancelUrl Value for String
     */
    @JsonSetter("cancel_url")
    public void setCancelUrl(String cancelUrl) {
        this.cancelUrl = cancelUrl;
    }

    /**
     * Getter for StoredPaymentSource.
     * DEPRECATED. Provides additional details to process a payment using a `payment_source` that
     * has been stored or is intended to be stored (also referred to as stored_credential or
     * card-on-file).&lt;br/&gt;Parameter compatibility:&lt;br/&gt;`payment_type=ONE_TIME` is compatible only
     * with `payment_initiator=CUSTOMER`. `usage=FIRST` is compatible only with
     * `payment_initiator=CUSTOMER`. `previous_transaction_reference` or
     * `previous_network_transaction_reference` is compatible only with
     * `payment_initiator=MERCHANT`. Only one of the parameters - `previous_transaction_reference`
     * and `previous_network_transaction_reference` - can be present in the request. The fields in
     * `stored_payment_source` are now available in the `stored_credential` object under the
     * `payment_source` which supports them (eg.
     * `payment_source.card.stored_credential.payment_initiator`). Please specify this field in the
     * `payment_source` object instead of the `application_context` object.
     * @return Returns the StoredPaymentSource
     */
    @JsonGetter("stored_payment_source")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StoredPaymentSource getStoredPaymentSource() {
        return storedPaymentSource;
    }

    /**
     * Setter for StoredPaymentSource.
     * DEPRECATED. Provides additional details to process a payment using a `payment_source` that
     * has been stored or is intended to be stored (also referred to as stored_credential or
     * card-on-file).&lt;br/&gt;Parameter compatibility:&lt;br/&gt;`payment_type=ONE_TIME` is compatible only
     * with `payment_initiator=CUSTOMER`. `usage=FIRST` is compatible only with
     * `payment_initiator=CUSTOMER`. `previous_transaction_reference` or
     * `previous_network_transaction_reference` is compatible only with
     * `payment_initiator=MERCHANT`. Only one of the parameters - `previous_transaction_reference`
     * and `previous_network_transaction_reference` - can be present in the request. The fields in
     * `stored_payment_source` are now available in the `stored_credential` object under the
     * `payment_source` which supports them (eg.
     * `payment_source.card.stored_credential.payment_initiator`). Please specify this field in the
     * `payment_source` object instead of the `application_context` object.
     * @param storedPaymentSource Value for StoredPaymentSource
     */
    @JsonSetter("stored_payment_source")
    public void setStoredPaymentSource(StoredPaymentSource storedPaymentSource) {
        this.storedPaymentSource = storedPaymentSource;
    }

    /**
     * Converts this ApplicationContext into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ApplicationContext [" + "brandName=" + brandName + ", locale=" + locale
                + ", landingPage=" + landingPage + ", shippingPreference=" + shippingPreference
                + ", userAction=" + userAction + ", paymentMethod=" + paymentMethod + ", returnUrl="
                + returnUrl + ", cancelUrl=" + cancelUrl + ", storedPaymentSource="
                + storedPaymentSource + "]";
    }

    /**
     * Builds a new {@link ApplicationContext.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ApplicationContext.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .brandName(getBrandName())
                .locale(getLocale())
                .landingPage(getLandingPage())
                .shippingPreference(getShippingPreference())
                .userAction(getUserAction())
                .paymentMethod(getPaymentMethod())
                .returnUrl(getReturnUrl())
                .cancelUrl(getCancelUrl())
                .storedPaymentSource(getStoredPaymentSource());
        return builder;
    }

    /**
     * Class to build instances of {@link ApplicationContext}.
     */
    public static class Builder {
        private String brandName;
        private String locale;
        private ApplicationContextLandingPageEnum landingPage =
                ApplicationContextLandingPageEnum.NO_PREFERENCE;
        private ApplicationContextShippingPreferenceEnum shippingPreference =
                ApplicationContextShippingPreferenceEnum.GET_FROM_FILE;
        private ApplicationContextUserActionEnum userAction =
                ApplicationContextUserActionEnum.CONTINUE;
        private PaymentMethod paymentMethod;
        private String returnUrl;
        private String cancelUrl;
        private StoredPaymentSource storedPaymentSource;



        /**
         * Setter for brandName.
         * @param  brandName  String value for brandName.
         * @return Builder
         */
        public Builder brandName(String brandName) {
            this.brandName = brandName;
            return this;
        }

        /**
         * Setter for locale.
         * @param  locale  String value for locale.
         * @return Builder
         */
        public Builder locale(String locale) {
            this.locale = locale;
            return this;
        }

        /**
         * Setter for landingPage.
         * @param  landingPage  ApplicationContextLandingPageEnum value for landingPage.
         * @return Builder
         */
        public Builder landingPage(ApplicationContextLandingPageEnum landingPage) {
            this.landingPage = landingPage;
            return this;
        }

        /**
         * Setter for shippingPreference.
         * @param  shippingPreference  ApplicationContextShippingPreferenceEnum value for
         *         shippingPreference.
         * @return Builder
         */
        public Builder shippingPreference(
                ApplicationContextShippingPreferenceEnum shippingPreference) {
            this.shippingPreference = shippingPreference;
            return this;
        }

        /**
         * Setter for userAction.
         * @param  userAction  ApplicationContextUserActionEnum value for userAction.
         * @return Builder
         */
        public Builder userAction(ApplicationContextUserActionEnum userAction) {
            this.userAction = userAction;
            return this;
        }

        /**
         * Setter for paymentMethod.
         * @param  paymentMethod  PaymentMethod value for paymentMethod.
         * @return Builder
         */
        public Builder paymentMethod(PaymentMethod paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * Setter for returnUrl.
         * @param  returnUrl  String value for returnUrl.
         * @return Builder
         */
        public Builder returnUrl(String returnUrl) {
            this.returnUrl = returnUrl;
            return this;
        }

        /**
         * Setter for cancelUrl.
         * @param  cancelUrl  String value for cancelUrl.
         * @return Builder
         */
        public Builder cancelUrl(String cancelUrl) {
            this.cancelUrl = cancelUrl;
            return this;
        }

        /**
         * Setter for storedPaymentSource.
         * @param  storedPaymentSource  StoredPaymentSource value for storedPaymentSource.
         * @return Builder
         */
        public Builder storedPaymentSource(StoredPaymentSource storedPaymentSource) {
            this.storedPaymentSource = storedPaymentSource;
            return this;
        }

        /**
         * Builds a new {@link ApplicationContext} object using the set fields.
         * @return {@link ApplicationContext}
         */
        public ApplicationContext build() {
            return new ApplicationContext(brandName, locale, landingPage, shippingPreference,
                    userAction, paymentMethod, returnUrl, cancelUrl, storedPaymentSource);
        }
    }
}
