/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.models.NOTELIGIBLEFORTOKENPROCESSING;
import com.paypal.sandbox.apim.models.PERMISSIONDENIEDERROR;
import com.paypal.sandbox.apim.models.PERMISSIONDENIEDFORDONATIONITEMS;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = OrdersAuthorize403IssuesItems.OrdersAuthorize403IssuesItemsDeserializer.class)
public abstract class OrdersAuthorize403IssuesItems {
    
    /**
     * This is NOT_ELIGIBLE_FOR_TOKEN_PROCESSING case.
     * @param nOTELIGIBLEFORTOKENPROCESSING NOTELIGIBLEFORTOKENPROCESSING value for nOTELIGIBLEFORTOKENPROCESSING.
     * @return The NOTELIGIBLEFORTOKENPROCESSINGCase object.
     */
    public static OrdersAuthorize403IssuesItems fromNOTELIGIBLEFORTOKENPROCESSING(
            NOTELIGIBLEFORTOKENPROCESSING nOTELIGIBLEFORTOKENPROCESSING) {
        return nOTELIGIBLEFORTOKENPROCESSING == null ? null : new NOTELIGIBLEFORTOKENPROCESSINGCase(nOTELIGIBLEFORTOKENPROCESSING);
    }

    /**
     * This is PERMISSION_DENIED_ERROR case.
     * @param pERMISSIONDENIEDERROR PERMISSIONDENIEDERROR value for pERMISSIONDENIEDERROR.
     * @return The PERMISSIONDENIEDERRORCase object.
     */
    public static OrdersAuthorize403IssuesItems fromPERMISSIONDENIEDERROR(
            PERMISSIONDENIEDERROR pERMISSIONDENIEDERROR) {
        return pERMISSIONDENIEDERROR == null ? null : new PERMISSIONDENIEDERRORCase(pERMISSIONDENIEDERROR);
    }

    /**
     * This is PERMISSION_DENIED_FOR_DONATION_ITEMS case.
     * @param pERMISSIONDENIEDFORDONATIONITEMS PERMISSIONDENIEDFORDONATIONITEMS value for pERMISSIONDENIEDFORDONATIONITEMS.
     * @return The PERMISSIONDENIEDFORDONATIONITEMSCase object.
     */
    public static OrdersAuthorize403IssuesItems fromPERMISSIONDENIEDFORDONATIONITEMS(
            PERMISSIONDENIEDFORDONATIONITEMS pERMISSIONDENIEDFORDONATIONITEMS) {
        return pERMISSIONDENIEDFORDONATIONITEMS == null ? null : new PERMISSIONDENIEDFORDONATIONITEMSCase(pERMISSIONDENIEDFORDONATIONITEMS);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R nOTELIGIBLEFORTOKENPROCESSING(NOTELIGIBLEFORTOKENPROCESSING nOTELIGIBLEFORTOKENPROCESSING);

        R pERMISSIONDENIEDERROR(PERMISSIONDENIEDERROR pERMISSIONDENIEDERROR);

        R pERMISSIONDENIEDFORDONATIONITEMS(PERMISSIONDENIEDFORDONATIONITEMS pERMISSIONDENIEDFORDONATIONITEMS);
    }

    /**
     * This is a implementation class for NOTELIGIBLEFORTOKENPROCESSINGCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTELIGIBLEFORTOKENPROCESSING")
    private static class NOTELIGIBLEFORTOKENPROCESSINGCase extends OrdersAuthorize403IssuesItems {

        @JsonValue
        private NOTELIGIBLEFORTOKENPROCESSING nOTELIGIBLEFORTOKENPROCESSING;

        NOTELIGIBLEFORTOKENPROCESSINGCase(NOTELIGIBLEFORTOKENPROCESSING nOTELIGIBLEFORTOKENPROCESSING) {
            this.nOTELIGIBLEFORTOKENPROCESSING = nOTELIGIBLEFORTOKENPROCESSING;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTELIGIBLEFORTOKENPROCESSING(this.nOTELIGIBLEFORTOKENPROCESSING);
        }

        @JsonCreator
        private NOTELIGIBLEFORTOKENPROCESSINGCase(JsonNode jsonNode) throws IOException {
            this.nOTELIGIBLEFORTOKENPROCESSING = ApiHelper.deserialize(jsonNode,
                NOTELIGIBLEFORTOKENPROCESSING.class);
        }

        @Override
        public String toString() {
            return nOTELIGIBLEFORTOKENPROCESSING.toString();
        }
    }

    /**
     * This is a implementation class for PERMISSIONDENIEDERRORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PERMISSIONDENIEDERROR")
    private static class PERMISSIONDENIEDERRORCase extends OrdersAuthorize403IssuesItems {

        @JsonValue
        private PERMISSIONDENIEDERROR pERMISSIONDENIEDERROR;

        PERMISSIONDENIEDERRORCase(PERMISSIONDENIEDERROR pERMISSIONDENIEDERROR) {
            this.pERMISSIONDENIEDERROR = pERMISSIONDENIEDERROR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pERMISSIONDENIEDERROR(this.pERMISSIONDENIEDERROR);
        }

        @JsonCreator
        private PERMISSIONDENIEDERRORCase(JsonNode jsonNode) throws IOException {
            this.pERMISSIONDENIEDERROR = ApiHelper.deserialize(jsonNode,
                PERMISSIONDENIEDERROR.class);
        }

        @Override
        public String toString() {
            return pERMISSIONDENIEDERROR.toString();
        }
    }

    /**
     * This is a implementation class for PERMISSIONDENIEDFORDONATIONITEMSCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PERMISSIONDENIEDFORDONATIONITEMS")
    private static class PERMISSIONDENIEDFORDONATIONITEMSCase extends OrdersAuthorize403IssuesItems {

        @JsonValue
        private PERMISSIONDENIEDFORDONATIONITEMS pERMISSIONDENIEDFORDONATIONITEMS;

        PERMISSIONDENIEDFORDONATIONITEMSCase(PERMISSIONDENIEDFORDONATIONITEMS pERMISSIONDENIEDFORDONATIONITEMS) {
            this.pERMISSIONDENIEDFORDONATIONITEMS = pERMISSIONDENIEDFORDONATIONITEMS;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pERMISSIONDENIEDFORDONATIONITEMS(this.pERMISSIONDENIEDFORDONATIONITEMS);
        }

        @JsonCreator
        private PERMISSIONDENIEDFORDONATIONITEMSCase(JsonNode jsonNode) throws IOException {
            this.pERMISSIONDENIEDFORDONATIONITEMS = ApiHelper.deserialize(jsonNode,
                PERMISSIONDENIEDFORDONATIONITEMS.class);
        }

        @Override
        public String toString() {
            return pERMISSIONDENIEDFORDONATIONITEMS.toString();
        }
    }

    /**
     * This is a custom deserializer class for OrdersAuthorize403IssuesItems.
     */
    protected static class OrdersAuthorize403IssuesItemsDeserializer
            extends JsonDeserializer<OrdersAuthorize403IssuesItems> {

        @Override
        public OrdersAuthorize403IssuesItems deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(
                    NOTELIGIBLEFORTOKENPROCESSINGCase.class, PERMISSIONDENIEDERRORCase.class,
                    PERMISSIONDENIEDFORDONATIONITEMSCase.class), false);
        }
    }

}
