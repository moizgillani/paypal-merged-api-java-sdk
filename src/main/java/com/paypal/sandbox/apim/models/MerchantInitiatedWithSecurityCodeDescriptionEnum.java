/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * MerchantInitiatedWithSecurityCodeDescriptionEnum to be used.
 */
public enum MerchantInitiatedWithSecurityCodeDescriptionEnum {
    ENUM_STORED_PAYMENT_SOURCEPAYMENT_INITIATOR_MERCHANT_IS_NOT_SUPPORTED_IF_PAYMENT_SOURCECARDSECURITY_CODE_IS_PRESENT_IN_THE_ORDER_SECURITY_CODE_CAN_BE_PRESENT_IN_THE_ORDER_ONLY_WHEN_CUSTOMER_IS_THE_PAYMENT_INITIATOR_IT_IS_SEMANTICALLY_INCORRECT_TO_PERFORM_A_MERCHANT_INITIATED_PAYMENT_WITH_SECURITY_CODE_IS_THE_ORDER;


    private static TreeMap<String, MerchantInitiatedWithSecurityCodeDescriptionEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_STORED_PAYMENT_SOURCEPAYMENT_INITIATOR_MERCHANT_IS_NOT_SUPPORTED_IF_PAYMENT_SOURCECARDSECURITY_CODE_IS_PRESENT_IN_THE_ORDER_SECURITY_CODE_CAN_BE_PRESENT_IN_THE_ORDER_ONLY_WHEN_CUSTOMER_IS_THE_PAYMENT_INITIATOR_IT_IS_SEMANTICALLY_INCORRECT_TO_PERFORM_A_MERCHANT_INITIATED_PAYMENT_WITH_SECURITY_CODE_IS_THE_ORDER.value = "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if `payment_source.card.security_code` is present in the order. `security_code` can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with `security_code` is the order.";

        valueMap.put("`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if `payment_source.card.security_code` is present in the order. `security_code` can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with `security_code` is the order.", ENUM_STORED_PAYMENT_SOURCEPAYMENT_INITIATOR_MERCHANT_IS_NOT_SUPPORTED_IF_PAYMENT_SOURCECARDSECURITY_CODE_IS_PRESENT_IN_THE_ORDER_SECURITY_CODE_CAN_BE_PRESENT_IN_THE_ORDER_ONLY_WHEN_CUSTOMER_IS_THE_PAYMENT_INITIATOR_IT_IS_SEMANTICALLY_INCORRECT_TO_PERFORM_A_MERCHANT_INITIATED_PAYMENT_WITH_SECURITY_CODE_IS_THE_ORDER);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static MerchantInitiatedWithSecurityCodeDescriptionEnum constructFromString(String toConvert) throws IOException {
        MerchantInitiatedWithSecurityCodeDescriptionEnum enumValue = fromString(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static MerchantInitiatedWithSecurityCodeDescriptionEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of MerchantInitiatedWithSecurityCodeDescriptionEnum values to list of string values.
     * @param toConvert The list of MerchantInitiatedWithSecurityCodeDescriptionEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<MerchantInitiatedWithSecurityCodeDescriptionEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (MerchantInitiatedWithSecurityCodeDescriptionEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 