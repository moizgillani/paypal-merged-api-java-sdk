/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * AuthorizationAmountExceededDescriptionEnum to be used.
 */
public enum AuthorizationAmountExceededDescriptionEnum {
    ENUM_AUTHORIZATION_AMOUNT_SPECIFIED_EXCEEDED_ALLOWABLE_LIMIT_SPECIFY_A_DIFFERENT_AMOUNT_AND_TRY_THE_REQUEST_AGAIN_ALTERNATELY_CONTACT_CUSTOMER_SUPPORT_TO_INCREASE_YOUR_LIMITS_LOCAL_REGULATIONS_EG_IN_PSD2_COUNTRIES_PROHIBIT_OVERAGES_ABOVE_THE_AMOUNT_AUTHORIZED_BY_THE_PAYER;


    private static TreeMap<String, AuthorizationAmountExceededDescriptionEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        ENUM_AUTHORIZATION_AMOUNT_SPECIFIED_EXCEEDED_ALLOWABLE_LIMIT_SPECIFY_A_DIFFERENT_AMOUNT_AND_TRY_THE_REQUEST_AGAIN_ALTERNATELY_CONTACT_CUSTOMER_SUPPORT_TO_INCREASE_YOUR_LIMITS_LOCAL_REGULATIONS_EG_IN_PSD2_COUNTRIES_PROHIBIT_OVERAGES_ABOVE_THE_AMOUNT_AUTHORIZED_BY_THE_PAYER.value = "Authorization amount specified exceeded allowable limit. Specify a different amount and try the request again. Alternately, contact Customer Support to increase your limits. Local regulations (e.g. in PSD2 countries) prohibit overages above the amount authorized by the payer.";

        valueMap.put("Authorization amount specified exceeded allowable limit. Specify a different amount and try the request again. Alternately, contact Customer Support to increase your limits. Local regulations (e.g. in PSD2 countries) prohibit overages above the amount authorized by the payer.", ENUM_AUTHORIZATION_AMOUNT_SPECIFIED_EXCEEDED_ALLOWABLE_LIMIT_SPECIFY_A_DIFFERENT_AMOUNT_AND_TRY_THE_REQUEST_AGAIN_ALTERNATELY_CONTACT_CUSTOMER_SUPPORT_TO_INCREASE_YOUR_LIMITS_LOCAL_REGULATIONS_EG_IN_PSD2_COUNTRIES_PROHIBIT_OVERAGES_ABOVE_THE_AMOUNT_AUTHORIZED_BY_THE_PAYER);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static AuthorizationAmountExceededDescriptionEnum constructFromString(String toConvert) throws IOException {
        AuthorizationAmountExceededDescriptionEnum enumValue = fromString(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    public static AuthorizationAmountExceededDescriptionEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of AuthorizationAmountExceededDescriptionEnum values to list of string values.
     * @param toConvert The list of AuthorizationAmountExceededDescriptionEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<AuthorizationAmountExceededDescriptionEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (AuthorizationAmountExceededDescriptionEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 