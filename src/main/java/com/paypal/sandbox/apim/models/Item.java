/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for Item type.
 */
public class Item {
    private String name;
    private Money unitAmount;
    private Money tax;
    private String quantity;
    private String description;
    private String sku;
    private ItemCategoryEnum category;

    /**
     * Default constructor.
     */
    public Item() {
    }

    /**
     * Initialization constructor.
     * @param  name  String value for name.
     * @param  unitAmount  Money value for unitAmount.
     * @param  quantity  String value for quantity.
     * @param  tax  Money value for tax.
     * @param  description  String value for description.
     * @param  sku  String value for sku.
     * @param  category  ItemCategoryEnum value for category.
     */
    public Item(
            String name,
            Money unitAmount,
            String quantity,
            Money tax,
            String description,
            String sku,
            ItemCategoryEnum category) {
        this.name = name;
        this.unitAmount = unitAmount;
        this.tax = tax;
        this.quantity = quantity;
        this.description = description;
        this.sku = sku;
        this.category = category;
    }

    /**
     * Getter for Name.
     * The item name or title.
     * @return Returns the String
     */
    @JsonGetter("name")
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * The item name or title.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for UnitAmount.
     * The item price or rate per unit. If you specify &lt;code&gt;unit_amount&lt;/code&gt;,
     * &lt;code&gt;purchase_units[].amount.breakdown.item_total&lt;/code&gt; is required. Must equal
     * &lt;code&gt;unit_amount * quantity&lt;/code&gt; for all items. &lt;code&gt;unit_amount.value&lt;/code&gt; can not be
     * a negative number.
     * @return Returns the Money
     */
    @JsonGetter("unit_amount")
    public Money getUnitAmount() {
        return unitAmount;
    }

    /**
     * Setter for UnitAmount.
     * The item price or rate per unit. If you specify &lt;code&gt;unit_amount&lt;/code&gt;,
     * &lt;code&gt;purchase_units[].amount.breakdown.item_total&lt;/code&gt; is required. Must equal
     * &lt;code&gt;unit_amount * quantity&lt;/code&gt; for all items. &lt;code&gt;unit_amount.value&lt;/code&gt; can not be
     * a negative number.
     * @param unitAmount Value for Money
     */
    @JsonSetter("unit_amount")
    public void setUnitAmount(Money unitAmount) {
        this.unitAmount = unitAmount;
    }

    /**
     * Getter for Tax.
     * The item tax for each unit. If &lt;code&gt;tax&lt;/code&gt; is specified,
     * &lt;code&gt;purchase_units[].amount.breakdown.tax_total&lt;/code&gt; is required. Must equal &lt;code&gt;tax *
     * quantity&lt;/code&gt; for all items. &lt;code&gt;tax.value&lt;/code&gt; can not be a negative number.
     * @return Returns the Money
     */
    @JsonGetter("tax")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Money getTax() {
        return tax;
    }

    /**
     * Setter for Tax.
     * The item tax for each unit. If &lt;code&gt;tax&lt;/code&gt; is specified,
     * &lt;code&gt;purchase_units[].amount.breakdown.tax_total&lt;/code&gt; is required. Must equal &lt;code&gt;tax *
     * quantity&lt;/code&gt; for all items. &lt;code&gt;tax.value&lt;/code&gt; can not be a negative number.
     * @param tax Value for Money
     */
    @JsonSetter("tax")
    public void setTax(Money tax) {
        this.tax = tax;
    }

    /**
     * Getter for Quantity.
     * The item quantity. Must be a whole number.
     * @return Returns the String
     */
    @JsonGetter("quantity")
    public String getQuantity() {
        return quantity;
    }

    /**
     * Setter for Quantity.
     * The item quantity. Must be a whole number.
     * @param quantity Value for String
     */
    @JsonSetter("quantity")
    public void setQuantity(String quantity) {
        this.quantity = quantity;
    }

    /**
     * Getter for Description.
     * The detailed item description.
     * @return Returns the String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * The detailed item description.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Sku.
     * The stock keeping unit (SKU) for the item.
     * @return Returns the String
     */
    @JsonGetter("sku")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSku() {
        return sku;
    }

    /**
     * Setter for Sku.
     * The stock keeping unit (SKU) for the item.
     * @param sku Value for String
     */
    @JsonSetter("sku")
    public void setSku(String sku) {
        this.sku = sku;
    }

    /**
     * Getter for Category.
     * The item category type.
     * @return Returns the ItemCategoryEnum
     */
    @JsonGetter("category")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ItemCategoryEnum getCategory() {
        return category;
    }

    /**
     * Setter for Category.
     * The item category type.
     * @param category Value for ItemCategoryEnum
     */
    @JsonSetter("category")
    public void setCategory(ItemCategoryEnum category) {
        this.category = category;
    }

    /**
     * Converts this Item into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Item [" + "name=" + name + ", unitAmount=" + unitAmount + ", quantity=" + quantity
                + ", tax=" + tax + ", description=" + description + ", sku=" + sku + ", category="
                + category + "]";
    }

    /**
     * Builds a new {@link Item.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Item.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(name, unitAmount, quantity)
                .tax(getTax())
                .description(getDescription())
                .sku(getSku())
                .category(getCategory());
        return builder;
    }

    /**
     * Class to build instances of {@link Item}.
     */
    public static class Builder {
        private String name;
        private Money unitAmount;
        private String quantity;
        private Money tax;
        private String description;
        private String sku;
        private ItemCategoryEnum category;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  name  String value for name.
         * @param  unitAmount  Money value for unitAmount.
         * @param  quantity  String value for quantity.
         */
        public Builder(String name, Money unitAmount, String quantity) {
            this.name = name;
            this.unitAmount = unitAmount;
            this.quantity = quantity;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for unitAmount.
         * @param  unitAmount  Money value for unitAmount.
         * @return Builder
         */
        public Builder unitAmount(Money unitAmount) {
            this.unitAmount = unitAmount;
            return this;
        }

        /**
         * Setter for quantity.
         * @param  quantity  String value for quantity.
         * @return Builder
         */
        public Builder quantity(String quantity) {
            this.quantity = quantity;
            return this;
        }

        /**
         * Setter for tax.
         * @param  tax  Money value for tax.
         * @return Builder
         */
        public Builder tax(Money tax) {
            this.tax = tax;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for sku.
         * @param  sku  String value for sku.
         * @return Builder
         */
        public Builder sku(String sku) {
            this.sku = sku;
            return this;
        }

        /**
         * Setter for category.
         * @param  category  ItemCategoryEnum value for category.
         * @return Builder
         */
        public Builder category(ItemCategoryEnum category) {
            this.category = category;
            return this;
        }

        /**
         * Builds a new {@link Item} object using the set fields.
         * @return {@link Item}
         */
        public Item build() {
            return new Item(name, unitAmount, quantity, tax, description, sku, category);
        }
    }
}
