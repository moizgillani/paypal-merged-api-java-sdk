/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.models.AGREEMENTALREADYCANCELLED;
import com.paypal.sandbox.apim.models.ALIASDECLINEDBYPROCESSOR;
import com.paypal.sandbox.apim.models.AMOUNTMISMATCH;
import com.paypal.sandbox.apim.models.APPLEPAYAMOUNTMISMATCH;
import com.paypal.sandbox.apim.models.AUTHCAPTURENOTENABLED;
import com.paypal.sandbox.apim.models.BILLINGADDRESSINVALID;
import com.paypal.sandbox.apim.models.BILLINGAGREEMENTNOTFOUND;
import com.paypal.sandbox.apim.models.BLIKONECLICKMISSINGREQUIREDPARAMETER;
import com.paypal.sandbox.apim.models.CANNOTBENEGATIVE;
import com.paypal.sandbox.apim.models.CANNOTBEZEROORNEGATIVE;
import com.paypal.sandbox.apim.models.CARDEXPIRED;
import com.paypal.sandbox.apim.models.CITYREQUIRED;
import com.paypal.sandbox.apim.models.COMPLIANCEVIOLATION;
import com.paypal.sandbox.apim.models.CRYPTOGRAMREQUIRED;
import com.paypal.sandbox.apim.models.DECIMALPRECISION;
import com.paypal.sandbox.apim.models.DOMESTICTRANSACTIONREQUIRED;
import com.paypal.sandbox.apim.models.DONATIONITEMSNOTSUPPORTED;
import com.paypal.sandbox.apim.models.DUPLICATEINVOICEID;
import com.paypal.sandbox.apim.models.DUPLICATEREFERENCEID;
import com.paypal.sandbox.apim.models.EMVDATAREQUIRED;
import com.paypal.sandbox.apim.models.GOOGLEPAYGATEWAYMERCHANTIDMISMATCH;
import com.paypal.sandbox.apim.models.INCOMPATIBLEPARAMETERVALUE;
import com.paypal.sandbox.apim.models.INSTRUMENTDECLINED;
import com.paypal.sandbox.apim.models.INVALIDCURRENCYCODE;
import com.paypal.sandbox.apim.models.INVALIDEXPIRYDATE;
import com.paypal.sandbox.apim.models.INVALIDFXRATEID;
import com.paypal.sandbox.apim.models.INVALIDGOOGLEPAYTOKEN;
import com.paypal.sandbox.apim.models.INVALIDPAYEEPRICINGTIERID;
import com.paypal.sandbox.apim.models.INVALIDPAYERID;
import com.paypal.sandbox.apim.models.INVALIDPLATFORMFEESACCOUNT;
import com.paypal.sandbox.apim.models.INVALIDPLATFORMFEESAMOUNT;
import com.paypal.sandbox.apim.models.INVALIDPREVIOUSTRANSACTIONREFERENCE;
import com.paypal.sandbox.apim.models.INVALIDSECURITYCODELENGTH;
import com.paypal.sandbox.apim.models.ITEMTOTALMISMATCH;
import com.paypal.sandbox.apim.models.ITEMTOTALREQUIRED;
import com.paypal.sandbox.apim.models.MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED;
import com.paypal.sandbox.apim.models.MAXVALUEEXCEEDED;
import com.paypal.sandbox.apim.models.MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS;
import com.paypal.sandbox.apim.models.MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS;
import com.paypal.sandbox.apim.models.MERCHANTINITIATEDWITHSECURITYCODE;
import com.paypal.sandbox.apim.models.MISMATCHEDVAULTIDTOPAYMENTSOURCE;
import com.paypal.sandbox.apim.models.MISSINGCRYPTOGRAM;
import com.paypal.sandbox.apim.models.MISSINGPICKUPADDRESS;
import com.paypal.sandbox.apim.models.MISSINGPREVIOUSREFERENCE;
import com.paypal.sandbox.apim.models.MULTICURRENCYORDER;
import com.paypal.sandbox.apim.models.MULTIPLEITEMCATEGORIES;
import com.paypal.sandbox.apim.models.MULTIPLESHIPPINGADDRESSNOTSUPPORTED;
import com.paypal.sandbox.apim.models.MULTIPLESHIPPINGOPTIONSELECTED;
import com.paypal.sandbox.apim.models.MULTIPLESHIPPINGTYPENOTSUPPORTED;
import com.paypal.sandbox.apim.models.NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING;
import com.paypal.sandbox.apim.models.NOTELIGIBLEFORPNREFPROCESSING;
import com.paypal.sandbox.apim.models.NOTENABLEDFORAPPLEPAY;
import com.paypal.sandbox.apim.models.NOTENABLEDFORCARDPROCESSING;
import com.paypal.sandbox.apim.models.NOTENABLEDFORGOOGLEPAY;
import com.paypal.sandbox.apim.models.NOTENABLEDTOVAULTPAYMENTSOURCE;
import com.paypal.sandbox.apim.models.ONEOFPARAMETERSREQUIRED;
import com.paypal.sandbox.apim.models.ORDERCOMPLETEONPAYMENTAPPROVAL;
import com.paypal.sandbox.apim.models.PAYEEACCOUNTINVALID;
import com.paypal.sandbox.apim.models.PAYEEACCOUNTLOCKEDORCLOSED;
import com.paypal.sandbox.apim.models.PAYEEACCOUNTRESTRICTED;
import com.paypal.sandbox.apim.models.PAYEEBLOCKEDTRANSACTION;
import com.paypal.sandbox.apim.models.PAYEEFXRATEIDCURRENCYMISMATCH;
import com.paypal.sandbox.apim.models.PAYEEFXRATEIDEXPIRED;
import com.paypal.sandbox.apim.models.PAYEEPRICINGTIERIDNOTENABLED;
import com.paypal.sandbox.apim.models.PAYERACCOUNTLOCKEDORCLOSED;
import com.paypal.sandbox.apim.models.PAYERACCOUNTRESTRICTED;
import com.paypal.sandbox.apim.models.PAYERCANNOTPAY;
import com.paypal.sandbox.apim.models.PAYMENTSOURCECANNOTBEUSED;
import com.paypal.sandbox.apim.models.PAYMENTSOURCEDECLINEDBYPROCESSOR;
import com.paypal.sandbox.apim.models.PAYMENTSOURCEINFOCANNOTBEVERIFIED;
import com.paypal.sandbox.apim.models.PAYMENTSOURCEMISMATCH;
import com.paypal.sandbox.apim.models.PAYPALTRANSACTIONIDNOTFOUND;
import com.paypal.sandbox.apim.models.PLATFORMFEESNOTSUPPORTED;
import com.paypal.sandbox.apim.models.PNREFNOTFOUND;
import com.paypal.sandbox.apim.models.POSTALCODEREQUIRED;
import com.paypal.sandbox.apim.models.PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH;
import com.paypal.sandbox.apim.models.PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK;
import com.paypal.sandbox.apim.models.PREVIOUSTRANSACTIONREFERENCEVOIDED;
import com.paypal.sandbox.apim.models.REFERENCEIDREQUIRED;
import com.paypal.sandbox.apim.models.REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT;
import com.paypal.sandbox.apim.models.SHIPPINGADDRESSINVALID;
import com.paypal.sandbox.apim.models.SHIPPINGOPTIONNOTSELECTED;
import com.paypal.sandbox.apim.models.SHIPPINGOPTIONSNOTSUPPORTED;
import com.paypal.sandbox.apim.models.SHIPPINGTYPENOTSUPPORTEDFORCLIENT;
import com.paypal.sandbox.apim.models.TAXTOTALMISMATCH;
import com.paypal.sandbox.apim.models.TAXTOTALREQUIRED;
import com.paypal.sandbox.apim.models.TOKENEXPIRED;
import com.paypal.sandbox.apim.models.TRANSACTIONBLOCKEDBYPAYEE;
import com.paypal.sandbox.apim.models.TRANSACTIONLIMITEXCEEDED;
import com.paypal.sandbox.apim.models.TRANSACTIONRECEIVINGLIMITEXCEEDED;
import com.paypal.sandbox.apim.models.TRANSACTIONREFUSED;
import com.paypal.sandbox.apim.models.UNSUPPORTEDINTENT;
import com.paypal.sandbox.apim.models.UNSUPPORTEDPAYMENTINSTRUCTION;
import com.paypal.sandbox.apim.models.UNSUPPORTEDPROCESSINGINSTRUCTION;
import com.paypal.sandbox.apim.models.UNSUPPORTEDSHIPPINGTYPE;
import com.paypal.sandbox.apim.models.VAULTINSTRUCTIONDUPLICATED;
import com.paypal.sandbox.apim.models.VAULTINSTRUCTIONREQUIRED;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = UnprocessableErrorIssue.UnprocessableErrorIssueDeserializer.class)
public abstract class UnprocessableErrorIssue {
    
    /**
     * This is AMOUNT_MISMATCH case.
     * @param aMOUNTMISMATCH AMOUNTMISMATCH value for aMOUNTMISMATCH.
     * @return The AMOUNTMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromAMOUNTMISMATCH(AMOUNTMISMATCH aMOUNTMISMATCH) {
        return aMOUNTMISMATCH == null ? null : new AMOUNTMISMATCHCase(aMOUNTMISMATCH);
    }

    /**
     * This is CANNOT_BE_NEGATIVE case.
     * @param cANNOTBENEGATIVE CANNOTBENEGATIVE value for cANNOTBENEGATIVE.
     * @return The CANNOTBENEGATIVECase object.
     */
    public static UnprocessableErrorIssue fromCANNOTBENEGATIVE(CANNOTBENEGATIVE cANNOTBENEGATIVE) {
        return cANNOTBENEGATIVE == null ? null : new CANNOTBENEGATIVECase(cANNOTBENEGATIVE);
    }

    /**
     * This is CANNOT_BE_ZERO_OR_NEGATIVE case.
     * @param cANNOTBEZEROORNEGATIVE CANNOTBEZEROORNEGATIVE value for cANNOTBEZEROORNEGATIVE.
     * @return The CANNOTBEZEROORNEGATIVECase object.
     */
    public static UnprocessableErrorIssue fromCANNOTBEZEROORNEGATIVE(
            CANNOTBEZEROORNEGATIVE cANNOTBEZEROORNEGATIVE) {
        return cANNOTBEZEROORNEGATIVE == null ? null : new CANNOTBEZEROORNEGATIVECase(cANNOTBEZEROORNEGATIVE);
    }

    /**
     * This is CARD_EXPIRED case.
     * @param cARDEXPIRED CARDEXPIRED value for cARDEXPIRED.
     * @return The CARDEXPIREDCase object.
     */
    public static UnprocessableErrorIssue fromCARDEXPIRED(CARDEXPIRED cARDEXPIRED) {
        return cARDEXPIRED == null ? null : new CARDEXPIREDCase(cARDEXPIRED);
    }

    /**
     * This is MISSING_PREVIOUS_REFERENCE case.
     * @param mISSINGPREVIOUSREFERENCE MISSINGPREVIOUSREFERENCE value for mISSINGPREVIOUSREFERENCE.
     * @return The MISSINGPREVIOUSREFERENCECase object.
     */
    public static UnprocessableErrorIssue fromMISSINGPREVIOUSREFERENCE(
            MISSINGPREVIOUSREFERENCE mISSINGPREVIOUSREFERENCE) {
        return mISSINGPREVIOUSREFERENCE == null ? null : new MISSINGPREVIOUSREFERENCECase(mISSINGPREVIOUSREFERENCE);
    }

    /**
     * This is MISSING_CRYPTOGRAM case.
     * @param mISSINGCRYPTOGRAM MISSINGCRYPTOGRAM value for mISSINGCRYPTOGRAM.
     * @return The MISSINGCRYPTOGRAMCase object.
     */
    public static UnprocessableErrorIssue fromMISSINGCRYPTOGRAM(
            MISSINGCRYPTOGRAM mISSINGCRYPTOGRAM) {
        return mISSINGCRYPTOGRAM == null ? null : new MISSINGCRYPTOGRAMCase(mISSINGCRYPTOGRAM);
    }

    /**
     * This is CITY_REQUIRED case.
     * @param cITYREQUIRED CITYREQUIRED value for cITYREQUIRED.
     * @return The CITYREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromCITYREQUIRED(CITYREQUIRED cITYREQUIRED) {
        return cITYREQUIRED == null ? null : new CITYREQUIREDCase(cITYREQUIRED);
    }

    /**
     * This is DECIMAL_PRECISION case.
     * @param dECIMALPRECISION DECIMALPRECISION value for dECIMALPRECISION.
     * @return The DECIMALPRECISIONCase object.
     */
    public static UnprocessableErrorIssue fromDECIMALPRECISION(DECIMALPRECISION dECIMALPRECISION) {
        return dECIMALPRECISION == null ? null : new DECIMALPRECISIONCase(dECIMALPRECISION);
    }

    /**
     * This is DONATION_ITEMS_NOT_SUPPORTED case.
     * @param dONATIONITEMSNOTSUPPORTED DONATIONITEMSNOTSUPPORTED value for dONATIONITEMSNOTSUPPORTED.
     * @return The DONATIONITEMSNOTSUPPORTEDCase object.
     */
    public static UnprocessableErrorIssue fromDONATIONITEMSNOTSUPPORTED(
            DONATIONITEMSNOTSUPPORTED dONATIONITEMSNOTSUPPORTED) {
        return dONATIONITEMSNOTSUPPORTED == null ? null : new DONATIONITEMSNOTSUPPORTEDCase(dONATIONITEMSNOTSUPPORTED);
    }

    /**
     * This is DUPLICATE_REFERENCE_ID case.
     * @param dUPLICATEREFERENCEID DUPLICATEREFERENCEID value for dUPLICATEREFERENCEID.
     * @return The DUPLICATEREFERENCEIDCase object.
     */
    public static UnprocessableErrorIssue fromDUPLICATEREFERENCEID(
            DUPLICATEREFERENCEID dUPLICATEREFERENCEID) {
        return dUPLICATEREFERENCEID == null ? null : new DUPLICATEREFERENCEIDCase(dUPLICATEREFERENCEID);
    }

    /**
     * This is INVALID_CURRENCY_CODE case.
     * @param iNVALIDCURRENCYCODE INVALIDCURRENCYCODE value for iNVALIDCURRENCYCODE.
     * @return The INVALIDCURRENCYCODECase object.
     */
    public static UnprocessableErrorIssue fromINVALIDCURRENCYCODE(
            INVALIDCURRENCYCODE iNVALIDCURRENCYCODE) {
        return iNVALIDCURRENCYCODE == null ? null : new INVALIDCURRENCYCODECase(iNVALIDCURRENCYCODE);
    }

    /**
     * This is INVALID_PAYER_ID case.
     * @param iNVALIDPAYERID INVALIDPAYERID value for iNVALIDPAYERID.
     * @return The INVALIDPAYERIDCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDPAYERID(INVALIDPAYERID iNVALIDPAYERID) {
        return iNVALIDPAYERID == null ? null : new INVALIDPAYERIDCase(iNVALIDPAYERID);
    }

    /**
     * This is ITEM_TOTAL_MISMATCH case.
     * @param iTEMTOTALMISMATCH ITEMTOTALMISMATCH value for iTEMTOTALMISMATCH.
     * @return The ITEMTOTALMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromITEMTOTALMISMATCH(
            ITEMTOTALMISMATCH iTEMTOTALMISMATCH) {
        return iTEMTOTALMISMATCH == null ? null : new ITEMTOTALMISMATCHCase(iTEMTOTALMISMATCH);
    }

    /**
     * This is ITEM_TOTAL_REQUIRED case.
     * @param iTEMTOTALREQUIRED ITEMTOTALREQUIRED value for iTEMTOTALREQUIRED.
     * @return The ITEMTOTALREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromITEMTOTALREQUIRED(
            ITEMTOTALREQUIRED iTEMTOTALREQUIRED) {
        return iTEMTOTALREQUIRED == null ? null : new ITEMTOTALREQUIREDCase(iTEMTOTALREQUIRED);
    }

    /**
     * This is MAX_VALUE_EXCEEDED case.
     * @param mAXVALUEEXCEEDED MAXVALUEEXCEEDED value for mAXVALUEEXCEEDED.
     * @return The MAXVALUEEXCEEDEDCase object.
     */
    public static UnprocessableErrorIssue fromMAXVALUEEXCEEDED(MAXVALUEEXCEEDED mAXVALUEEXCEEDED) {
        return mAXVALUEEXCEEDED == null ? null : new MAXVALUEEXCEEDEDCase(mAXVALUEEXCEEDED);
    }

    /**
     * This is MISSING_PICKUP_ADDRESS case.
     * @param mISSINGPICKUPADDRESS MISSINGPICKUPADDRESS value for mISSINGPICKUPADDRESS.
     * @return The MISSINGPICKUPADDRESSCase object.
     */
    public static UnprocessableErrorIssue fromMISSINGPICKUPADDRESS(
            MISSINGPICKUPADDRESS mISSINGPICKUPADDRESS) {
        return mISSINGPICKUPADDRESS == null ? null : new MISSINGPICKUPADDRESSCase(mISSINGPICKUPADDRESS);
    }

    /**
     * This is MULTI_CURRENCY_ORDER case.
     * @param mULTICURRENCYORDER MULTICURRENCYORDER value for mULTICURRENCYORDER.
     * @return The MULTICURRENCYORDERCase object.
     */
    public static UnprocessableErrorIssue fromMULTICURRENCYORDER(
            MULTICURRENCYORDER mULTICURRENCYORDER) {
        return mULTICURRENCYORDER == null ? null : new MULTICURRENCYORDERCase(mULTICURRENCYORDER);
    }

    /**
     * This is MULTIPLE_ITEM_CATEGORIES case.
     * @param mULTIPLEITEMCATEGORIES MULTIPLEITEMCATEGORIES value for mULTIPLEITEMCATEGORIES.
     * @return The MULTIPLEITEMCATEGORIESCase object.
     */
    public static UnprocessableErrorIssue fromMULTIPLEITEMCATEGORIES(
            MULTIPLEITEMCATEGORIES mULTIPLEITEMCATEGORIES) {
        return mULTIPLEITEMCATEGORIES == null ? null : new MULTIPLEITEMCATEGORIESCase(mULTIPLEITEMCATEGORIES);
    }

    /**
     * This is MULTIPLE_SHIPPING_ADDRESS_NOT_SUPPORTED case.
     * @param mULTIPLESHIPPINGADDRESSNOTSUPPORTED MULTIPLESHIPPINGADDRESSNOTSUPPORTED value for mULTIPLESHIPPINGADDRESSNOTSUPPORTED.
     * @return The MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase object.
     */
    public static UnprocessableErrorIssue fromMULTIPLESHIPPINGADDRESSNOTSUPPORTED(
            MULTIPLESHIPPINGADDRESSNOTSUPPORTED mULTIPLESHIPPINGADDRESSNOTSUPPORTED) {
        return mULTIPLESHIPPINGADDRESSNOTSUPPORTED == null ? null : new MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase(mULTIPLESHIPPINGADDRESSNOTSUPPORTED);
    }

    /**
     * This is MULTIPLE_SHIPPING_TYPE_NOT_SUPPORTED case.
     * @param mULTIPLESHIPPINGTYPENOTSUPPORTED MULTIPLESHIPPINGTYPENOTSUPPORTED value for mULTIPLESHIPPINGTYPENOTSUPPORTED.
     * @return The MULTIPLESHIPPINGTYPENOTSUPPORTEDCase object.
     */
    public static UnprocessableErrorIssue fromMULTIPLESHIPPINGTYPENOTSUPPORTED(
            MULTIPLESHIPPINGTYPENOTSUPPORTED mULTIPLESHIPPINGTYPENOTSUPPORTED) {
        return mULTIPLESHIPPINGTYPENOTSUPPORTED == null ? null : new MULTIPLESHIPPINGTYPENOTSUPPORTEDCase(mULTIPLESHIPPINGTYPENOTSUPPORTED);
    }

    /**
     * This is PAYEE_ACCOUNT_INVALID case.
     * @param pAYEEACCOUNTINVALID PAYEEACCOUNTINVALID value for pAYEEACCOUNTINVALID.
     * @return The PAYEEACCOUNTINVALIDCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEACCOUNTINVALID(
            PAYEEACCOUNTINVALID pAYEEACCOUNTINVALID) {
        return pAYEEACCOUNTINVALID == null ? null : new PAYEEACCOUNTINVALIDCase(pAYEEACCOUNTINVALID);
    }

    /**
     * This is PAYEE_ACCOUNT_LOCKED_OR_CLOSED case.
     * @param pAYEEACCOUNTLOCKEDORCLOSED PAYEEACCOUNTLOCKEDORCLOSED value for pAYEEACCOUNTLOCKEDORCLOSED.
     * @return The PAYEEACCOUNTLOCKEDORCLOSEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEACCOUNTLOCKEDORCLOSED(
            PAYEEACCOUNTLOCKEDORCLOSED pAYEEACCOUNTLOCKEDORCLOSED) {
        return pAYEEACCOUNTLOCKEDORCLOSED == null ? null : new PAYEEACCOUNTLOCKEDORCLOSEDCase(pAYEEACCOUNTLOCKEDORCLOSED);
    }

    /**
     * This is PAYEE_ACCOUNT_RESTRICTED case.
     * @param pAYEEACCOUNTRESTRICTED PAYEEACCOUNTRESTRICTED value for pAYEEACCOUNTRESTRICTED.
     * @return The PAYEEACCOUNTRESTRICTEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEACCOUNTRESTRICTED(
            PAYEEACCOUNTRESTRICTED pAYEEACCOUNTRESTRICTED) {
        return pAYEEACCOUNTRESTRICTED == null ? null : new PAYEEACCOUNTRESTRICTEDCase(pAYEEACCOUNTRESTRICTED);
    }

    /**
     * This is PAYEE_PRICING_TIER_ID_NOT_ENABLED case.
     * @param pAYEEPRICINGTIERIDNOTENABLED PAYEEPRICINGTIERIDNOTENABLED value for pAYEEPRICINGTIERIDNOTENABLED.
     * @return The PAYEEPRICINGTIERIDNOTENABLEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEPRICINGTIERIDNOTENABLED(
            PAYEEPRICINGTIERIDNOTENABLED pAYEEPRICINGTIERIDNOTENABLED) {
        return pAYEEPRICINGTIERIDNOTENABLED == null ? null : new PAYEEPRICINGTIERIDNOTENABLEDCase(pAYEEPRICINGTIERIDNOTENABLED);
    }

    /**
     * This is INVALID_PAYEE_PRICING_TIER_ID case.
     * @param iNVALIDPAYEEPRICINGTIERID INVALIDPAYEEPRICINGTIERID value for iNVALIDPAYEEPRICINGTIERID.
     * @return The INVALIDPAYEEPRICINGTIERIDCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDPAYEEPRICINGTIERID(
            INVALIDPAYEEPRICINGTIERID iNVALIDPAYEEPRICINGTIERID) {
        return iNVALIDPAYEEPRICINGTIERID == null ? null : new INVALIDPAYEEPRICINGTIERIDCase(iNVALIDPAYEEPRICINGTIERID);
    }

    /**
     * This is PAYEE_FX_RATE_ID_EXPIRED case.
     * @param pAYEEFXRATEIDEXPIRED PAYEEFXRATEIDEXPIRED value for pAYEEFXRATEIDEXPIRED.
     * @return The PAYEEFXRATEIDEXPIREDCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEFXRATEIDEXPIRED(
            PAYEEFXRATEIDEXPIRED pAYEEFXRATEIDEXPIRED) {
        return pAYEEFXRATEIDEXPIRED == null ? null : new PAYEEFXRATEIDEXPIREDCase(pAYEEFXRATEIDEXPIRED);
    }

    /**
     * This is PAYEE_FX_RATE_ID_CURRENCY_MISMATCH case.
     * @param pAYEEFXRATEIDCURRENCYMISMATCH PAYEEFXRATEIDCURRENCYMISMATCH value for pAYEEFXRATEIDCURRENCYMISMATCH.
     * @return The PAYEEFXRATEIDCURRENCYMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEFXRATEIDCURRENCYMISMATCH(
            PAYEEFXRATEIDCURRENCYMISMATCH pAYEEFXRATEIDCURRENCYMISMATCH) {
        return pAYEEFXRATEIDCURRENCYMISMATCH == null ? null : new PAYEEFXRATEIDCURRENCYMISMATCHCase(pAYEEFXRATEIDCURRENCYMISMATCH);
    }

    /**
     * This is INVALID_FX_RATE_ID case.
     * @param iNVALIDFXRATEID INVALIDFXRATEID value for iNVALIDFXRATEID.
     * @return The INVALIDFXRATEIDCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDFXRATEID(INVALIDFXRATEID iNVALIDFXRATEID) {
        return iNVALIDFXRATEID == null ? null : new INVALIDFXRATEIDCase(iNVALIDFXRATEID);
    }

    /**
     * This is PLATFORM_FEES_NOT_SUPPORTED case.
     * @param pLATFORMFEESNOTSUPPORTED PLATFORMFEESNOTSUPPORTED value for pLATFORMFEESNOTSUPPORTED.
     * @return The PLATFORMFEESNOTSUPPORTEDCase object.
     */
    public static UnprocessableErrorIssue fromPLATFORMFEESNOTSUPPORTED(
            PLATFORMFEESNOTSUPPORTED pLATFORMFEESNOTSUPPORTED) {
        return pLATFORMFEESNOTSUPPORTED == null ? null : new PLATFORMFEESNOTSUPPORTEDCase(pLATFORMFEESNOTSUPPORTED);
    }

    /**
     * This is INVALID_PLATFORM_FEES_ACCOUNT case.
     * @param iNVALIDPLATFORMFEESACCOUNT INVALIDPLATFORMFEESACCOUNT value for iNVALIDPLATFORMFEESACCOUNT.
     * @return The INVALIDPLATFORMFEESACCOUNTCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDPLATFORMFEESACCOUNT(
            INVALIDPLATFORMFEESACCOUNT iNVALIDPLATFORMFEESACCOUNT) {
        return iNVALIDPLATFORMFEESACCOUNT == null ? null : new INVALIDPLATFORMFEESACCOUNTCase(iNVALIDPLATFORMFEESACCOUNT);
    }

    /**
     * This is INVALID_PLATFORM_FEES_AMOUNT case.
     * @param iNVALIDPLATFORMFEESAMOUNT INVALIDPLATFORMFEESAMOUNT value for iNVALIDPLATFORMFEESAMOUNT.
     * @return The INVALIDPLATFORMFEESAMOUNTCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDPLATFORMFEESAMOUNT(
            INVALIDPLATFORMFEESAMOUNT iNVALIDPLATFORMFEESAMOUNT) {
        return iNVALIDPLATFORMFEESAMOUNT == null ? null : new INVALIDPLATFORMFEESAMOUNTCase(iNVALIDPLATFORMFEESAMOUNT);
    }

    /**
     * This is POSTAL_CODE_REQUIRED case.
     * @param pOSTALCODEREQUIRED POSTALCODEREQUIRED value for pOSTALCODEREQUIRED.
     * @return The POSTALCODEREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromPOSTALCODEREQUIRED(
            POSTALCODEREQUIRED pOSTALCODEREQUIRED) {
        return pOSTALCODEREQUIRED == null ? null : new POSTALCODEREQUIREDCase(pOSTALCODEREQUIRED);
    }

    /**
     * This is REFERENCE_ID_REQUIRED case.
     * @param rEFERENCEIDREQUIRED REFERENCEIDREQUIRED value for rEFERENCEIDREQUIRED.
     * @return The REFERENCEIDREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromREFERENCEIDREQUIRED(
            REFERENCEIDREQUIRED rEFERENCEIDREQUIRED) {
        return rEFERENCEIDREQUIRED == null ? null : new REFERENCEIDREQUIREDCase(rEFERENCEIDREQUIRED);
    }

    /**
     * This is SHIPPING_OPTIONS_NOT_SUPPORTED case.
     * @param sHIPPINGOPTIONSNOTSUPPORTED SHIPPINGOPTIONSNOTSUPPORTED value for sHIPPINGOPTIONSNOTSUPPORTED.
     * @return The SHIPPINGOPTIONSNOTSUPPORTEDCase object.
     */
    public static UnprocessableErrorIssue fromSHIPPINGOPTIONSNOTSUPPORTED(
            SHIPPINGOPTIONSNOTSUPPORTED sHIPPINGOPTIONSNOTSUPPORTED) {
        return sHIPPINGOPTIONSNOTSUPPORTED == null ? null : new SHIPPINGOPTIONSNOTSUPPORTEDCase(sHIPPINGOPTIONSNOTSUPPORTED);
    }

    /**
     * This is TAX_TOTAL_MISMATCH case.
     * @param tAXTOTALMISMATCH TAXTOTALMISMATCH value for tAXTOTALMISMATCH.
     * @return The TAXTOTALMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromTAXTOTALMISMATCH(TAXTOTALMISMATCH tAXTOTALMISMATCH) {
        return tAXTOTALMISMATCH == null ? null : new TAXTOTALMISMATCHCase(tAXTOTALMISMATCH);
    }

    /**
     * This is TAX_TOTAL_REQUIRED case.
     * @param tAXTOTALREQUIRED TAXTOTALREQUIRED value for tAXTOTALREQUIRED.
     * @return The TAXTOTALREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromTAXTOTALREQUIRED(TAXTOTALREQUIRED tAXTOTALREQUIRED) {
        return tAXTOTALREQUIRED == null ? null : new TAXTOTALREQUIREDCase(tAXTOTALREQUIRED);
    }

    /**
     * This is UNSUPPORTED_INTENT case.
     * @param uNSUPPORTEDINTENT UNSUPPORTEDINTENT value for uNSUPPORTEDINTENT.
     * @return The UNSUPPORTEDINTENTCase object.
     */
    public static UnprocessableErrorIssue fromUNSUPPORTEDINTENT(
            UNSUPPORTEDINTENT uNSUPPORTEDINTENT) {
        return uNSUPPORTEDINTENT == null ? null : new UNSUPPORTEDINTENTCase(uNSUPPORTEDINTENT);
    }

    /**
     * This is UNSUPPORTED_PAYMENT_INSTRUCTION case.
     * @param uNSUPPORTEDPAYMENTINSTRUCTION UNSUPPORTEDPAYMENTINSTRUCTION value for uNSUPPORTEDPAYMENTINSTRUCTION.
     * @return The UNSUPPORTEDPAYMENTINSTRUCTIONCase object.
     */
    public static UnprocessableErrorIssue fromUNSUPPORTEDPAYMENTINSTRUCTION(
            UNSUPPORTEDPAYMENTINSTRUCTION uNSUPPORTEDPAYMENTINSTRUCTION) {
        return uNSUPPORTEDPAYMENTINSTRUCTION == null ? null : new UNSUPPORTEDPAYMENTINSTRUCTIONCase(uNSUPPORTEDPAYMENTINSTRUCTION);
    }

    /**
     * This is SHIPPING_TYPE_NOT_SUPPORTED_FOR_CLIENT case.
     * @param sHIPPINGTYPENOTSUPPORTEDFORCLIENT SHIPPINGTYPENOTSUPPORTEDFORCLIENT value for sHIPPINGTYPENOTSUPPORTEDFORCLIENT.
     * @return The SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase object.
     */
    public static UnprocessableErrorIssue fromSHIPPINGTYPENOTSUPPORTEDFORCLIENT(
            SHIPPINGTYPENOTSUPPORTEDFORCLIENT sHIPPINGTYPENOTSUPPORTEDFORCLIENT) {
        return sHIPPINGTYPENOTSUPPORTEDFORCLIENT == null ? null : new SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase(sHIPPINGTYPENOTSUPPORTEDFORCLIENT);
    }

    /**
     * This is UNSUPPORTED_SHIPPING_TYPE case.
     * @param uNSUPPORTEDSHIPPINGTYPE UNSUPPORTEDSHIPPINGTYPE value for uNSUPPORTEDSHIPPINGTYPE.
     * @return The UNSUPPORTEDSHIPPINGTYPECase object.
     */
    public static UnprocessableErrorIssue fromUNSUPPORTEDSHIPPINGTYPE(
            UNSUPPORTEDSHIPPINGTYPE uNSUPPORTEDSHIPPINGTYPE) {
        return uNSUPPORTEDSHIPPINGTYPE == null ? null : new UNSUPPORTEDSHIPPINGTYPECase(uNSUPPORTEDSHIPPINGTYPE);
    }

    /**
     * This is SHIPPING_OPTION_NOT_SELECTED case.
     * @param sHIPPINGOPTIONNOTSELECTED SHIPPINGOPTIONNOTSELECTED value for sHIPPINGOPTIONNOTSELECTED.
     * @return The SHIPPINGOPTIONNOTSELECTEDCase object.
     */
    public static UnprocessableErrorIssue fromSHIPPINGOPTIONNOTSELECTED(
            SHIPPINGOPTIONNOTSELECTED sHIPPINGOPTIONNOTSELECTED) {
        return sHIPPINGOPTIONNOTSELECTED == null ? null : new SHIPPINGOPTIONNOTSELECTEDCase(sHIPPINGOPTIONNOTSELECTED);
    }

    /**
     * This is MULTIPLE_SHIPPING_OPTION_SELECTED case.
     * @param mULTIPLESHIPPINGOPTIONSELECTED MULTIPLESHIPPINGOPTIONSELECTED value for mULTIPLESHIPPINGOPTIONSELECTED.
     * @return The MULTIPLESHIPPINGOPTIONSELECTEDCase object.
     */
    public static UnprocessableErrorIssue fromMULTIPLESHIPPINGOPTIONSELECTED(
            MULTIPLESHIPPINGOPTIONSELECTED mULTIPLESHIPPINGOPTIONSELECTED) {
        return mULTIPLESHIPPINGOPTIONSELECTED == null ? null : new MULTIPLESHIPPINGOPTIONSELECTEDCase(mULTIPLESHIPPINGOPTIONSELECTED);
    }

    /**
     * This is PREFERRED_SHIPPING_OPTION_AMOUNT_MISMATCH case.
     * @param pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH value for pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH.
     * @return The PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromPREFERREDSHIPPINGOPTIONAMOUNTMISMATCH(
            PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH) {
        return pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH == null ? null : new PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase(pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH);
    }

    /**
     * This is AGREEMENT_ALREADY_CANCELLED case.
     * @param aGREEMENTALREADYCANCELLED AGREEMENTALREADYCANCELLED value for aGREEMENTALREADYCANCELLED.
     * @return The AGREEMENTALREADYCANCELLEDCase object.
     */
    public static UnprocessableErrorIssue fromAGREEMENTALREADYCANCELLED(
            AGREEMENTALREADYCANCELLED aGREEMENTALREADYCANCELLED) {
        return aGREEMENTALREADYCANCELLED == null ? null : new AGREEMENTALREADYCANCELLEDCase(aGREEMENTALREADYCANCELLED);
    }

    /**
     * This is BILLING_AGREEMENT_NOT_FOUND case.
     * @param bILLINGAGREEMENTNOTFOUND BILLINGAGREEMENTNOTFOUND value for bILLINGAGREEMENTNOTFOUND.
     * @return The BILLINGAGREEMENTNOTFOUNDCase object.
     */
    public static UnprocessableErrorIssue fromBILLINGAGREEMENTNOTFOUND(
            BILLINGAGREEMENTNOTFOUND bILLINGAGREEMENTNOTFOUND) {
        return bILLINGAGREEMENTNOTFOUND == null ? null : new BILLINGAGREEMENTNOTFOUNDCase(bILLINGAGREEMENTNOTFOUND);
    }

    /**
     * This is COMPLIANCE_VIOLATION case.
     * @param cOMPLIANCEVIOLATION COMPLIANCEVIOLATION value for cOMPLIANCEVIOLATION.
     * @return The COMPLIANCEVIOLATIONCase object.
     */
    public static UnprocessableErrorIssue fromCOMPLIANCEVIOLATION(
            COMPLIANCEVIOLATION cOMPLIANCEVIOLATION) {
        return cOMPLIANCEVIOLATION == null ? null : new COMPLIANCEVIOLATIONCase(cOMPLIANCEVIOLATION);
    }

    /**
     * This is DOMESTIC_TRANSACTION_REQUIRED case.
     * @param dOMESTICTRANSACTIONREQUIRED DOMESTICTRANSACTIONREQUIRED value for dOMESTICTRANSACTIONREQUIRED.
     * @return The DOMESTICTRANSACTIONREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromDOMESTICTRANSACTIONREQUIRED(
            DOMESTICTRANSACTIONREQUIRED dOMESTICTRANSACTIONREQUIRED) {
        return dOMESTICTRANSACTIONREQUIRED == null ? null : new DOMESTICTRANSACTIONREQUIREDCase(dOMESTICTRANSACTIONREQUIRED);
    }

    /**
     * This is DUPLICATE_INVOICE_ID case.
     * @param dUPLICATEINVOICEID DUPLICATEINVOICEID value for dUPLICATEINVOICEID.
     * @return The DUPLICATEINVOICEIDCase object.
     */
    public static UnprocessableErrorIssue fromDUPLICATEINVOICEID(
            DUPLICATEINVOICEID dUPLICATEINVOICEID) {
        return dUPLICATEINVOICEID == null ? null : new DUPLICATEINVOICEIDCase(dUPLICATEINVOICEID);
    }

    /**
     * This is INSTRUMENT_DECLINED case.
     * @param iNSTRUMENTDECLINED INSTRUMENTDECLINED value for iNSTRUMENTDECLINED.
     * @return The INSTRUMENTDECLINEDCase object.
     */
    public static UnprocessableErrorIssue fromINSTRUMENTDECLINED(
            INSTRUMENTDECLINED iNSTRUMENTDECLINED) {
        return iNSTRUMENTDECLINED == null ? null : new INSTRUMENTDECLINEDCase(iNSTRUMENTDECLINED);
    }

    /**
     * This is MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED case.
     * @param mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED value for mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED.
     * @return The MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase object.
     */
    public static UnprocessableErrorIssue fromMAXNUMBEROFPAYMENTATTEMPTSEXCEEDED(
            MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED) {
        return mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED == null ? null : new MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase(mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED);
    }

    /**
     * This is NOT_ENABLED_FOR_CARD_PROCESSING case.
     * @param nOTENABLEDFORCARDPROCESSING NOTENABLEDFORCARDPROCESSING value for nOTENABLEDFORCARDPROCESSING.
     * @return The NOTENABLEDFORCARDPROCESSINGCase object.
     */
    public static UnprocessableErrorIssue fromNOTENABLEDFORCARDPROCESSING(
            NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING) {
        return nOTENABLEDFORCARDPROCESSING == null ? null : new NOTENABLEDFORCARDPROCESSINGCase(nOTENABLEDFORCARDPROCESSING);
    }

    /**
     * This is PAYEE_BLOCKED_TRANSACTION case.
     * @param pAYEEBLOCKEDTRANSACTION PAYEEBLOCKEDTRANSACTION value for pAYEEBLOCKEDTRANSACTION.
     * @return The PAYEEBLOCKEDTRANSACTIONCase object.
     */
    public static UnprocessableErrorIssue fromPAYEEBLOCKEDTRANSACTION(
            PAYEEBLOCKEDTRANSACTION pAYEEBLOCKEDTRANSACTION) {
        return pAYEEBLOCKEDTRANSACTION == null ? null : new PAYEEBLOCKEDTRANSACTIONCase(pAYEEBLOCKEDTRANSACTION);
    }

    /**
     * This is PAYER_ACCOUNT_LOCKED_OR_CLOSED case.
     * @param pAYERACCOUNTLOCKEDORCLOSED PAYERACCOUNTLOCKEDORCLOSED value for pAYERACCOUNTLOCKEDORCLOSED.
     * @return The PAYERACCOUNTLOCKEDORCLOSEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYERACCOUNTLOCKEDORCLOSED(
            PAYERACCOUNTLOCKEDORCLOSED pAYERACCOUNTLOCKEDORCLOSED) {
        return pAYERACCOUNTLOCKEDORCLOSED == null ? null : new PAYERACCOUNTLOCKEDORCLOSEDCase(pAYERACCOUNTLOCKEDORCLOSED);
    }

    /**
     * This is PAYER_ACCOUNT_RESTRICTED case.
     * @param pAYERACCOUNTRESTRICTED PAYERACCOUNTRESTRICTED value for pAYERACCOUNTRESTRICTED.
     * @return The PAYERACCOUNTRESTRICTEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYERACCOUNTRESTRICTED(
            PAYERACCOUNTRESTRICTED pAYERACCOUNTRESTRICTED) {
        return pAYERACCOUNTRESTRICTED == null ? null : new PAYERACCOUNTRESTRICTEDCase(pAYERACCOUNTRESTRICTED);
    }

    /**
     * This is PAYER_CANNOT_PAY case.
     * @param pAYERCANNOTPAY PAYERCANNOTPAY value for pAYERCANNOTPAY.
     * @return The PAYERCANNOTPAYCase object.
     */
    public static UnprocessableErrorIssue fromPAYERCANNOTPAY(PAYERCANNOTPAY pAYERCANNOTPAY) {
        return pAYERCANNOTPAY == null ? null : new PAYERCANNOTPAYCase(pAYERCANNOTPAY);
    }

    /**
     * This is TRANSACTION_BLOCKED_BY_PAYEE case.
     * @param tRANSACTIONBLOCKEDBYPAYEE TRANSACTIONBLOCKEDBYPAYEE value for tRANSACTIONBLOCKEDBYPAYEE.
     * @return The TRANSACTIONBLOCKEDBYPAYEECase object.
     */
    public static UnprocessableErrorIssue fromTRANSACTIONBLOCKEDBYPAYEE(
            TRANSACTIONBLOCKEDBYPAYEE tRANSACTIONBLOCKEDBYPAYEE) {
        return tRANSACTIONBLOCKEDBYPAYEE == null ? null : new TRANSACTIONBLOCKEDBYPAYEECase(tRANSACTIONBLOCKEDBYPAYEE);
    }

    /**
     * This is TRANSACTION_LIMIT_EXCEEDED case.
     * @param tRANSACTIONLIMITEXCEEDED TRANSACTIONLIMITEXCEEDED value for tRANSACTIONLIMITEXCEEDED.
     * @return The TRANSACTIONLIMITEXCEEDEDCase object.
     */
    public static UnprocessableErrorIssue fromTRANSACTIONLIMITEXCEEDED(
            TRANSACTIONLIMITEXCEEDED tRANSACTIONLIMITEXCEEDED) {
        return tRANSACTIONLIMITEXCEEDED == null ? null : new TRANSACTIONLIMITEXCEEDEDCase(tRANSACTIONLIMITEXCEEDED);
    }

    /**
     * This is TRANSACTION_RECEIVING_LIMIT_EXCEEDED case.
     * @param tRANSACTIONRECEIVINGLIMITEXCEEDED TRANSACTIONRECEIVINGLIMITEXCEEDED value for tRANSACTIONRECEIVINGLIMITEXCEEDED.
     * @return The TRANSACTIONRECEIVINGLIMITEXCEEDEDCase object.
     */
    public static UnprocessableErrorIssue fromTRANSACTIONRECEIVINGLIMITEXCEEDED(
            TRANSACTIONRECEIVINGLIMITEXCEEDED tRANSACTIONRECEIVINGLIMITEXCEEDED) {
        return tRANSACTIONRECEIVINGLIMITEXCEEDED == null ? null : new TRANSACTIONRECEIVINGLIMITEXCEEDEDCase(tRANSACTIONRECEIVINGLIMITEXCEEDED);
    }

    /**
     * This is TRANSACTION_REFUSED case.
     * @param tRANSACTIONREFUSED TRANSACTIONREFUSED value for tRANSACTIONREFUSED.
     * @return The TRANSACTIONREFUSEDCase object.
     */
    public static UnprocessableErrorIssue fromTRANSACTIONREFUSED(
            TRANSACTIONREFUSED tRANSACTIONREFUSED) {
        return tRANSACTIONREFUSED == null ? null : new TRANSACTIONREFUSEDCase(tRANSACTIONREFUSED);
    }

    /**
     * This is AUTH_CAPTURE_NOT_ENABLED case.
     * @param aUTHCAPTURENOTENABLED AUTHCAPTURENOTENABLED value for aUTHCAPTURENOTENABLED.
     * @return The AUTHCAPTURENOTENABLEDCase object.
     */
    public static UnprocessableErrorIssue fromAUTHCAPTURENOTENABLED(
            AUTHCAPTURENOTENABLED aUTHCAPTURENOTENABLED) {
        return aUTHCAPTURENOTENABLED == null ? null : new AUTHCAPTURENOTENABLEDCase(aUTHCAPTURENOTENABLED);
    }

    /**
     * This is UNSUPPORTED_PROCESSING_INSTRUCTION case.
     * @param uNSUPPORTEDPROCESSINGINSTRUCTION UNSUPPORTEDPROCESSINGINSTRUCTION value for uNSUPPORTEDPROCESSINGINSTRUCTION.
     * @return The UNSUPPORTEDPROCESSINGINSTRUCTIONCase object.
     */
    public static UnprocessableErrorIssue fromUNSUPPORTEDPROCESSINGINSTRUCTION(
            UNSUPPORTEDPROCESSINGINSTRUCTION uNSUPPORTEDPROCESSINGINSTRUCTION) {
        return uNSUPPORTEDPROCESSINGINSTRUCTION == null ? null : new UNSUPPORTEDPROCESSINGINSTRUCTIONCase(uNSUPPORTEDPROCESSINGINSTRUCTION);
    }

    /**
     * This is ORDER_COMPLETE_ON_PAYMENT_APPROVAL case.
     * @param oRDERCOMPLETEONPAYMENTAPPROVAL ORDERCOMPLETEONPAYMENTAPPROVAL value for oRDERCOMPLETEONPAYMENTAPPROVAL.
     * @return The ORDERCOMPLETEONPAYMENTAPPROVALCase object.
     */
    public static UnprocessableErrorIssue fromORDERCOMPLETEONPAYMENTAPPROVAL(
            ORDERCOMPLETEONPAYMENTAPPROVAL oRDERCOMPLETEONPAYMENTAPPROVAL) {
        return oRDERCOMPLETEONPAYMENTAPPROVAL == null ? null : new ORDERCOMPLETEONPAYMENTAPPROVALCase(oRDERCOMPLETEONPAYMENTAPPROVAL);
    }

    /**
     * This is INVALID_EXPIRY_DATE case.
     * @param iNVALIDEXPIRYDATE INVALIDEXPIRYDATE value for iNVALIDEXPIRYDATE.
     * @return The INVALIDEXPIRYDATECase object.
     */
    public static UnprocessableErrorIssue fromINVALIDEXPIRYDATE(
            INVALIDEXPIRYDATE iNVALIDEXPIRYDATE) {
        return iNVALIDEXPIRYDATE == null ? null : new INVALIDEXPIRYDATECase(iNVALIDEXPIRYDATE);
    }

    /**
     * This is INCOMPATIBLE_PARAMETER_VALUE case.
     * @param iNCOMPATIBLEPARAMETERVALUE INCOMPATIBLEPARAMETERVALUE value for iNCOMPATIBLEPARAMETERVALUE.
     * @return The INCOMPATIBLEPARAMETERVALUECase object.
     */
    public static UnprocessableErrorIssue fromINCOMPATIBLEPARAMETERVALUE(
            INCOMPATIBLEPARAMETERVALUE iNCOMPATIBLEPARAMETERVALUE) {
        return iNCOMPATIBLEPARAMETERVALUE == null ? null : new INCOMPATIBLEPARAMETERVALUECase(iNCOMPATIBLEPARAMETERVALUE);
    }

    /**
     * This is INVALID_PREVIOUS_TRANSACTION_REFERENCE case.
     * @param iNVALIDPREVIOUSTRANSACTIONREFERENCE INVALIDPREVIOUSTRANSACTIONREFERENCE value for iNVALIDPREVIOUSTRANSACTIONREFERENCE.
     * @return The INVALIDPREVIOUSTRANSACTIONREFERENCECase object.
     */
    public static UnprocessableErrorIssue fromINVALIDPREVIOUSTRANSACTIONREFERENCE(
            INVALIDPREVIOUSTRANSACTIONREFERENCE iNVALIDPREVIOUSTRANSACTIONREFERENCE) {
        return iNVALIDPREVIOUSTRANSACTIONREFERENCE == null ? null : new INVALIDPREVIOUSTRANSACTIONREFERENCECase(iNVALIDPREVIOUSTRANSACTIONREFERENCE);
    }

    /**
     * This is PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK case.
     * @param pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK value for pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK.
     * @return The PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase object.
     */
    public static UnprocessableErrorIssue fromPREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK(
            PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK) {
        return pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK == null ? null : new PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase(pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK);
    }

    /**
     * This is PREVIOUS_TRANSACTION_REFERENCE_VOIDED case.
     * @param pREVIOUSTRANSACTIONREFERENCEVOIDED PREVIOUSTRANSACTIONREFERENCEVOIDED value for pREVIOUSTRANSACTIONREFERENCEVOIDED.
     * @return The PREVIOUSTRANSACTIONREFERENCEVOIDEDCase object.
     */
    public static UnprocessableErrorIssue fromPREVIOUSTRANSACTIONREFERENCEVOIDED(
            PREVIOUSTRANSACTIONREFERENCEVOIDED pREVIOUSTRANSACTIONREFERENCEVOIDED) {
        return pREVIOUSTRANSACTIONREFERENCEVOIDED == null ? null : new PREVIOUSTRANSACTIONREFERENCEVOIDEDCase(pREVIOUSTRANSACTIONREFERENCEVOIDED);
    }

    /**
     * This is PAYMENT_SOURCE_MISMATCH case.
     * @param pAYMENTSOURCEMISMATCH PAYMENTSOURCEMISMATCH value for pAYMENTSOURCEMISMATCH.
     * @return The PAYMENTSOURCEMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromPAYMENTSOURCEMISMATCH(
            PAYMENTSOURCEMISMATCH pAYMENTSOURCEMISMATCH) {
        return pAYMENTSOURCEMISMATCH == null ? null : new PAYMENTSOURCEMISMATCHCase(pAYMENTSOURCEMISMATCH);
    }

    /**
     * This is MERCHANT_INITIATED_WITH_SECURITY_CODE case.
     * @param mERCHANTINITIATEDWITHSECURITYCODE MERCHANTINITIATEDWITHSECURITYCODE value for mERCHANTINITIATEDWITHSECURITYCODE.
     * @return The MERCHANTINITIATEDWITHSECURITYCODECase object.
     */
    public static UnprocessableErrorIssue fromMERCHANTINITIATEDWITHSECURITYCODE(
            MERCHANTINITIATEDWITHSECURITYCODE mERCHANTINITIATEDWITHSECURITYCODE) {
        return mERCHANTINITIATEDWITHSECURITYCODE == null ? null : new MERCHANTINITIATEDWITHSECURITYCODECase(mERCHANTINITIATEDWITHSECURITYCODE);
    }

    /**
     * This is MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS case.
     * @param mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS value for mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS.
     * @return The MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase object.
     */
    public static UnprocessableErrorIssue fromMERCHANTINITIATEDWITHAUTHENTICATIONRESULTS(
            MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS) {
        return mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS == null ? null : new MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase(mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS);
    }

    /**
     * This is MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS case.
     * @param mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS value for mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS.
     * @return The MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase object.
     */
    public static UnprocessableErrorIssue fromMERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS(
            MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS) {
        return mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS == null ? null : new MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase(mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS);
    }

    /**
     * This is PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED case.
     * @param pAYMENTSOURCEINFOCANNOTBEVERIFIED PAYMENTSOURCEINFOCANNOTBEVERIFIED value for pAYMENTSOURCEINFOCANNOTBEVERIFIED.
     * @return The PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYMENTSOURCEINFOCANNOTBEVERIFIED(
            PAYMENTSOURCEINFOCANNOTBEVERIFIED pAYMENTSOURCEINFOCANNOTBEVERIFIED) {
        return pAYMENTSOURCEINFOCANNOTBEVERIFIED == null ? null : new PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase(pAYMENTSOURCEINFOCANNOTBEVERIFIED);
    }

    /**
     * This is PAYMENT_SOURCE_DECLINED_BY_PROCESSOR case.
     * @param pAYMENTSOURCEDECLINEDBYPROCESSOR PAYMENTSOURCEDECLINEDBYPROCESSOR value for pAYMENTSOURCEDECLINEDBYPROCESSOR.
     * @return The PAYMENTSOURCEDECLINEDBYPROCESSORCase object.
     */
    public static UnprocessableErrorIssue fromPAYMENTSOURCEDECLINEDBYPROCESSOR(
            PAYMENTSOURCEDECLINEDBYPROCESSOR pAYMENTSOURCEDECLINEDBYPROCESSOR) {
        return pAYMENTSOURCEDECLINEDBYPROCESSOR == null ? null : new PAYMENTSOURCEDECLINEDBYPROCESSORCase(pAYMENTSOURCEDECLINEDBYPROCESSOR);
    }

    /**
     * This is PAYMENT_SOURCE_CANNOT_BE_USED case.
     * @param pAYMENTSOURCECANNOTBEUSED PAYMENTSOURCECANNOTBEUSED value for pAYMENTSOURCECANNOTBEUSED.
     * @return The PAYMENTSOURCECANNOTBEUSEDCase object.
     */
    public static UnprocessableErrorIssue fromPAYMENTSOURCECANNOTBEUSED(
            PAYMENTSOURCECANNOTBEUSED pAYMENTSOURCECANNOTBEUSED) {
        return pAYMENTSOURCECANNOTBEUSED == null ? null : new PAYMENTSOURCECANNOTBEUSEDCase(pAYMENTSOURCECANNOTBEUSED);
    }

    /**
     * This is NOT_ENABLED_FOR_APPLE_PAY case.
     * @param nOTENABLEDFORAPPLEPAY NOTENABLEDFORAPPLEPAY value for nOTENABLEDFORAPPLEPAY.
     * @return The NOTENABLEDFORAPPLEPAYCase object.
     */
    public static UnprocessableErrorIssue fromNOTENABLEDFORAPPLEPAY(
            NOTENABLEDFORAPPLEPAY nOTENABLEDFORAPPLEPAY) {
        return nOTENABLEDFORAPPLEPAY == null ? null : new NOTENABLEDFORAPPLEPAYCase(nOTENABLEDFORAPPLEPAY);
    }

    /**
     * This is NOT_ENABLED_FOR_GOOGLE_PAY case.
     * @param nOTENABLEDFORGOOGLEPAY NOTENABLEDFORGOOGLEPAY value for nOTENABLEDFORGOOGLEPAY.
     * @return The NOTENABLEDFORGOOGLEPAYCase object.
     */
    public static UnprocessableErrorIssue fromNOTENABLEDFORGOOGLEPAY(
            NOTENABLEDFORGOOGLEPAY nOTENABLEDFORGOOGLEPAY) {
        return nOTENABLEDFORGOOGLEPAY == null ? null : new NOTENABLEDFORGOOGLEPAYCase(nOTENABLEDFORGOOGLEPAY);
    }

    /**
     * This is APPLE_PAY_AMOUNT_MISMATCH case.
     * @param aPPLEPAYAMOUNTMISMATCH APPLEPAYAMOUNTMISMATCH value for aPPLEPAYAMOUNTMISMATCH.
     * @return The APPLEPAYAMOUNTMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromAPPLEPAYAMOUNTMISMATCH(
            APPLEPAYAMOUNTMISMATCH aPPLEPAYAMOUNTMISMATCH) {
        return aPPLEPAYAMOUNTMISMATCH == null ? null : new APPLEPAYAMOUNTMISMATCHCase(aPPLEPAYAMOUNTMISMATCH);
    }

    /**
     * This is BILLING_ADDRESS_INVALID case.
     * @param bILLINGADDRESSINVALID BILLINGADDRESSINVALID value for bILLINGADDRESSINVALID.
     * @return The BILLINGADDRESSINVALIDCase object.
     */
    public static UnprocessableErrorIssue fromBILLINGADDRESSINVALID(
            BILLINGADDRESSINVALID bILLINGADDRESSINVALID) {
        return bILLINGADDRESSINVALID == null ? null : new BILLINGADDRESSINVALIDCase(bILLINGADDRESSINVALID);
    }

    /**
     * This is SHIPPING_ADDRESS_INVALID case.
     * @param sHIPPINGADDRESSINVALID SHIPPINGADDRESSINVALID value for sHIPPINGADDRESSINVALID.
     * @return The SHIPPINGADDRESSINVALIDCase object.
     */
    public static UnprocessableErrorIssue fromSHIPPINGADDRESSINVALID(
            SHIPPINGADDRESSINVALID sHIPPINGADDRESSINVALID) {
        return sHIPPINGADDRESSINVALID == null ? null : new SHIPPINGADDRESSINVALIDCase(sHIPPINGADDRESSINVALID);
    }

    /**
     * This is VAULT_INSTRUCTION_DUPLICATED case.
     * @param vAULTINSTRUCTIONDUPLICATED VAULTINSTRUCTIONDUPLICATED value for vAULTINSTRUCTIONDUPLICATED.
     * @return The VAULTINSTRUCTIONDUPLICATEDCase object.
     */
    public static UnprocessableErrorIssue fromVAULTINSTRUCTIONDUPLICATED(
            VAULTINSTRUCTIONDUPLICATED vAULTINSTRUCTIONDUPLICATED) {
        return vAULTINSTRUCTIONDUPLICATED == null ? null : new VAULTINSTRUCTIONDUPLICATEDCase(vAULTINSTRUCTIONDUPLICATED);
    }

    /**
     * This is VAULT_INSTRUCTION_REQUIRED case.
     * @param vAULTINSTRUCTIONREQUIRED VAULTINSTRUCTIONREQUIRED value for vAULTINSTRUCTIONREQUIRED.
     * @return The VAULTINSTRUCTIONREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromVAULTINSTRUCTIONREQUIRED(
            VAULTINSTRUCTIONREQUIRED vAULTINSTRUCTIONREQUIRED) {
        return vAULTINSTRUCTIONREQUIRED == null ? null : new VAULTINSTRUCTIONREQUIREDCase(vAULTINSTRUCTIONREQUIRED);
    }

    /**
     * This is MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE case.
     * @param mISMATCHEDVAULTIDTOPAYMENTSOURCE MISMATCHEDVAULTIDTOPAYMENTSOURCE value for mISMATCHEDVAULTIDTOPAYMENTSOURCE.
     * @return The MISMATCHEDVAULTIDTOPAYMENTSOURCECase object.
     */
    public static UnprocessableErrorIssue fromMISMATCHEDVAULTIDTOPAYMENTSOURCE(
            MISMATCHEDVAULTIDTOPAYMENTSOURCE mISMATCHEDVAULTIDTOPAYMENTSOURCE) {
        return mISMATCHEDVAULTIDTOPAYMENTSOURCE == null ? null : new MISMATCHEDVAULTIDTOPAYMENTSOURCECase(mISMATCHEDVAULTIDTOPAYMENTSOURCE);
    }

    /**
     * This is CRYPTOGRAM_REQUIRED case.
     * @param cRYPTOGRAMREQUIRED CRYPTOGRAMREQUIRED value for cRYPTOGRAMREQUIRED.
     * @return The CRYPTOGRAMREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromCRYPTOGRAMREQUIRED(
            CRYPTOGRAMREQUIRED cRYPTOGRAMREQUIRED) {
        return cRYPTOGRAMREQUIRED == null ? null : new CRYPTOGRAMREQUIREDCase(cRYPTOGRAMREQUIRED);
    }

    /**
     * This is EMV_DATA_REQUIRED case.
     * @param eMVDATAREQUIRED EMVDATAREQUIRED value for eMVDATAREQUIRED.
     * @return The EMVDATAREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromEMVDATAREQUIRED(EMVDATAREQUIRED eMVDATAREQUIRED) {
        return eMVDATAREQUIRED == null ? null : new EMVDATAREQUIREDCase(eMVDATAREQUIRED);
    }

    /**
     * This is NOT_ELIGIBLE_FOR_PNREF_PROCESSING case.
     * @param nOTELIGIBLEFORPNREFPROCESSING NOTELIGIBLEFORPNREFPROCESSING value for nOTELIGIBLEFORPNREFPROCESSING.
     * @return The NOTELIGIBLEFORPNREFPROCESSINGCase object.
     */
    public static UnprocessableErrorIssue fromNOTELIGIBLEFORPNREFPROCESSING(
            NOTELIGIBLEFORPNREFPROCESSING nOTELIGIBLEFORPNREFPROCESSING) {
        return nOTELIGIBLEFORPNREFPROCESSING == null ? null : new NOTELIGIBLEFORPNREFPROCESSINGCase(nOTELIGIBLEFORPNREFPROCESSING);
    }

    /**
     * This is NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING case.
     * @param nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING value for nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING.
     * @return The NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase object.
     */
    public static UnprocessableErrorIssue fromNOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING(
            NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING) {
        return nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING == null ? null : new NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase(nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING);
    }

    /**
     * This is PAYPAL_TRANSACTION_ID_NOT_FOUND case.
     * @param pAYPALTRANSACTIONIDNOTFOUND PAYPALTRANSACTIONIDNOTFOUND value for pAYPALTRANSACTIONIDNOTFOUND.
     * @return The PAYPALTRANSACTIONIDNOTFOUNDCase object.
     */
    public static UnprocessableErrorIssue fromPAYPALTRANSACTIONIDNOTFOUND(
            PAYPALTRANSACTIONIDNOTFOUND pAYPALTRANSACTIONIDNOTFOUND) {
        return pAYPALTRANSACTIONIDNOTFOUND == null ? null : new PAYPALTRANSACTIONIDNOTFOUNDCase(pAYPALTRANSACTIONIDNOTFOUND);
    }

    /**
     * This is PNREF_NOT_FOUND case.
     * @param pNREFNOTFOUND PNREFNOTFOUND value for pNREFNOTFOUND.
     * @return The PNREFNOTFOUNDCase object.
     */
    public static UnprocessableErrorIssue fromPNREFNOTFOUND(PNREFNOTFOUND pNREFNOTFOUND) {
        return pNREFNOTFOUND == null ? null : new PNREFNOTFOUNDCase(pNREFNOTFOUND);
    }

    /**
     * This is INVALID_SECURITY_CODE_LENGTH case.
     * @param iNVALIDSECURITYCODELENGTH INVALIDSECURITYCODELENGTH value for iNVALIDSECURITYCODELENGTH.
     * @return The INVALIDSECURITYCODELENGTHCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDSECURITYCODELENGTH(
            INVALIDSECURITYCODELENGTH iNVALIDSECURITYCODELENGTH) {
        return iNVALIDSECURITYCODELENGTH == null ? null : new INVALIDSECURITYCODELENGTHCase(iNVALIDSECURITYCODELENGTH);
    }

    /**
     * This is NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE case.
     * @param nOTENABLEDTOVAULTPAYMENTSOURCE NOTENABLEDTOVAULTPAYMENTSOURCE value for nOTENABLEDTOVAULTPAYMENTSOURCE.
     * @return The NOTENABLEDTOVAULTPAYMENTSOURCECase object.
     */
    public static UnprocessableErrorIssue fromNOTENABLEDTOVAULTPAYMENTSOURCE(
            NOTENABLEDTOVAULTPAYMENTSOURCE nOTENABLEDTOVAULTPAYMENTSOURCE) {
        return nOTENABLEDTOVAULTPAYMENTSOURCE == null ? null : new NOTENABLEDTOVAULTPAYMENTSOURCECase(nOTENABLEDTOVAULTPAYMENTSOURCE);
    }

    /**
     * This is REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT case.
     * @param rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT value for rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT.
     * @return The REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase object.
     */
    public static UnprocessableErrorIssue fromREQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT(
            REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT) {
        return rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT == null ? null : new REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase(rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT);
    }

    /**
     * This is TOKEN_EXPIRED case.
     * @param tOKENEXPIRED TOKENEXPIRED value for tOKENEXPIRED.
     * @return The TOKENEXPIREDCase object.
     */
    public static UnprocessableErrorIssue fromTOKENEXPIRED(TOKENEXPIRED tOKENEXPIRED) {
        return tOKENEXPIRED == null ? null : new TOKENEXPIREDCase(tOKENEXPIRED);
    }

    /**
     * This is INVALID_GOOGLE_PAY_TOKEN case.
     * @param iNVALIDGOOGLEPAYTOKEN INVALIDGOOGLEPAYTOKEN value for iNVALIDGOOGLEPAYTOKEN.
     * @return The INVALIDGOOGLEPAYTOKENCase object.
     */
    public static UnprocessableErrorIssue fromINVALIDGOOGLEPAYTOKEN(
            INVALIDGOOGLEPAYTOKEN iNVALIDGOOGLEPAYTOKEN) {
        return iNVALIDGOOGLEPAYTOKEN == null ? null : new INVALIDGOOGLEPAYTOKENCase(iNVALIDGOOGLEPAYTOKEN);
    }

    /**
     * This is GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH case.
     * @param gOOGLEPAYGATEWAYMERCHANTIDMISMATCH GOOGLEPAYGATEWAYMERCHANTIDMISMATCH value for gOOGLEPAYGATEWAYMERCHANTIDMISMATCH.
     * @return The GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase object.
     */
    public static UnprocessableErrorIssue fromGOOGLEPAYGATEWAYMERCHANTIDMISMATCH(
            GOOGLEPAYGATEWAYMERCHANTIDMISMATCH gOOGLEPAYGATEWAYMERCHANTIDMISMATCH) {
        return gOOGLEPAYGATEWAYMERCHANTIDMISMATCH == null ? null : new GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase(gOOGLEPAYGATEWAYMERCHANTIDMISMATCH);
    }

    /**
     * This is ONE_OF_PARAMETERS_REQUIRED case.
     * @param oNEOFPARAMETERSREQUIRED ONEOFPARAMETERSREQUIRED value for oNEOFPARAMETERSREQUIRED.
     * @return The ONEOFPARAMETERSREQUIREDCase object.
     */
    public static UnprocessableErrorIssue fromONEOFPARAMETERSREQUIRED(
            ONEOFPARAMETERSREQUIRED oNEOFPARAMETERSREQUIRED) {
        return oNEOFPARAMETERSREQUIRED == null ? null : new ONEOFPARAMETERSREQUIREDCase(oNEOFPARAMETERSREQUIRED);
    }

    /**
     * This is ALIAS_DECLINED_BY_PROCESSOR case.
     * @param aLIASDECLINEDBYPROCESSOR ALIASDECLINEDBYPROCESSOR value for aLIASDECLINEDBYPROCESSOR.
     * @return The ALIASDECLINEDBYPROCESSORCase object.
     */
    public static UnprocessableErrorIssue fromALIASDECLINEDBYPROCESSOR(
            ALIASDECLINEDBYPROCESSOR aLIASDECLINEDBYPROCESSOR) {
        return aLIASDECLINEDBYPROCESSOR == null ? null : new ALIASDECLINEDBYPROCESSORCase(aLIASDECLINEDBYPROCESSOR);
    }

    /**
     * This is BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER case.
     * @param bLIKONECLICKMISSINGREQUIREDPARAMETER BLIKONECLICKMISSINGREQUIREDPARAMETER value for bLIKONECLICKMISSINGREQUIREDPARAMETER.
     * @return The BLIKONECLICKMISSINGREQUIREDPARAMETERCase object.
     */
    public static UnprocessableErrorIssue fromBLIKONECLICKMISSINGREQUIREDPARAMETER(
            BLIKONECLICKMISSINGREQUIREDPARAMETER bLIKONECLICKMISSINGREQUIREDPARAMETER) {
        return bLIKONECLICKMISSINGREQUIREDPARAMETER == null ? null : new BLIKONECLICKMISSINGREQUIREDPARAMETERCase(bLIKONECLICKMISSINGREQUIREDPARAMETER);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R aMOUNTMISMATCH(AMOUNTMISMATCH aMOUNTMISMATCH);

        R cANNOTBENEGATIVE(CANNOTBENEGATIVE cANNOTBENEGATIVE);

        R cANNOTBEZEROORNEGATIVE(CANNOTBEZEROORNEGATIVE cANNOTBEZEROORNEGATIVE);

        R cARDEXPIRED(CARDEXPIRED cARDEXPIRED);

        R mISSINGPREVIOUSREFERENCE(MISSINGPREVIOUSREFERENCE mISSINGPREVIOUSREFERENCE);

        R mISSINGCRYPTOGRAM(MISSINGCRYPTOGRAM mISSINGCRYPTOGRAM);

        R cITYREQUIRED(CITYREQUIRED cITYREQUIRED);

        R dECIMALPRECISION(DECIMALPRECISION dECIMALPRECISION);

        R dONATIONITEMSNOTSUPPORTED(DONATIONITEMSNOTSUPPORTED dONATIONITEMSNOTSUPPORTED);

        R dUPLICATEREFERENCEID(DUPLICATEREFERENCEID dUPLICATEREFERENCEID);

        R iNVALIDCURRENCYCODE(INVALIDCURRENCYCODE iNVALIDCURRENCYCODE);

        R iNVALIDPAYERID(INVALIDPAYERID iNVALIDPAYERID);

        R iTEMTOTALMISMATCH(ITEMTOTALMISMATCH iTEMTOTALMISMATCH);

        R iTEMTOTALREQUIRED(ITEMTOTALREQUIRED iTEMTOTALREQUIRED);

        R mAXVALUEEXCEEDED(MAXVALUEEXCEEDED mAXVALUEEXCEEDED);

        R mISSINGPICKUPADDRESS(MISSINGPICKUPADDRESS mISSINGPICKUPADDRESS);

        R mULTICURRENCYORDER(MULTICURRENCYORDER mULTICURRENCYORDER);

        R mULTIPLEITEMCATEGORIES(MULTIPLEITEMCATEGORIES mULTIPLEITEMCATEGORIES);

        R mULTIPLESHIPPINGADDRESSNOTSUPPORTED(MULTIPLESHIPPINGADDRESSNOTSUPPORTED mULTIPLESHIPPINGADDRESSNOTSUPPORTED);

        R mULTIPLESHIPPINGTYPENOTSUPPORTED(MULTIPLESHIPPINGTYPENOTSUPPORTED mULTIPLESHIPPINGTYPENOTSUPPORTED);

        R pAYEEACCOUNTINVALID(PAYEEACCOUNTINVALID pAYEEACCOUNTINVALID);

        R pAYEEACCOUNTLOCKEDORCLOSED(PAYEEACCOUNTLOCKEDORCLOSED pAYEEACCOUNTLOCKEDORCLOSED);

        R pAYEEACCOUNTRESTRICTED(PAYEEACCOUNTRESTRICTED pAYEEACCOUNTRESTRICTED);

        R pAYEEPRICINGTIERIDNOTENABLED(PAYEEPRICINGTIERIDNOTENABLED pAYEEPRICINGTIERIDNOTENABLED);

        R iNVALIDPAYEEPRICINGTIERID(INVALIDPAYEEPRICINGTIERID iNVALIDPAYEEPRICINGTIERID);

        R pAYEEFXRATEIDEXPIRED(PAYEEFXRATEIDEXPIRED pAYEEFXRATEIDEXPIRED);

        R pAYEEFXRATEIDCURRENCYMISMATCH(PAYEEFXRATEIDCURRENCYMISMATCH pAYEEFXRATEIDCURRENCYMISMATCH);

        R iNVALIDFXRATEID(INVALIDFXRATEID iNVALIDFXRATEID);

        R pLATFORMFEESNOTSUPPORTED(PLATFORMFEESNOTSUPPORTED pLATFORMFEESNOTSUPPORTED);

        R iNVALIDPLATFORMFEESACCOUNT(INVALIDPLATFORMFEESACCOUNT iNVALIDPLATFORMFEESACCOUNT);

        R iNVALIDPLATFORMFEESAMOUNT(INVALIDPLATFORMFEESAMOUNT iNVALIDPLATFORMFEESAMOUNT);

        R pOSTALCODEREQUIRED(POSTALCODEREQUIRED pOSTALCODEREQUIRED);

        R rEFERENCEIDREQUIRED(REFERENCEIDREQUIRED rEFERENCEIDREQUIRED);

        R sHIPPINGOPTIONSNOTSUPPORTED(SHIPPINGOPTIONSNOTSUPPORTED sHIPPINGOPTIONSNOTSUPPORTED);

        R tAXTOTALMISMATCH(TAXTOTALMISMATCH tAXTOTALMISMATCH);

        R tAXTOTALREQUIRED(TAXTOTALREQUIRED tAXTOTALREQUIRED);

        R uNSUPPORTEDINTENT(UNSUPPORTEDINTENT uNSUPPORTEDINTENT);

        R uNSUPPORTEDPAYMENTINSTRUCTION(UNSUPPORTEDPAYMENTINSTRUCTION uNSUPPORTEDPAYMENTINSTRUCTION);

        R sHIPPINGTYPENOTSUPPORTEDFORCLIENT(SHIPPINGTYPENOTSUPPORTEDFORCLIENT sHIPPINGTYPENOTSUPPORTEDFORCLIENT);

        R uNSUPPORTEDSHIPPINGTYPE(UNSUPPORTEDSHIPPINGTYPE uNSUPPORTEDSHIPPINGTYPE);

        R sHIPPINGOPTIONNOTSELECTED(SHIPPINGOPTIONNOTSELECTED sHIPPINGOPTIONNOTSELECTED);

        R mULTIPLESHIPPINGOPTIONSELECTED(MULTIPLESHIPPINGOPTIONSELECTED mULTIPLESHIPPINGOPTIONSELECTED);

        R pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH(PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH);

        R aGREEMENTALREADYCANCELLED(AGREEMENTALREADYCANCELLED aGREEMENTALREADYCANCELLED);

        R bILLINGAGREEMENTNOTFOUND(BILLINGAGREEMENTNOTFOUND bILLINGAGREEMENTNOTFOUND);

        R cOMPLIANCEVIOLATION(COMPLIANCEVIOLATION cOMPLIANCEVIOLATION);

        R dOMESTICTRANSACTIONREQUIRED(DOMESTICTRANSACTIONREQUIRED dOMESTICTRANSACTIONREQUIRED);

        R dUPLICATEINVOICEID(DUPLICATEINVOICEID dUPLICATEINVOICEID);

        R iNSTRUMENTDECLINED(INSTRUMENTDECLINED iNSTRUMENTDECLINED);

        R mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED(MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED);

        R nOTENABLEDFORCARDPROCESSING(NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING);

        R pAYEEBLOCKEDTRANSACTION(PAYEEBLOCKEDTRANSACTION pAYEEBLOCKEDTRANSACTION);

        R pAYERACCOUNTLOCKEDORCLOSED(PAYERACCOUNTLOCKEDORCLOSED pAYERACCOUNTLOCKEDORCLOSED);

        R pAYERACCOUNTRESTRICTED(PAYERACCOUNTRESTRICTED pAYERACCOUNTRESTRICTED);

        R pAYERCANNOTPAY(PAYERCANNOTPAY pAYERCANNOTPAY);

        R tRANSACTIONBLOCKEDBYPAYEE(TRANSACTIONBLOCKEDBYPAYEE tRANSACTIONBLOCKEDBYPAYEE);

        R tRANSACTIONLIMITEXCEEDED(TRANSACTIONLIMITEXCEEDED tRANSACTIONLIMITEXCEEDED);

        R tRANSACTIONRECEIVINGLIMITEXCEEDED(TRANSACTIONRECEIVINGLIMITEXCEEDED tRANSACTIONRECEIVINGLIMITEXCEEDED);

        R tRANSACTIONREFUSED(TRANSACTIONREFUSED tRANSACTIONREFUSED);

        R aUTHCAPTURENOTENABLED(AUTHCAPTURENOTENABLED aUTHCAPTURENOTENABLED);

        R uNSUPPORTEDPROCESSINGINSTRUCTION(UNSUPPORTEDPROCESSINGINSTRUCTION uNSUPPORTEDPROCESSINGINSTRUCTION);

        R oRDERCOMPLETEONPAYMENTAPPROVAL(ORDERCOMPLETEONPAYMENTAPPROVAL oRDERCOMPLETEONPAYMENTAPPROVAL);

        R iNVALIDEXPIRYDATE(INVALIDEXPIRYDATE iNVALIDEXPIRYDATE);

        R iNCOMPATIBLEPARAMETERVALUE(INCOMPATIBLEPARAMETERVALUE iNCOMPATIBLEPARAMETERVALUE);

        R iNVALIDPREVIOUSTRANSACTIONREFERENCE(INVALIDPREVIOUSTRANSACTIONREFERENCE iNVALIDPREVIOUSTRANSACTIONREFERENCE);

        R pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK(PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK);

        R pREVIOUSTRANSACTIONREFERENCEVOIDED(PREVIOUSTRANSACTIONREFERENCEVOIDED pREVIOUSTRANSACTIONREFERENCEVOIDED);

        R pAYMENTSOURCEMISMATCH(PAYMENTSOURCEMISMATCH pAYMENTSOURCEMISMATCH);

        R mERCHANTINITIATEDWITHSECURITYCODE(MERCHANTINITIATEDWITHSECURITYCODE mERCHANTINITIATEDWITHSECURITYCODE);

        R mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS(MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS);

        R mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS(MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS);

        R pAYMENTSOURCEINFOCANNOTBEVERIFIED(PAYMENTSOURCEINFOCANNOTBEVERIFIED pAYMENTSOURCEINFOCANNOTBEVERIFIED);

        R pAYMENTSOURCEDECLINEDBYPROCESSOR(PAYMENTSOURCEDECLINEDBYPROCESSOR pAYMENTSOURCEDECLINEDBYPROCESSOR);

        R pAYMENTSOURCECANNOTBEUSED(PAYMENTSOURCECANNOTBEUSED pAYMENTSOURCECANNOTBEUSED);

        R nOTENABLEDFORAPPLEPAY(NOTENABLEDFORAPPLEPAY nOTENABLEDFORAPPLEPAY);

        R nOTENABLEDFORGOOGLEPAY(NOTENABLEDFORGOOGLEPAY nOTENABLEDFORGOOGLEPAY);

        R aPPLEPAYAMOUNTMISMATCH(APPLEPAYAMOUNTMISMATCH aPPLEPAYAMOUNTMISMATCH);

        R bILLINGADDRESSINVALID(BILLINGADDRESSINVALID bILLINGADDRESSINVALID);

        R sHIPPINGADDRESSINVALID(SHIPPINGADDRESSINVALID sHIPPINGADDRESSINVALID);

        R vAULTINSTRUCTIONDUPLICATED(VAULTINSTRUCTIONDUPLICATED vAULTINSTRUCTIONDUPLICATED);

        R vAULTINSTRUCTIONREQUIRED(VAULTINSTRUCTIONREQUIRED vAULTINSTRUCTIONREQUIRED);

        R mISMATCHEDVAULTIDTOPAYMENTSOURCE(MISMATCHEDVAULTIDTOPAYMENTSOURCE mISMATCHEDVAULTIDTOPAYMENTSOURCE);

        R cRYPTOGRAMREQUIRED(CRYPTOGRAMREQUIRED cRYPTOGRAMREQUIRED);

        R eMVDATAREQUIRED(EMVDATAREQUIRED eMVDATAREQUIRED);

        R nOTELIGIBLEFORPNREFPROCESSING(NOTELIGIBLEFORPNREFPROCESSING nOTELIGIBLEFORPNREFPROCESSING);

        R nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING(NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING);

        R pAYPALTRANSACTIONIDNOTFOUND(PAYPALTRANSACTIONIDNOTFOUND pAYPALTRANSACTIONIDNOTFOUND);

        R pNREFNOTFOUND(PNREFNOTFOUND pNREFNOTFOUND);

        R iNVALIDSECURITYCODELENGTH(INVALIDSECURITYCODELENGTH iNVALIDSECURITYCODELENGTH);

        R nOTENABLEDTOVAULTPAYMENTSOURCE(NOTENABLEDTOVAULTPAYMENTSOURCE nOTENABLEDTOVAULTPAYMENTSOURCE);

        R rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT(REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT);

        R tOKENEXPIRED(TOKENEXPIRED tOKENEXPIRED);

        R iNVALIDGOOGLEPAYTOKEN(INVALIDGOOGLEPAYTOKEN iNVALIDGOOGLEPAYTOKEN);

        R gOOGLEPAYGATEWAYMERCHANTIDMISMATCH(GOOGLEPAYGATEWAYMERCHANTIDMISMATCH gOOGLEPAYGATEWAYMERCHANTIDMISMATCH);

        R oNEOFPARAMETERSREQUIRED(ONEOFPARAMETERSREQUIRED oNEOFPARAMETERSREQUIRED);

        R aLIASDECLINEDBYPROCESSOR(ALIASDECLINEDBYPROCESSOR aLIASDECLINEDBYPROCESSOR);

        R bLIKONECLICKMISSINGREQUIREDPARAMETER(BLIKONECLICKMISSINGREQUIREDPARAMETER bLIKONECLICKMISSINGREQUIREDPARAMETER);
    }

    /**
     * This is a implementation class for AMOUNTMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "AMOUNTMISMATCH")
    private static class AMOUNTMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private AMOUNTMISMATCH aMOUNTMISMATCH;

        AMOUNTMISMATCHCase(AMOUNTMISMATCH aMOUNTMISMATCH) {
            this.aMOUNTMISMATCH = aMOUNTMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.aMOUNTMISMATCH(this.aMOUNTMISMATCH);
        }

        @JsonCreator
        private AMOUNTMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.aMOUNTMISMATCH = ApiHelper.deserialize(jsonNode,
                AMOUNTMISMATCH.class);
        }

        @Override
        public String toString() {
            return aMOUNTMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for CANNOTBENEGATIVECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CANNOTBENEGATIVE")
    private static class CANNOTBENEGATIVECase extends UnprocessableErrorIssue {

        @JsonValue
        private CANNOTBENEGATIVE cANNOTBENEGATIVE;

        CANNOTBENEGATIVECase(CANNOTBENEGATIVE cANNOTBENEGATIVE) {
            this.cANNOTBENEGATIVE = cANNOTBENEGATIVE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cANNOTBENEGATIVE(this.cANNOTBENEGATIVE);
        }

        @JsonCreator
        private CANNOTBENEGATIVECase(JsonNode jsonNode) throws IOException {
            this.cANNOTBENEGATIVE = ApiHelper.deserialize(jsonNode,
                CANNOTBENEGATIVE.class);
        }

        @Override
        public String toString() {
            return cANNOTBENEGATIVE.toString();
        }
    }

    /**
     * This is a implementation class for CANNOTBEZEROORNEGATIVECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CANNOTBEZEROORNEGATIVE")
    private static class CANNOTBEZEROORNEGATIVECase extends UnprocessableErrorIssue {

        @JsonValue
        private CANNOTBEZEROORNEGATIVE cANNOTBEZEROORNEGATIVE;

        CANNOTBEZEROORNEGATIVECase(CANNOTBEZEROORNEGATIVE cANNOTBEZEROORNEGATIVE) {
            this.cANNOTBEZEROORNEGATIVE = cANNOTBEZEROORNEGATIVE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cANNOTBEZEROORNEGATIVE(this.cANNOTBEZEROORNEGATIVE);
        }

        @JsonCreator
        private CANNOTBEZEROORNEGATIVECase(JsonNode jsonNode) throws IOException {
            this.cANNOTBEZEROORNEGATIVE = ApiHelper.deserialize(jsonNode,
                CANNOTBEZEROORNEGATIVE.class);
        }

        @Override
        public String toString() {
            return cANNOTBEZEROORNEGATIVE.toString();
        }
    }

    /**
     * This is a implementation class for CARDEXPIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CARDEXPIRED")
    private static class CARDEXPIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private CARDEXPIRED cARDEXPIRED;

        CARDEXPIREDCase(CARDEXPIRED cARDEXPIRED) {
            this.cARDEXPIRED = cARDEXPIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cARDEXPIRED(this.cARDEXPIRED);
        }

        @JsonCreator
        private CARDEXPIREDCase(JsonNode jsonNode) throws IOException {
            this.cARDEXPIRED = ApiHelper.deserialize(jsonNode,
                CARDEXPIRED.class);
        }

        @Override
        public String toString() {
            return cARDEXPIRED.toString();
        }
    }

    /**
     * This is a implementation class for MISSINGPREVIOUSREFERENCECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MISSINGPREVIOUSREFERENCE")
    private static class MISSINGPREVIOUSREFERENCECase extends UnprocessableErrorIssue {

        @JsonValue
        private MISSINGPREVIOUSREFERENCE mISSINGPREVIOUSREFERENCE;

        MISSINGPREVIOUSREFERENCECase(MISSINGPREVIOUSREFERENCE mISSINGPREVIOUSREFERENCE) {
            this.mISSINGPREVIOUSREFERENCE = mISSINGPREVIOUSREFERENCE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mISSINGPREVIOUSREFERENCE(this.mISSINGPREVIOUSREFERENCE);
        }

        @JsonCreator
        private MISSINGPREVIOUSREFERENCECase(JsonNode jsonNode) throws IOException {
            this.mISSINGPREVIOUSREFERENCE = ApiHelper.deserialize(jsonNode,
                MISSINGPREVIOUSREFERENCE.class);
        }

        @Override
        public String toString() {
            return mISSINGPREVIOUSREFERENCE.toString();
        }
    }

    /**
     * This is a implementation class for MISSINGCRYPTOGRAMCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MISSINGCRYPTOGRAM")
    private static class MISSINGCRYPTOGRAMCase extends UnprocessableErrorIssue {

        @JsonValue
        private MISSINGCRYPTOGRAM mISSINGCRYPTOGRAM;

        MISSINGCRYPTOGRAMCase(MISSINGCRYPTOGRAM mISSINGCRYPTOGRAM) {
            this.mISSINGCRYPTOGRAM = mISSINGCRYPTOGRAM;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mISSINGCRYPTOGRAM(this.mISSINGCRYPTOGRAM);
        }

        @JsonCreator
        private MISSINGCRYPTOGRAMCase(JsonNode jsonNode) throws IOException {
            this.mISSINGCRYPTOGRAM = ApiHelper.deserialize(jsonNode,
                MISSINGCRYPTOGRAM.class);
        }

        @Override
        public String toString() {
            return mISSINGCRYPTOGRAM.toString();
        }
    }

    /**
     * This is a implementation class for CITYREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CITYREQUIRED")
    private static class CITYREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private CITYREQUIRED cITYREQUIRED;

        CITYREQUIREDCase(CITYREQUIRED cITYREQUIRED) {
            this.cITYREQUIRED = cITYREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cITYREQUIRED(this.cITYREQUIRED);
        }

        @JsonCreator
        private CITYREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.cITYREQUIRED = ApiHelper.deserialize(jsonNode,
                CITYREQUIRED.class);
        }

        @Override
        public String toString() {
            return cITYREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for DECIMALPRECISIONCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "DECIMALPRECISION")
    private static class DECIMALPRECISIONCase extends UnprocessableErrorIssue {

        @JsonValue
        private DECIMALPRECISION dECIMALPRECISION;

        DECIMALPRECISIONCase(DECIMALPRECISION dECIMALPRECISION) {
            this.dECIMALPRECISION = dECIMALPRECISION;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dECIMALPRECISION(this.dECIMALPRECISION);
        }

        @JsonCreator
        private DECIMALPRECISIONCase(JsonNode jsonNode) throws IOException {
            this.dECIMALPRECISION = ApiHelper.deserialize(jsonNode,
                DECIMALPRECISION.class);
        }

        @Override
        public String toString() {
            return dECIMALPRECISION.toString();
        }
    }

    /**
     * This is a implementation class for DONATIONITEMSNOTSUPPORTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "DONATIONITEMSNOTSUPPORTED")
    private static class DONATIONITEMSNOTSUPPORTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private DONATIONITEMSNOTSUPPORTED dONATIONITEMSNOTSUPPORTED;

        DONATIONITEMSNOTSUPPORTEDCase(DONATIONITEMSNOTSUPPORTED dONATIONITEMSNOTSUPPORTED) {
            this.dONATIONITEMSNOTSUPPORTED = dONATIONITEMSNOTSUPPORTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dONATIONITEMSNOTSUPPORTED(this.dONATIONITEMSNOTSUPPORTED);
        }

        @JsonCreator
        private DONATIONITEMSNOTSUPPORTEDCase(JsonNode jsonNode) throws IOException {
            this.dONATIONITEMSNOTSUPPORTED = ApiHelper.deserialize(jsonNode,
                DONATIONITEMSNOTSUPPORTED.class);
        }

        @Override
        public String toString() {
            return dONATIONITEMSNOTSUPPORTED.toString();
        }
    }

    /**
     * This is a implementation class for DUPLICATEREFERENCEIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "DUPLICATEREFERENCEID")
    private static class DUPLICATEREFERENCEIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private DUPLICATEREFERENCEID dUPLICATEREFERENCEID;

        DUPLICATEREFERENCEIDCase(DUPLICATEREFERENCEID dUPLICATEREFERENCEID) {
            this.dUPLICATEREFERENCEID = dUPLICATEREFERENCEID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dUPLICATEREFERENCEID(this.dUPLICATEREFERENCEID);
        }

        @JsonCreator
        private DUPLICATEREFERENCEIDCase(JsonNode jsonNode) throws IOException {
            this.dUPLICATEREFERENCEID = ApiHelper.deserialize(jsonNode,
                DUPLICATEREFERENCEID.class);
        }

        @Override
        public String toString() {
            return dUPLICATEREFERENCEID.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDCURRENCYCODECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDCURRENCYCODE")
    private static class INVALIDCURRENCYCODECase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDCURRENCYCODE iNVALIDCURRENCYCODE;

        INVALIDCURRENCYCODECase(INVALIDCURRENCYCODE iNVALIDCURRENCYCODE) {
            this.iNVALIDCURRENCYCODE = iNVALIDCURRENCYCODE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDCURRENCYCODE(this.iNVALIDCURRENCYCODE);
        }

        @JsonCreator
        private INVALIDCURRENCYCODECase(JsonNode jsonNode) throws IOException {
            this.iNVALIDCURRENCYCODE = ApiHelper.deserialize(jsonNode,
                INVALIDCURRENCYCODE.class);
        }

        @Override
        public String toString() {
            return iNVALIDCURRENCYCODE.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDPAYERIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDPAYERID")
    private static class INVALIDPAYERIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDPAYERID iNVALIDPAYERID;

        INVALIDPAYERIDCase(INVALIDPAYERID iNVALIDPAYERID) {
            this.iNVALIDPAYERID = iNVALIDPAYERID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDPAYERID(this.iNVALIDPAYERID);
        }

        @JsonCreator
        private INVALIDPAYERIDCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDPAYERID = ApiHelper.deserialize(jsonNode,
                INVALIDPAYERID.class);
        }

        @Override
        public String toString() {
            return iNVALIDPAYERID.toString();
        }
    }

    /**
     * This is a implementation class for ITEMTOTALMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ITEMTOTALMISMATCH")
    private static class ITEMTOTALMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private ITEMTOTALMISMATCH iTEMTOTALMISMATCH;

        ITEMTOTALMISMATCHCase(ITEMTOTALMISMATCH iTEMTOTALMISMATCH) {
            this.iTEMTOTALMISMATCH = iTEMTOTALMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iTEMTOTALMISMATCH(this.iTEMTOTALMISMATCH);
        }

        @JsonCreator
        private ITEMTOTALMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.iTEMTOTALMISMATCH = ApiHelper.deserialize(jsonNode,
                ITEMTOTALMISMATCH.class);
        }

        @Override
        public String toString() {
            return iTEMTOTALMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for ITEMTOTALREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ITEMTOTALREQUIRED")
    private static class ITEMTOTALREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private ITEMTOTALREQUIRED iTEMTOTALREQUIRED;

        ITEMTOTALREQUIREDCase(ITEMTOTALREQUIRED iTEMTOTALREQUIRED) {
            this.iTEMTOTALREQUIRED = iTEMTOTALREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iTEMTOTALREQUIRED(this.iTEMTOTALREQUIRED);
        }

        @JsonCreator
        private ITEMTOTALREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.iTEMTOTALREQUIRED = ApiHelper.deserialize(jsonNode,
                ITEMTOTALREQUIRED.class);
        }

        @Override
        public String toString() {
            return iTEMTOTALREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for MAXVALUEEXCEEDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MAXVALUEEXCEEDED")
    private static class MAXVALUEEXCEEDEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private MAXVALUEEXCEEDED mAXVALUEEXCEEDED;

        MAXVALUEEXCEEDEDCase(MAXVALUEEXCEEDED mAXVALUEEXCEEDED) {
            this.mAXVALUEEXCEEDED = mAXVALUEEXCEEDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mAXVALUEEXCEEDED(this.mAXVALUEEXCEEDED);
        }

        @JsonCreator
        private MAXVALUEEXCEEDEDCase(JsonNode jsonNode) throws IOException {
            this.mAXVALUEEXCEEDED = ApiHelper.deserialize(jsonNode,
                MAXVALUEEXCEEDED.class);
        }

        @Override
        public String toString() {
            return mAXVALUEEXCEEDED.toString();
        }
    }

    /**
     * This is a implementation class for MISSINGPICKUPADDRESSCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MISSINGPICKUPADDRESS")
    private static class MISSINGPICKUPADDRESSCase extends UnprocessableErrorIssue {

        @JsonValue
        private MISSINGPICKUPADDRESS mISSINGPICKUPADDRESS;

        MISSINGPICKUPADDRESSCase(MISSINGPICKUPADDRESS mISSINGPICKUPADDRESS) {
            this.mISSINGPICKUPADDRESS = mISSINGPICKUPADDRESS;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mISSINGPICKUPADDRESS(this.mISSINGPICKUPADDRESS);
        }

        @JsonCreator
        private MISSINGPICKUPADDRESSCase(JsonNode jsonNode) throws IOException {
            this.mISSINGPICKUPADDRESS = ApiHelper.deserialize(jsonNode,
                MISSINGPICKUPADDRESS.class);
        }

        @Override
        public String toString() {
            return mISSINGPICKUPADDRESS.toString();
        }
    }

    /**
     * This is a implementation class for MULTICURRENCYORDERCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MULTICURRENCYORDER")
    private static class MULTICURRENCYORDERCase extends UnprocessableErrorIssue {

        @JsonValue
        private MULTICURRENCYORDER mULTICURRENCYORDER;

        MULTICURRENCYORDERCase(MULTICURRENCYORDER mULTICURRENCYORDER) {
            this.mULTICURRENCYORDER = mULTICURRENCYORDER;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mULTICURRENCYORDER(this.mULTICURRENCYORDER);
        }

        @JsonCreator
        private MULTICURRENCYORDERCase(JsonNode jsonNode) throws IOException {
            this.mULTICURRENCYORDER = ApiHelper.deserialize(jsonNode,
                MULTICURRENCYORDER.class);
        }

        @Override
        public String toString() {
            return mULTICURRENCYORDER.toString();
        }
    }

    /**
     * This is a implementation class for MULTIPLEITEMCATEGORIESCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MULTIPLEITEMCATEGORIES")
    private static class MULTIPLEITEMCATEGORIESCase extends UnprocessableErrorIssue {

        @JsonValue
        private MULTIPLEITEMCATEGORIES mULTIPLEITEMCATEGORIES;

        MULTIPLEITEMCATEGORIESCase(MULTIPLEITEMCATEGORIES mULTIPLEITEMCATEGORIES) {
            this.mULTIPLEITEMCATEGORIES = mULTIPLEITEMCATEGORIES;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mULTIPLEITEMCATEGORIES(this.mULTIPLEITEMCATEGORIES);
        }

        @JsonCreator
        private MULTIPLEITEMCATEGORIESCase(JsonNode jsonNode) throws IOException {
            this.mULTIPLEITEMCATEGORIES = ApiHelper.deserialize(jsonNode,
                MULTIPLEITEMCATEGORIES.class);
        }

        @Override
        public String toString() {
            return mULTIPLEITEMCATEGORIES.toString();
        }
    }

    /**
     * This is a implementation class for MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MULTIPLESHIPPINGADDRESSNOTSUPPORTED")
    private static class MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private MULTIPLESHIPPINGADDRESSNOTSUPPORTED mULTIPLESHIPPINGADDRESSNOTSUPPORTED;

        MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase(MULTIPLESHIPPINGADDRESSNOTSUPPORTED mULTIPLESHIPPINGADDRESSNOTSUPPORTED) {
            this.mULTIPLESHIPPINGADDRESSNOTSUPPORTED = mULTIPLESHIPPINGADDRESSNOTSUPPORTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mULTIPLESHIPPINGADDRESSNOTSUPPORTED(this.mULTIPLESHIPPINGADDRESSNOTSUPPORTED);
        }

        @JsonCreator
        private MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase(JsonNode jsonNode) throws IOException {
            this.mULTIPLESHIPPINGADDRESSNOTSUPPORTED = ApiHelper.deserialize(jsonNode,
                MULTIPLESHIPPINGADDRESSNOTSUPPORTED.class);
        }

        @Override
        public String toString() {
            return mULTIPLESHIPPINGADDRESSNOTSUPPORTED.toString();
        }
    }

    /**
     * This is a implementation class for MULTIPLESHIPPINGTYPENOTSUPPORTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MULTIPLESHIPPINGTYPENOTSUPPORTED")
    private static class MULTIPLESHIPPINGTYPENOTSUPPORTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private MULTIPLESHIPPINGTYPENOTSUPPORTED mULTIPLESHIPPINGTYPENOTSUPPORTED;

        MULTIPLESHIPPINGTYPENOTSUPPORTEDCase(MULTIPLESHIPPINGTYPENOTSUPPORTED mULTIPLESHIPPINGTYPENOTSUPPORTED) {
            this.mULTIPLESHIPPINGTYPENOTSUPPORTED = mULTIPLESHIPPINGTYPENOTSUPPORTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mULTIPLESHIPPINGTYPENOTSUPPORTED(this.mULTIPLESHIPPINGTYPENOTSUPPORTED);
        }

        @JsonCreator
        private MULTIPLESHIPPINGTYPENOTSUPPORTEDCase(JsonNode jsonNode) throws IOException {
            this.mULTIPLESHIPPINGTYPENOTSUPPORTED = ApiHelper.deserialize(jsonNode,
                MULTIPLESHIPPINGTYPENOTSUPPORTED.class);
        }

        @Override
        public String toString() {
            return mULTIPLESHIPPINGTYPENOTSUPPORTED.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEACCOUNTINVALIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEACCOUNTINVALID")
    private static class PAYEEACCOUNTINVALIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEACCOUNTINVALID pAYEEACCOUNTINVALID;

        PAYEEACCOUNTINVALIDCase(PAYEEACCOUNTINVALID pAYEEACCOUNTINVALID) {
            this.pAYEEACCOUNTINVALID = pAYEEACCOUNTINVALID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEACCOUNTINVALID(this.pAYEEACCOUNTINVALID);
        }

        @JsonCreator
        private PAYEEACCOUNTINVALIDCase(JsonNode jsonNode) throws IOException {
            this.pAYEEACCOUNTINVALID = ApiHelper.deserialize(jsonNode,
                PAYEEACCOUNTINVALID.class);
        }

        @Override
        public String toString() {
            return pAYEEACCOUNTINVALID.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEACCOUNTLOCKEDORCLOSEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEACCOUNTLOCKEDORCLOSED")
    private static class PAYEEACCOUNTLOCKEDORCLOSEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEACCOUNTLOCKEDORCLOSED pAYEEACCOUNTLOCKEDORCLOSED;

        PAYEEACCOUNTLOCKEDORCLOSEDCase(PAYEEACCOUNTLOCKEDORCLOSED pAYEEACCOUNTLOCKEDORCLOSED) {
            this.pAYEEACCOUNTLOCKEDORCLOSED = pAYEEACCOUNTLOCKEDORCLOSED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEACCOUNTLOCKEDORCLOSED(this.pAYEEACCOUNTLOCKEDORCLOSED);
        }

        @JsonCreator
        private PAYEEACCOUNTLOCKEDORCLOSEDCase(JsonNode jsonNode) throws IOException {
            this.pAYEEACCOUNTLOCKEDORCLOSED = ApiHelper.deserialize(jsonNode,
                PAYEEACCOUNTLOCKEDORCLOSED.class);
        }

        @Override
        public String toString() {
            return pAYEEACCOUNTLOCKEDORCLOSED.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEACCOUNTRESTRICTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEACCOUNTRESTRICTED")
    private static class PAYEEACCOUNTRESTRICTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEACCOUNTRESTRICTED pAYEEACCOUNTRESTRICTED;

        PAYEEACCOUNTRESTRICTEDCase(PAYEEACCOUNTRESTRICTED pAYEEACCOUNTRESTRICTED) {
            this.pAYEEACCOUNTRESTRICTED = pAYEEACCOUNTRESTRICTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEACCOUNTRESTRICTED(this.pAYEEACCOUNTRESTRICTED);
        }

        @JsonCreator
        private PAYEEACCOUNTRESTRICTEDCase(JsonNode jsonNode) throws IOException {
            this.pAYEEACCOUNTRESTRICTED = ApiHelper.deserialize(jsonNode,
                PAYEEACCOUNTRESTRICTED.class);
        }

        @Override
        public String toString() {
            return pAYEEACCOUNTRESTRICTED.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEPRICINGTIERIDNOTENABLEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEPRICINGTIERIDNOTENABLED")
    private static class PAYEEPRICINGTIERIDNOTENABLEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEPRICINGTIERIDNOTENABLED pAYEEPRICINGTIERIDNOTENABLED;

        PAYEEPRICINGTIERIDNOTENABLEDCase(PAYEEPRICINGTIERIDNOTENABLED pAYEEPRICINGTIERIDNOTENABLED) {
            this.pAYEEPRICINGTIERIDNOTENABLED = pAYEEPRICINGTIERIDNOTENABLED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEPRICINGTIERIDNOTENABLED(this.pAYEEPRICINGTIERIDNOTENABLED);
        }

        @JsonCreator
        private PAYEEPRICINGTIERIDNOTENABLEDCase(JsonNode jsonNode) throws IOException {
            this.pAYEEPRICINGTIERIDNOTENABLED = ApiHelper.deserialize(jsonNode,
                PAYEEPRICINGTIERIDNOTENABLED.class);
        }

        @Override
        public String toString() {
            return pAYEEPRICINGTIERIDNOTENABLED.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDPAYEEPRICINGTIERIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDPAYEEPRICINGTIERID")
    private static class INVALIDPAYEEPRICINGTIERIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDPAYEEPRICINGTIERID iNVALIDPAYEEPRICINGTIERID;

        INVALIDPAYEEPRICINGTIERIDCase(INVALIDPAYEEPRICINGTIERID iNVALIDPAYEEPRICINGTIERID) {
            this.iNVALIDPAYEEPRICINGTIERID = iNVALIDPAYEEPRICINGTIERID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDPAYEEPRICINGTIERID(this.iNVALIDPAYEEPRICINGTIERID);
        }

        @JsonCreator
        private INVALIDPAYEEPRICINGTIERIDCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDPAYEEPRICINGTIERID = ApiHelper.deserialize(jsonNode,
                INVALIDPAYEEPRICINGTIERID.class);
        }

        @Override
        public String toString() {
            return iNVALIDPAYEEPRICINGTIERID.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEFXRATEIDEXPIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEFXRATEIDEXPIRED")
    private static class PAYEEFXRATEIDEXPIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEFXRATEIDEXPIRED pAYEEFXRATEIDEXPIRED;

        PAYEEFXRATEIDEXPIREDCase(PAYEEFXRATEIDEXPIRED pAYEEFXRATEIDEXPIRED) {
            this.pAYEEFXRATEIDEXPIRED = pAYEEFXRATEIDEXPIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEFXRATEIDEXPIRED(this.pAYEEFXRATEIDEXPIRED);
        }

        @JsonCreator
        private PAYEEFXRATEIDEXPIREDCase(JsonNode jsonNode) throws IOException {
            this.pAYEEFXRATEIDEXPIRED = ApiHelper.deserialize(jsonNode,
                PAYEEFXRATEIDEXPIRED.class);
        }

        @Override
        public String toString() {
            return pAYEEFXRATEIDEXPIRED.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEFXRATEIDCURRENCYMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEFXRATEIDCURRENCYMISMATCH")
    private static class PAYEEFXRATEIDCURRENCYMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEFXRATEIDCURRENCYMISMATCH pAYEEFXRATEIDCURRENCYMISMATCH;

        PAYEEFXRATEIDCURRENCYMISMATCHCase(PAYEEFXRATEIDCURRENCYMISMATCH pAYEEFXRATEIDCURRENCYMISMATCH) {
            this.pAYEEFXRATEIDCURRENCYMISMATCH = pAYEEFXRATEIDCURRENCYMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEFXRATEIDCURRENCYMISMATCH(this.pAYEEFXRATEIDCURRENCYMISMATCH);
        }

        @JsonCreator
        private PAYEEFXRATEIDCURRENCYMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.pAYEEFXRATEIDCURRENCYMISMATCH = ApiHelper.deserialize(jsonNode,
                PAYEEFXRATEIDCURRENCYMISMATCH.class);
        }

        @Override
        public String toString() {
            return pAYEEFXRATEIDCURRENCYMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDFXRATEIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDFXRATEID")
    private static class INVALIDFXRATEIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDFXRATEID iNVALIDFXRATEID;

        INVALIDFXRATEIDCase(INVALIDFXRATEID iNVALIDFXRATEID) {
            this.iNVALIDFXRATEID = iNVALIDFXRATEID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDFXRATEID(this.iNVALIDFXRATEID);
        }

        @JsonCreator
        private INVALIDFXRATEIDCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDFXRATEID = ApiHelper.deserialize(jsonNode,
                INVALIDFXRATEID.class);
        }

        @Override
        public String toString() {
            return iNVALIDFXRATEID.toString();
        }
    }

    /**
     * This is a implementation class for PLATFORMFEESNOTSUPPORTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PLATFORMFEESNOTSUPPORTED")
    private static class PLATFORMFEESNOTSUPPORTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PLATFORMFEESNOTSUPPORTED pLATFORMFEESNOTSUPPORTED;

        PLATFORMFEESNOTSUPPORTEDCase(PLATFORMFEESNOTSUPPORTED pLATFORMFEESNOTSUPPORTED) {
            this.pLATFORMFEESNOTSUPPORTED = pLATFORMFEESNOTSUPPORTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pLATFORMFEESNOTSUPPORTED(this.pLATFORMFEESNOTSUPPORTED);
        }

        @JsonCreator
        private PLATFORMFEESNOTSUPPORTEDCase(JsonNode jsonNode) throws IOException {
            this.pLATFORMFEESNOTSUPPORTED = ApiHelper.deserialize(jsonNode,
                PLATFORMFEESNOTSUPPORTED.class);
        }

        @Override
        public String toString() {
            return pLATFORMFEESNOTSUPPORTED.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDPLATFORMFEESACCOUNTCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDPLATFORMFEESACCOUNT")
    private static class INVALIDPLATFORMFEESACCOUNTCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDPLATFORMFEESACCOUNT iNVALIDPLATFORMFEESACCOUNT;

        INVALIDPLATFORMFEESACCOUNTCase(INVALIDPLATFORMFEESACCOUNT iNVALIDPLATFORMFEESACCOUNT) {
            this.iNVALIDPLATFORMFEESACCOUNT = iNVALIDPLATFORMFEESACCOUNT;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDPLATFORMFEESACCOUNT(this.iNVALIDPLATFORMFEESACCOUNT);
        }

        @JsonCreator
        private INVALIDPLATFORMFEESACCOUNTCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDPLATFORMFEESACCOUNT = ApiHelper.deserialize(jsonNode,
                INVALIDPLATFORMFEESACCOUNT.class);
        }

        @Override
        public String toString() {
            return iNVALIDPLATFORMFEESACCOUNT.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDPLATFORMFEESAMOUNTCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDPLATFORMFEESAMOUNT")
    private static class INVALIDPLATFORMFEESAMOUNTCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDPLATFORMFEESAMOUNT iNVALIDPLATFORMFEESAMOUNT;

        INVALIDPLATFORMFEESAMOUNTCase(INVALIDPLATFORMFEESAMOUNT iNVALIDPLATFORMFEESAMOUNT) {
            this.iNVALIDPLATFORMFEESAMOUNT = iNVALIDPLATFORMFEESAMOUNT;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDPLATFORMFEESAMOUNT(this.iNVALIDPLATFORMFEESAMOUNT);
        }

        @JsonCreator
        private INVALIDPLATFORMFEESAMOUNTCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDPLATFORMFEESAMOUNT = ApiHelper.deserialize(jsonNode,
                INVALIDPLATFORMFEESAMOUNT.class);
        }

        @Override
        public String toString() {
            return iNVALIDPLATFORMFEESAMOUNT.toString();
        }
    }

    /**
     * This is a implementation class for POSTALCODEREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "POSTALCODEREQUIRED")
    private static class POSTALCODEREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private POSTALCODEREQUIRED pOSTALCODEREQUIRED;

        POSTALCODEREQUIREDCase(POSTALCODEREQUIRED pOSTALCODEREQUIRED) {
            this.pOSTALCODEREQUIRED = pOSTALCODEREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pOSTALCODEREQUIRED(this.pOSTALCODEREQUIRED);
        }

        @JsonCreator
        private POSTALCODEREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.pOSTALCODEREQUIRED = ApiHelper.deserialize(jsonNode,
                POSTALCODEREQUIRED.class);
        }

        @Override
        public String toString() {
            return pOSTALCODEREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for REFERENCEIDREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "REFERENCEIDREQUIRED")
    private static class REFERENCEIDREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private REFERENCEIDREQUIRED rEFERENCEIDREQUIRED;

        REFERENCEIDREQUIREDCase(REFERENCEIDREQUIRED rEFERENCEIDREQUIRED) {
            this.rEFERENCEIDREQUIRED = rEFERENCEIDREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.rEFERENCEIDREQUIRED(this.rEFERENCEIDREQUIRED);
        }

        @JsonCreator
        private REFERENCEIDREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.rEFERENCEIDREQUIRED = ApiHelper.deserialize(jsonNode,
                REFERENCEIDREQUIRED.class);
        }

        @Override
        public String toString() {
            return rEFERENCEIDREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for SHIPPINGOPTIONSNOTSUPPORTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SHIPPINGOPTIONSNOTSUPPORTED")
    private static class SHIPPINGOPTIONSNOTSUPPORTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private SHIPPINGOPTIONSNOTSUPPORTED sHIPPINGOPTIONSNOTSUPPORTED;

        SHIPPINGOPTIONSNOTSUPPORTEDCase(SHIPPINGOPTIONSNOTSUPPORTED sHIPPINGOPTIONSNOTSUPPORTED) {
            this.sHIPPINGOPTIONSNOTSUPPORTED = sHIPPINGOPTIONSNOTSUPPORTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.sHIPPINGOPTIONSNOTSUPPORTED(this.sHIPPINGOPTIONSNOTSUPPORTED);
        }

        @JsonCreator
        private SHIPPINGOPTIONSNOTSUPPORTEDCase(JsonNode jsonNode) throws IOException {
            this.sHIPPINGOPTIONSNOTSUPPORTED = ApiHelper.deserialize(jsonNode,
                SHIPPINGOPTIONSNOTSUPPORTED.class);
        }

        @Override
        public String toString() {
            return sHIPPINGOPTIONSNOTSUPPORTED.toString();
        }
    }

    /**
     * This is a implementation class for TAXTOTALMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TAXTOTALMISMATCH")
    private static class TAXTOTALMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private TAXTOTALMISMATCH tAXTOTALMISMATCH;

        TAXTOTALMISMATCHCase(TAXTOTALMISMATCH tAXTOTALMISMATCH) {
            this.tAXTOTALMISMATCH = tAXTOTALMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tAXTOTALMISMATCH(this.tAXTOTALMISMATCH);
        }

        @JsonCreator
        private TAXTOTALMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.tAXTOTALMISMATCH = ApiHelper.deserialize(jsonNode,
                TAXTOTALMISMATCH.class);
        }

        @Override
        public String toString() {
            return tAXTOTALMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for TAXTOTALREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TAXTOTALREQUIRED")
    private static class TAXTOTALREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private TAXTOTALREQUIRED tAXTOTALREQUIRED;

        TAXTOTALREQUIREDCase(TAXTOTALREQUIRED tAXTOTALREQUIRED) {
            this.tAXTOTALREQUIRED = tAXTOTALREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tAXTOTALREQUIRED(this.tAXTOTALREQUIRED);
        }

        @JsonCreator
        private TAXTOTALREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.tAXTOTALREQUIRED = ApiHelper.deserialize(jsonNode,
                TAXTOTALREQUIRED.class);
        }

        @Override
        public String toString() {
            return tAXTOTALREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for UNSUPPORTEDINTENTCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "UNSUPPORTEDINTENT")
    private static class UNSUPPORTEDINTENTCase extends UnprocessableErrorIssue {

        @JsonValue
        private UNSUPPORTEDINTENT uNSUPPORTEDINTENT;

        UNSUPPORTEDINTENTCase(UNSUPPORTEDINTENT uNSUPPORTEDINTENT) {
            this.uNSUPPORTEDINTENT = uNSUPPORTEDINTENT;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.uNSUPPORTEDINTENT(this.uNSUPPORTEDINTENT);
        }

        @JsonCreator
        private UNSUPPORTEDINTENTCase(JsonNode jsonNode) throws IOException {
            this.uNSUPPORTEDINTENT = ApiHelper.deserialize(jsonNode,
                UNSUPPORTEDINTENT.class);
        }

        @Override
        public String toString() {
            return uNSUPPORTEDINTENT.toString();
        }
    }

    /**
     * This is a implementation class for UNSUPPORTEDPAYMENTINSTRUCTIONCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "UNSUPPORTEDPAYMENTINSTRUCTION")
    private static class UNSUPPORTEDPAYMENTINSTRUCTIONCase extends UnprocessableErrorIssue {

        @JsonValue
        private UNSUPPORTEDPAYMENTINSTRUCTION uNSUPPORTEDPAYMENTINSTRUCTION;

        UNSUPPORTEDPAYMENTINSTRUCTIONCase(UNSUPPORTEDPAYMENTINSTRUCTION uNSUPPORTEDPAYMENTINSTRUCTION) {
            this.uNSUPPORTEDPAYMENTINSTRUCTION = uNSUPPORTEDPAYMENTINSTRUCTION;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.uNSUPPORTEDPAYMENTINSTRUCTION(this.uNSUPPORTEDPAYMENTINSTRUCTION);
        }

        @JsonCreator
        private UNSUPPORTEDPAYMENTINSTRUCTIONCase(JsonNode jsonNode) throws IOException {
            this.uNSUPPORTEDPAYMENTINSTRUCTION = ApiHelper.deserialize(jsonNode,
                UNSUPPORTEDPAYMENTINSTRUCTION.class);
        }

        @Override
        public String toString() {
            return uNSUPPORTEDPAYMENTINSTRUCTION.toString();
        }
    }

    /**
     * This is a implementation class for SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SHIPPINGTYPENOTSUPPORTEDFORCLIENT")
    private static class SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase extends UnprocessableErrorIssue {

        @JsonValue
        private SHIPPINGTYPENOTSUPPORTEDFORCLIENT sHIPPINGTYPENOTSUPPORTEDFORCLIENT;

        SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase(SHIPPINGTYPENOTSUPPORTEDFORCLIENT sHIPPINGTYPENOTSUPPORTEDFORCLIENT) {
            this.sHIPPINGTYPENOTSUPPORTEDFORCLIENT = sHIPPINGTYPENOTSUPPORTEDFORCLIENT;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.sHIPPINGTYPENOTSUPPORTEDFORCLIENT(this.sHIPPINGTYPENOTSUPPORTEDFORCLIENT);
        }

        @JsonCreator
        private SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase(JsonNode jsonNode) throws IOException {
            this.sHIPPINGTYPENOTSUPPORTEDFORCLIENT = ApiHelper.deserialize(jsonNode,
                SHIPPINGTYPENOTSUPPORTEDFORCLIENT.class);
        }

        @Override
        public String toString() {
            return sHIPPINGTYPENOTSUPPORTEDFORCLIENT.toString();
        }
    }

    /**
     * This is a implementation class for UNSUPPORTEDSHIPPINGTYPECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "UNSUPPORTEDSHIPPINGTYPE")
    private static class UNSUPPORTEDSHIPPINGTYPECase extends UnprocessableErrorIssue {

        @JsonValue
        private UNSUPPORTEDSHIPPINGTYPE uNSUPPORTEDSHIPPINGTYPE;

        UNSUPPORTEDSHIPPINGTYPECase(UNSUPPORTEDSHIPPINGTYPE uNSUPPORTEDSHIPPINGTYPE) {
            this.uNSUPPORTEDSHIPPINGTYPE = uNSUPPORTEDSHIPPINGTYPE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.uNSUPPORTEDSHIPPINGTYPE(this.uNSUPPORTEDSHIPPINGTYPE);
        }

        @JsonCreator
        private UNSUPPORTEDSHIPPINGTYPECase(JsonNode jsonNode) throws IOException {
            this.uNSUPPORTEDSHIPPINGTYPE = ApiHelper.deserialize(jsonNode,
                UNSUPPORTEDSHIPPINGTYPE.class);
        }

        @Override
        public String toString() {
            return uNSUPPORTEDSHIPPINGTYPE.toString();
        }
    }

    /**
     * This is a implementation class for SHIPPINGOPTIONNOTSELECTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SHIPPINGOPTIONNOTSELECTED")
    private static class SHIPPINGOPTIONNOTSELECTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private SHIPPINGOPTIONNOTSELECTED sHIPPINGOPTIONNOTSELECTED;

        SHIPPINGOPTIONNOTSELECTEDCase(SHIPPINGOPTIONNOTSELECTED sHIPPINGOPTIONNOTSELECTED) {
            this.sHIPPINGOPTIONNOTSELECTED = sHIPPINGOPTIONNOTSELECTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.sHIPPINGOPTIONNOTSELECTED(this.sHIPPINGOPTIONNOTSELECTED);
        }

        @JsonCreator
        private SHIPPINGOPTIONNOTSELECTEDCase(JsonNode jsonNode) throws IOException {
            this.sHIPPINGOPTIONNOTSELECTED = ApiHelper.deserialize(jsonNode,
                SHIPPINGOPTIONNOTSELECTED.class);
        }

        @Override
        public String toString() {
            return sHIPPINGOPTIONNOTSELECTED.toString();
        }
    }

    /**
     * This is a implementation class for MULTIPLESHIPPINGOPTIONSELECTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MULTIPLESHIPPINGOPTIONSELECTED")
    private static class MULTIPLESHIPPINGOPTIONSELECTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private MULTIPLESHIPPINGOPTIONSELECTED mULTIPLESHIPPINGOPTIONSELECTED;

        MULTIPLESHIPPINGOPTIONSELECTEDCase(MULTIPLESHIPPINGOPTIONSELECTED mULTIPLESHIPPINGOPTIONSELECTED) {
            this.mULTIPLESHIPPINGOPTIONSELECTED = mULTIPLESHIPPINGOPTIONSELECTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mULTIPLESHIPPINGOPTIONSELECTED(this.mULTIPLESHIPPINGOPTIONSELECTED);
        }

        @JsonCreator
        private MULTIPLESHIPPINGOPTIONSELECTEDCase(JsonNode jsonNode) throws IOException {
            this.mULTIPLESHIPPINGOPTIONSELECTED = ApiHelper.deserialize(jsonNode,
                MULTIPLESHIPPINGOPTIONSELECTED.class);
        }

        @Override
        public String toString() {
            return mULTIPLESHIPPINGOPTIONSELECTED.toString();
        }
    }

    /**
     * This is a implementation class for PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH")
    private static class PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH;

        PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase(PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH) {
            this.pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH = pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH(this.pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH);
        }

        @JsonCreator
        private PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH = ApiHelper.deserialize(jsonNode,
                PREFERREDSHIPPINGOPTIONAMOUNTMISMATCH.class);
        }

        @Override
        public String toString() {
            return pREFERREDSHIPPINGOPTIONAMOUNTMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for AGREEMENTALREADYCANCELLEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "AGREEMENTALREADYCANCELLED")
    private static class AGREEMENTALREADYCANCELLEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private AGREEMENTALREADYCANCELLED aGREEMENTALREADYCANCELLED;

        AGREEMENTALREADYCANCELLEDCase(AGREEMENTALREADYCANCELLED aGREEMENTALREADYCANCELLED) {
            this.aGREEMENTALREADYCANCELLED = aGREEMENTALREADYCANCELLED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.aGREEMENTALREADYCANCELLED(this.aGREEMENTALREADYCANCELLED);
        }

        @JsonCreator
        private AGREEMENTALREADYCANCELLEDCase(JsonNode jsonNode) throws IOException {
            this.aGREEMENTALREADYCANCELLED = ApiHelper.deserialize(jsonNode,
                AGREEMENTALREADYCANCELLED.class);
        }

        @Override
        public String toString() {
            return aGREEMENTALREADYCANCELLED.toString();
        }
    }

    /**
     * This is a implementation class for BILLINGAGREEMENTNOTFOUNDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "BILLINGAGREEMENTNOTFOUND")
    private static class BILLINGAGREEMENTNOTFOUNDCase extends UnprocessableErrorIssue {

        @JsonValue
        private BILLINGAGREEMENTNOTFOUND bILLINGAGREEMENTNOTFOUND;

        BILLINGAGREEMENTNOTFOUNDCase(BILLINGAGREEMENTNOTFOUND bILLINGAGREEMENTNOTFOUND) {
            this.bILLINGAGREEMENTNOTFOUND = bILLINGAGREEMENTNOTFOUND;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.bILLINGAGREEMENTNOTFOUND(this.bILLINGAGREEMENTNOTFOUND);
        }

        @JsonCreator
        private BILLINGAGREEMENTNOTFOUNDCase(JsonNode jsonNode) throws IOException {
            this.bILLINGAGREEMENTNOTFOUND = ApiHelper.deserialize(jsonNode,
                BILLINGAGREEMENTNOTFOUND.class);
        }

        @Override
        public String toString() {
            return bILLINGAGREEMENTNOTFOUND.toString();
        }
    }

    /**
     * This is a implementation class for COMPLIANCEVIOLATIONCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "COMPLIANCEVIOLATION")
    private static class COMPLIANCEVIOLATIONCase extends UnprocessableErrorIssue {

        @JsonValue
        private COMPLIANCEVIOLATION cOMPLIANCEVIOLATION;

        COMPLIANCEVIOLATIONCase(COMPLIANCEVIOLATION cOMPLIANCEVIOLATION) {
            this.cOMPLIANCEVIOLATION = cOMPLIANCEVIOLATION;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cOMPLIANCEVIOLATION(this.cOMPLIANCEVIOLATION);
        }

        @JsonCreator
        private COMPLIANCEVIOLATIONCase(JsonNode jsonNode) throws IOException {
            this.cOMPLIANCEVIOLATION = ApiHelper.deserialize(jsonNode,
                COMPLIANCEVIOLATION.class);
        }

        @Override
        public String toString() {
            return cOMPLIANCEVIOLATION.toString();
        }
    }

    /**
     * This is a implementation class for DOMESTICTRANSACTIONREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "DOMESTICTRANSACTIONREQUIRED")
    private static class DOMESTICTRANSACTIONREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private DOMESTICTRANSACTIONREQUIRED dOMESTICTRANSACTIONREQUIRED;

        DOMESTICTRANSACTIONREQUIREDCase(DOMESTICTRANSACTIONREQUIRED dOMESTICTRANSACTIONREQUIRED) {
            this.dOMESTICTRANSACTIONREQUIRED = dOMESTICTRANSACTIONREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dOMESTICTRANSACTIONREQUIRED(this.dOMESTICTRANSACTIONREQUIRED);
        }

        @JsonCreator
        private DOMESTICTRANSACTIONREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.dOMESTICTRANSACTIONREQUIRED = ApiHelper.deserialize(jsonNode,
                DOMESTICTRANSACTIONREQUIRED.class);
        }

        @Override
        public String toString() {
            return dOMESTICTRANSACTIONREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for DUPLICATEINVOICEIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "DUPLICATEINVOICEID")
    private static class DUPLICATEINVOICEIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private DUPLICATEINVOICEID dUPLICATEINVOICEID;

        DUPLICATEINVOICEIDCase(DUPLICATEINVOICEID dUPLICATEINVOICEID) {
            this.dUPLICATEINVOICEID = dUPLICATEINVOICEID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dUPLICATEINVOICEID(this.dUPLICATEINVOICEID);
        }

        @JsonCreator
        private DUPLICATEINVOICEIDCase(JsonNode jsonNode) throws IOException {
            this.dUPLICATEINVOICEID = ApiHelper.deserialize(jsonNode,
                DUPLICATEINVOICEID.class);
        }

        @Override
        public String toString() {
            return dUPLICATEINVOICEID.toString();
        }
    }

    /**
     * This is a implementation class for INSTRUMENTDECLINEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INSTRUMENTDECLINED")
    private static class INSTRUMENTDECLINEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private INSTRUMENTDECLINED iNSTRUMENTDECLINED;

        INSTRUMENTDECLINEDCase(INSTRUMENTDECLINED iNSTRUMENTDECLINED) {
            this.iNSTRUMENTDECLINED = iNSTRUMENTDECLINED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNSTRUMENTDECLINED(this.iNSTRUMENTDECLINED);
        }

        @JsonCreator
        private INSTRUMENTDECLINEDCase(JsonNode jsonNode) throws IOException {
            this.iNSTRUMENTDECLINED = ApiHelper.deserialize(jsonNode,
                INSTRUMENTDECLINED.class);
        }

        @Override
        public String toString() {
            return iNSTRUMENTDECLINED.toString();
        }
    }

    /**
     * This is a implementation class for MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED")
    private static class MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED;

        MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase(MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED) {
            this.mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED = mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED(this.mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED);
        }

        @JsonCreator
        private MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase(JsonNode jsonNode) throws IOException {
            this.mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED = ApiHelper.deserialize(jsonNode,
                MAXNUMBEROFPAYMENTATTEMPTSEXCEEDED.class);
        }

        @Override
        public String toString() {
            return mAXNUMBEROFPAYMENTATTEMPTSEXCEEDED.toString();
        }
    }

    /**
     * This is a implementation class for NOTENABLEDFORCARDPROCESSINGCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTENABLEDFORCARDPROCESSING")
    private static class NOTENABLEDFORCARDPROCESSINGCase extends UnprocessableErrorIssue {

        @JsonValue
        private NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING;

        NOTENABLEDFORCARDPROCESSINGCase(NOTENABLEDFORCARDPROCESSING nOTENABLEDFORCARDPROCESSING) {
            this.nOTENABLEDFORCARDPROCESSING = nOTENABLEDFORCARDPROCESSING;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTENABLEDFORCARDPROCESSING(this.nOTENABLEDFORCARDPROCESSING);
        }

        @JsonCreator
        private NOTENABLEDFORCARDPROCESSINGCase(JsonNode jsonNode) throws IOException {
            this.nOTENABLEDFORCARDPROCESSING = ApiHelper.deserialize(jsonNode,
                NOTENABLEDFORCARDPROCESSING.class);
        }

        @Override
        public String toString() {
            return nOTENABLEDFORCARDPROCESSING.toString();
        }
    }

    /**
     * This is a implementation class for PAYEEBLOCKEDTRANSACTIONCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYEEBLOCKEDTRANSACTION")
    private static class PAYEEBLOCKEDTRANSACTIONCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYEEBLOCKEDTRANSACTION pAYEEBLOCKEDTRANSACTION;

        PAYEEBLOCKEDTRANSACTIONCase(PAYEEBLOCKEDTRANSACTION pAYEEBLOCKEDTRANSACTION) {
            this.pAYEEBLOCKEDTRANSACTION = pAYEEBLOCKEDTRANSACTION;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYEEBLOCKEDTRANSACTION(this.pAYEEBLOCKEDTRANSACTION);
        }

        @JsonCreator
        private PAYEEBLOCKEDTRANSACTIONCase(JsonNode jsonNode) throws IOException {
            this.pAYEEBLOCKEDTRANSACTION = ApiHelper.deserialize(jsonNode,
                PAYEEBLOCKEDTRANSACTION.class);
        }

        @Override
        public String toString() {
            return pAYEEBLOCKEDTRANSACTION.toString();
        }
    }

    /**
     * This is a implementation class for PAYERACCOUNTLOCKEDORCLOSEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYERACCOUNTLOCKEDORCLOSED")
    private static class PAYERACCOUNTLOCKEDORCLOSEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYERACCOUNTLOCKEDORCLOSED pAYERACCOUNTLOCKEDORCLOSED;

        PAYERACCOUNTLOCKEDORCLOSEDCase(PAYERACCOUNTLOCKEDORCLOSED pAYERACCOUNTLOCKEDORCLOSED) {
            this.pAYERACCOUNTLOCKEDORCLOSED = pAYERACCOUNTLOCKEDORCLOSED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYERACCOUNTLOCKEDORCLOSED(this.pAYERACCOUNTLOCKEDORCLOSED);
        }

        @JsonCreator
        private PAYERACCOUNTLOCKEDORCLOSEDCase(JsonNode jsonNode) throws IOException {
            this.pAYERACCOUNTLOCKEDORCLOSED = ApiHelper.deserialize(jsonNode,
                PAYERACCOUNTLOCKEDORCLOSED.class);
        }

        @Override
        public String toString() {
            return pAYERACCOUNTLOCKEDORCLOSED.toString();
        }
    }

    /**
     * This is a implementation class for PAYERACCOUNTRESTRICTEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYERACCOUNTRESTRICTED")
    private static class PAYERACCOUNTRESTRICTEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYERACCOUNTRESTRICTED pAYERACCOUNTRESTRICTED;

        PAYERACCOUNTRESTRICTEDCase(PAYERACCOUNTRESTRICTED pAYERACCOUNTRESTRICTED) {
            this.pAYERACCOUNTRESTRICTED = pAYERACCOUNTRESTRICTED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYERACCOUNTRESTRICTED(this.pAYERACCOUNTRESTRICTED);
        }

        @JsonCreator
        private PAYERACCOUNTRESTRICTEDCase(JsonNode jsonNode) throws IOException {
            this.pAYERACCOUNTRESTRICTED = ApiHelper.deserialize(jsonNode,
                PAYERACCOUNTRESTRICTED.class);
        }

        @Override
        public String toString() {
            return pAYERACCOUNTRESTRICTED.toString();
        }
    }

    /**
     * This is a implementation class for PAYERCANNOTPAYCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYERCANNOTPAY")
    private static class PAYERCANNOTPAYCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYERCANNOTPAY pAYERCANNOTPAY;

        PAYERCANNOTPAYCase(PAYERCANNOTPAY pAYERCANNOTPAY) {
            this.pAYERCANNOTPAY = pAYERCANNOTPAY;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYERCANNOTPAY(this.pAYERCANNOTPAY);
        }

        @JsonCreator
        private PAYERCANNOTPAYCase(JsonNode jsonNode) throws IOException {
            this.pAYERCANNOTPAY = ApiHelper.deserialize(jsonNode,
                PAYERCANNOTPAY.class);
        }

        @Override
        public String toString() {
            return pAYERCANNOTPAY.toString();
        }
    }

    /**
     * This is a implementation class for TRANSACTIONBLOCKEDBYPAYEECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TRANSACTIONBLOCKEDBYPAYEE")
    private static class TRANSACTIONBLOCKEDBYPAYEECase extends UnprocessableErrorIssue {

        @JsonValue
        private TRANSACTIONBLOCKEDBYPAYEE tRANSACTIONBLOCKEDBYPAYEE;

        TRANSACTIONBLOCKEDBYPAYEECase(TRANSACTIONBLOCKEDBYPAYEE tRANSACTIONBLOCKEDBYPAYEE) {
            this.tRANSACTIONBLOCKEDBYPAYEE = tRANSACTIONBLOCKEDBYPAYEE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tRANSACTIONBLOCKEDBYPAYEE(this.tRANSACTIONBLOCKEDBYPAYEE);
        }

        @JsonCreator
        private TRANSACTIONBLOCKEDBYPAYEECase(JsonNode jsonNode) throws IOException {
            this.tRANSACTIONBLOCKEDBYPAYEE = ApiHelper.deserialize(jsonNode,
                TRANSACTIONBLOCKEDBYPAYEE.class);
        }

        @Override
        public String toString() {
            return tRANSACTIONBLOCKEDBYPAYEE.toString();
        }
    }

    /**
     * This is a implementation class for TRANSACTIONLIMITEXCEEDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TRANSACTIONLIMITEXCEEDED")
    private static class TRANSACTIONLIMITEXCEEDEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private TRANSACTIONLIMITEXCEEDED tRANSACTIONLIMITEXCEEDED;

        TRANSACTIONLIMITEXCEEDEDCase(TRANSACTIONLIMITEXCEEDED tRANSACTIONLIMITEXCEEDED) {
            this.tRANSACTIONLIMITEXCEEDED = tRANSACTIONLIMITEXCEEDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tRANSACTIONLIMITEXCEEDED(this.tRANSACTIONLIMITEXCEEDED);
        }

        @JsonCreator
        private TRANSACTIONLIMITEXCEEDEDCase(JsonNode jsonNode) throws IOException {
            this.tRANSACTIONLIMITEXCEEDED = ApiHelper.deserialize(jsonNode,
                TRANSACTIONLIMITEXCEEDED.class);
        }

        @Override
        public String toString() {
            return tRANSACTIONLIMITEXCEEDED.toString();
        }
    }

    /**
     * This is a implementation class for TRANSACTIONRECEIVINGLIMITEXCEEDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TRANSACTIONRECEIVINGLIMITEXCEEDED")
    private static class TRANSACTIONRECEIVINGLIMITEXCEEDEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private TRANSACTIONRECEIVINGLIMITEXCEEDED tRANSACTIONRECEIVINGLIMITEXCEEDED;

        TRANSACTIONRECEIVINGLIMITEXCEEDEDCase(TRANSACTIONRECEIVINGLIMITEXCEEDED tRANSACTIONRECEIVINGLIMITEXCEEDED) {
            this.tRANSACTIONRECEIVINGLIMITEXCEEDED = tRANSACTIONRECEIVINGLIMITEXCEEDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tRANSACTIONRECEIVINGLIMITEXCEEDED(this.tRANSACTIONRECEIVINGLIMITEXCEEDED);
        }

        @JsonCreator
        private TRANSACTIONRECEIVINGLIMITEXCEEDEDCase(JsonNode jsonNode) throws IOException {
            this.tRANSACTIONRECEIVINGLIMITEXCEEDED = ApiHelper.deserialize(jsonNode,
                TRANSACTIONRECEIVINGLIMITEXCEEDED.class);
        }

        @Override
        public String toString() {
            return tRANSACTIONRECEIVINGLIMITEXCEEDED.toString();
        }
    }

    /**
     * This is a implementation class for TRANSACTIONREFUSEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TRANSACTIONREFUSED")
    private static class TRANSACTIONREFUSEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private TRANSACTIONREFUSED tRANSACTIONREFUSED;

        TRANSACTIONREFUSEDCase(TRANSACTIONREFUSED tRANSACTIONREFUSED) {
            this.tRANSACTIONREFUSED = tRANSACTIONREFUSED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tRANSACTIONREFUSED(this.tRANSACTIONREFUSED);
        }

        @JsonCreator
        private TRANSACTIONREFUSEDCase(JsonNode jsonNode) throws IOException {
            this.tRANSACTIONREFUSED = ApiHelper.deserialize(jsonNode,
                TRANSACTIONREFUSED.class);
        }

        @Override
        public String toString() {
            return tRANSACTIONREFUSED.toString();
        }
    }

    /**
     * This is a implementation class for AUTHCAPTURENOTENABLEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "AUTHCAPTURENOTENABLED")
    private static class AUTHCAPTURENOTENABLEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private AUTHCAPTURENOTENABLED aUTHCAPTURENOTENABLED;

        AUTHCAPTURENOTENABLEDCase(AUTHCAPTURENOTENABLED aUTHCAPTURENOTENABLED) {
            this.aUTHCAPTURENOTENABLED = aUTHCAPTURENOTENABLED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.aUTHCAPTURENOTENABLED(this.aUTHCAPTURENOTENABLED);
        }

        @JsonCreator
        private AUTHCAPTURENOTENABLEDCase(JsonNode jsonNode) throws IOException {
            this.aUTHCAPTURENOTENABLED = ApiHelper.deserialize(jsonNode,
                AUTHCAPTURENOTENABLED.class);
        }

        @Override
        public String toString() {
            return aUTHCAPTURENOTENABLED.toString();
        }
    }

    /**
     * This is a implementation class for UNSUPPORTEDPROCESSINGINSTRUCTIONCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "UNSUPPORTEDPROCESSINGINSTRUCTION")
    private static class UNSUPPORTEDPROCESSINGINSTRUCTIONCase extends UnprocessableErrorIssue {

        @JsonValue
        private UNSUPPORTEDPROCESSINGINSTRUCTION uNSUPPORTEDPROCESSINGINSTRUCTION;

        UNSUPPORTEDPROCESSINGINSTRUCTIONCase(UNSUPPORTEDPROCESSINGINSTRUCTION uNSUPPORTEDPROCESSINGINSTRUCTION) {
            this.uNSUPPORTEDPROCESSINGINSTRUCTION = uNSUPPORTEDPROCESSINGINSTRUCTION;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.uNSUPPORTEDPROCESSINGINSTRUCTION(this.uNSUPPORTEDPROCESSINGINSTRUCTION);
        }

        @JsonCreator
        private UNSUPPORTEDPROCESSINGINSTRUCTIONCase(JsonNode jsonNode) throws IOException {
            this.uNSUPPORTEDPROCESSINGINSTRUCTION = ApiHelper.deserialize(jsonNode,
                UNSUPPORTEDPROCESSINGINSTRUCTION.class);
        }

        @Override
        public String toString() {
            return uNSUPPORTEDPROCESSINGINSTRUCTION.toString();
        }
    }

    /**
     * This is a implementation class for ORDERCOMPLETEONPAYMENTAPPROVALCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ORDERCOMPLETEONPAYMENTAPPROVAL")
    private static class ORDERCOMPLETEONPAYMENTAPPROVALCase extends UnprocessableErrorIssue {

        @JsonValue
        private ORDERCOMPLETEONPAYMENTAPPROVAL oRDERCOMPLETEONPAYMENTAPPROVAL;

        ORDERCOMPLETEONPAYMENTAPPROVALCase(ORDERCOMPLETEONPAYMENTAPPROVAL oRDERCOMPLETEONPAYMENTAPPROVAL) {
            this.oRDERCOMPLETEONPAYMENTAPPROVAL = oRDERCOMPLETEONPAYMENTAPPROVAL;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.oRDERCOMPLETEONPAYMENTAPPROVAL(this.oRDERCOMPLETEONPAYMENTAPPROVAL);
        }

        @JsonCreator
        private ORDERCOMPLETEONPAYMENTAPPROVALCase(JsonNode jsonNode) throws IOException {
            this.oRDERCOMPLETEONPAYMENTAPPROVAL = ApiHelper.deserialize(jsonNode,
                ORDERCOMPLETEONPAYMENTAPPROVAL.class);
        }

        @Override
        public String toString() {
            return oRDERCOMPLETEONPAYMENTAPPROVAL.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDEXPIRYDATECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDEXPIRYDATE")
    private static class INVALIDEXPIRYDATECase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDEXPIRYDATE iNVALIDEXPIRYDATE;

        INVALIDEXPIRYDATECase(INVALIDEXPIRYDATE iNVALIDEXPIRYDATE) {
            this.iNVALIDEXPIRYDATE = iNVALIDEXPIRYDATE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDEXPIRYDATE(this.iNVALIDEXPIRYDATE);
        }

        @JsonCreator
        private INVALIDEXPIRYDATECase(JsonNode jsonNode) throws IOException {
            this.iNVALIDEXPIRYDATE = ApiHelper.deserialize(jsonNode,
                INVALIDEXPIRYDATE.class);
        }

        @Override
        public String toString() {
            return iNVALIDEXPIRYDATE.toString();
        }
    }

    /**
     * This is a implementation class for INCOMPATIBLEPARAMETERVALUECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INCOMPATIBLEPARAMETERVALUE")
    private static class INCOMPATIBLEPARAMETERVALUECase extends UnprocessableErrorIssue {

        @JsonValue
        private INCOMPATIBLEPARAMETERVALUE iNCOMPATIBLEPARAMETERVALUE;

        INCOMPATIBLEPARAMETERVALUECase(INCOMPATIBLEPARAMETERVALUE iNCOMPATIBLEPARAMETERVALUE) {
            this.iNCOMPATIBLEPARAMETERVALUE = iNCOMPATIBLEPARAMETERVALUE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNCOMPATIBLEPARAMETERVALUE(this.iNCOMPATIBLEPARAMETERVALUE);
        }

        @JsonCreator
        private INCOMPATIBLEPARAMETERVALUECase(JsonNode jsonNode) throws IOException {
            this.iNCOMPATIBLEPARAMETERVALUE = ApiHelper.deserialize(jsonNode,
                INCOMPATIBLEPARAMETERVALUE.class);
        }

        @Override
        public String toString() {
            return iNCOMPATIBLEPARAMETERVALUE.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDPREVIOUSTRANSACTIONREFERENCECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDPREVIOUSTRANSACTIONREFERENCE")
    private static class INVALIDPREVIOUSTRANSACTIONREFERENCECase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDPREVIOUSTRANSACTIONREFERENCE iNVALIDPREVIOUSTRANSACTIONREFERENCE;

        INVALIDPREVIOUSTRANSACTIONREFERENCECase(INVALIDPREVIOUSTRANSACTIONREFERENCE iNVALIDPREVIOUSTRANSACTIONREFERENCE) {
            this.iNVALIDPREVIOUSTRANSACTIONREFERENCE = iNVALIDPREVIOUSTRANSACTIONREFERENCE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDPREVIOUSTRANSACTIONREFERENCE(this.iNVALIDPREVIOUSTRANSACTIONREFERENCE);
        }

        @JsonCreator
        private INVALIDPREVIOUSTRANSACTIONREFERENCECase(JsonNode jsonNode) throws IOException {
            this.iNVALIDPREVIOUSTRANSACTIONREFERENCE = ApiHelper.deserialize(jsonNode,
                INVALIDPREVIOUSTRANSACTIONREFERENCE.class);
        }

        @Override
        public String toString() {
            return iNVALIDPREVIOUSTRANSACTIONREFERENCE.toString();
        }
    }

    /**
     * This is a implementation class for PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK")
    private static class PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase extends UnprocessableErrorIssue {

        @JsonValue
        private PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK;

        PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase(PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK) {
            this.pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK = pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK(this.pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK);
        }

        @JsonCreator
        private PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase(JsonNode jsonNode) throws IOException {
            this.pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK = ApiHelper.deserialize(jsonNode,
                PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK.class);
        }

        @Override
        public String toString() {
            return pREVIOUSTRANSACTIONREFERENCEHASCHARGEBACK.toString();
        }
    }

    /**
     * This is a implementation class for PREVIOUSTRANSACTIONREFERENCEVOIDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PREVIOUSTRANSACTIONREFERENCEVOIDED")
    private static class PREVIOUSTRANSACTIONREFERENCEVOIDEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PREVIOUSTRANSACTIONREFERENCEVOIDED pREVIOUSTRANSACTIONREFERENCEVOIDED;

        PREVIOUSTRANSACTIONREFERENCEVOIDEDCase(PREVIOUSTRANSACTIONREFERENCEVOIDED pREVIOUSTRANSACTIONREFERENCEVOIDED) {
            this.pREVIOUSTRANSACTIONREFERENCEVOIDED = pREVIOUSTRANSACTIONREFERENCEVOIDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pREVIOUSTRANSACTIONREFERENCEVOIDED(this.pREVIOUSTRANSACTIONREFERENCEVOIDED);
        }

        @JsonCreator
        private PREVIOUSTRANSACTIONREFERENCEVOIDEDCase(JsonNode jsonNode) throws IOException {
            this.pREVIOUSTRANSACTIONREFERENCEVOIDED = ApiHelper.deserialize(jsonNode,
                PREVIOUSTRANSACTIONREFERENCEVOIDED.class);
        }

        @Override
        public String toString() {
            return pREVIOUSTRANSACTIONREFERENCEVOIDED.toString();
        }
    }

    /**
     * This is a implementation class for PAYMENTSOURCEMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYMENTSOURCEMISMATCH")
    private static class PAYMENTSOURCEMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYMENTSOURCEMISMATCH pAYMENTSOURCEMISMATCH;

        PAYMENTSOURCEMISMATCHCase(PAYMENTSOURCEMISMATCH pAYMENTSOURCEMISMATCH) {
            this.pAYMENTSOURCEMISMATCH = pAYMENTSOURCEMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYMENTSOURCEMISMATCH(this.pAYMENTSOURCEMISMATCH);
        }

        @JsonCreator
        private PAYMENTSOURCEMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.pAYMENTSOURCEMISMATCH = ApiHelper.deserialize(jsonNode,
                PAYMENTSOURCEMISMATCH.class);
        }

        @Override
        public String toString() {
            return pAYMENTSOURCEMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for MERCHANTINITIATEDWITHSECURITYCODECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MERCHANTINITIATEDWITHSECURITYCODE")
    private static class MERCHANTINITIATEDWITHSECURITYCODECase extends UnprocessableErrorIssue {

        @JsonValue
        private MERCHANTINITIATEDWITHSECURITYCODE mERCHANTINITIATEDWITHSECURITYCODE;

        MERCHANTINITIATEDWITHSECURITYCODECase(MERCHANTINITIATEDWITHSECURITYCODE mERCHANTINITIATEDWITHSECURITYCODE) {
            this.mERCHANTINITIATEDWITHSECURITYCODE = mERCHANTINITIATEDWITHSECURITYCODE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mERCHANTINITIATEDWITHSECURITYCODE(this.mERCHANTINITIATEDWITHSECURITYCODE);
        }

        @JsonCreator
        private MERCHANTINITIATEDWITHSECURITYCODECase(JsonNode jsonNode) throws IOException {
            this.mERCHANTINITIATEDWITHSECURITYCODE = ApiHelper.deserialize(jsonNode,
                MERCHANTINITIATEDWITHSECURITYCODE.class);
        }

        @Override
        public String toString() {
            return mERCHANTINITIATEDWITHSECURITYCODE.toString();
        }
    }

    /**
     * This is a implementation class for MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS")
    private static class MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase extends UnprocessableErrorIssue {

        @JsonValue
        private MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS;

        MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase(MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS) {
            this.mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS = mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS(this.mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS);
        }

        @JsonCreator
        private MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase(JsonNode jsonNode) throws IOException {
            this.mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS = ApiHelper.deserialize(jsonNode,
                MERCHANTINITIATEDWITHAUTHENTICATIONRESULTS.class);
        }

        @Override
        public String toString() {
            return mERCHANTINITIATEDWITHAUTHENTICATIONRESULTS.toString();
        }
    }

    /**
     * This is a implementation class for MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS")
    private static class MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase extends UnprocessableErrorIssue {

        @JsonValue
        private MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS;

        MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase(MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS) {
            this.mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS = mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS(this.mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS);
        }

        @JsonCreator
        private MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase(JsonNode jsonNode) throws IOException {
            this.mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS = ApiHelper.deserialize(jsonNode,
                MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS.class);
        }

        @Override
        public String toString() {
            return mERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITS.toString();
        }
    }

    /**
     * This is a implementation class for PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYMENTSOURCEINFOCANNOTBEVERIFIED")
    private static class PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYMENTSOURCEINFOCANNOTBEVERIFIED pAYMENTSOURCEINFOCANNOTBEVERIFIED;

        PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase(PAYMENTSOURCEINFOCANNOTBEVERIFIED pAYMENTSOURCEINFOCANNOTBEVERIFIED) {
            this.pAYMENTSOURCEINFOCANNOTBEVERIFIED = pAYMENTSOURCEINFOCANNOTBEVERIFIED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYMENTSOURCEINFOCANNOTBEVERIFIED(this.pAYMENTSOURCEINFOCANNOTBEVERIFIED);
        }

        @JsonCreator
        private PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase(JsonNode jsonNode) throws IOException {
            this.pAYMENTSOURCEINFOCANNOTBEVERIFIED = ApiHelper.deserialize(jsonNode,
                PAYMENTSOURCEINFOCANNOTBEVERIFIED.class);
        }

        @Override
        public String toString() {
            return pAYMENTSOURCEINFOCANNOTBEVERIFIED.toString();
        }
    }

    /**
     * This is a implementation class for PAYMENTSOURCEDECLINEDBYPROCESSORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYMENTSOURCEDECLINEDBYPROCESSOR")
    private static class PAYMENTSOURCEDECLINEDBYPROCESSORCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYMENTSOURCEDECLINEDBYPROCESSOR pAYMENTSOURCEDECLINEDBYPROCESSOR;

        PAYMENTSOURCEDECLINEDBYPROCESSORCase(PAYMENTSOURCEDECLINEDBYPROCESSOR pAYMENTSOURCEDECLINEDBYPROCESSOR) {
            this.pAYMENTSOURCEDECLINEDBYPROCESSOR = pAYMENTSOURCEDECLINEDBYPROCESSOR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYMENTSOURCEDECLINEDBYPROCESSOR(this.pAYMENTSOURCEDECLINEDBYPROCESSOR);
        }

        @JsonCreator
        private PAYMENTSOURCEDECLINEDBYPROCESSORCase(JsonNode jsonNode) throws IOException {
            this.pAYMENTSOURCEDECLINEDBYPROCESSOR = ApiHelper.deserialize(jsonNode,
                PAYMENTSOURCEDECLINEDBYPROCESSOR.class);
        }

        @Override
        public String toString() {
            return pAYMENTSOURCEDECLINEDBYPROCESSOR.toString();
        }
    }

    /**
     * This is a implementation class for PAYMENTSOURCECANNOTBEUSEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYMENTSOURCECANNOTBEUSED")
    private static class PAYMENTSOURCECANNOTBEUSEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYMENTSOURCECANNOTBEUSED pAYMENTSOURCECANNOTBEUSED;

        PAYMENTSOURCECANNOTBEUSEDCase(PAYMENTSOURCECANNOTBEUSED pAYMENTSOURCECANNOTBEUSED) {
            this.pAYMENTSOURCECANNOTBEUSED = pAYMENTSOURCECANNOTBEUSED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYMENTSOURCECANNOTBEUSED(this.pAYMENTSOURCECANNOTBEUSED);
        }

        @JsonCreator
        private PAYMENTSOURCECANNOTBEUSEDCase(JsonNode jsonNode) throws IOException {
            this.pAYMENTSOURCECANNOTBEUSED = ApiHelper.deserialize(jsonNode,
                PAYMENTSOURCECANNOTBEUSED.class);
        }

        @Override
        public String toString() {
            return pAYMENTSOURCECANNOTBEUSED.toString();
        }
    }

    /**
     * This is a implementation class for NOTENABLEDFORAPPLEPAYCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTENABLEDFORAPPLEPAY")
    private static class NOTENABLEDFORAPPLEPAYCase extends UnprocessableErrorIssue {

        @JsonValue
        private NOTENABLEDFORAPPLEPAY nOTENABLEDFORAPPLEPAY;

        NOTENABLEDFORAPPLEPAYCase(NOTENABLEDFORAPPLEPAY nOTENABLEDFORAPPLEPAY) {
            this.nOTENABLEDFORAPPLEPAY = nOTENABLEDFORAPPLEPAY;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTENABLEDFORAPPLEPAY(this.nOTENABLEDFORAPPLEPAY);
        }

        @JsonCreator
        private NOTENABLEDFORAPPLEPAYCase(JsonNode jsonNode) throws IOException {
            this.nOTENABLEDFORAPPLEPAY = ApiHelper.deserialize(jsonNode,
                NOTENABLEDFORAPPLEPAY.class);
        }

        @Override
        public String toString() {
            return nOTENABLEDFORAPPLEPAY.toString();
        }
    }

    /**
     * This is a implementation class for NOTENABLEDFORGOOGLEPAYCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTENABLEDFORGOOGLEPAY")
    private static class NOTENABLEDFORGOOGLEPAYCase extends UnprocessableErrorIssue {

        @JsonValue
        private NOTENABLEDFORGOOGLEPAY nOTENABLEDFORGOOGLEPAY;

        NOTENABLEDFORGOOGLEPAYCase(NOTENABLEDFORGOOGLEPAY nOTENABLEDFORGOOGLEPAY) {
            this.nOTENABLEDFORGOOGLEPAY = nOTENABLEDFORGOOGLEPAY;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTENABLEDFORGOOGLEPAY(this.nOTENABLEDFORGOOGLEPAY);
        }

        @JsonCreator
        private NOTENABLEDFORGOOGLEPAYCase(JsonNode jsonNode) throws IOException {
            this.nOTENABLEDFORGOOGLEPAY = ApiHelper.deserialize(jsonNode,
                NOTENABLEDFORGOOGLEPAY.class);
        }

        @Override
        public String toString() {
            return nOTENABLEDFORGOOGLEPAY.toString();
        }
    }

    /**
     * This is a implementation class for APPLEPAYAMOUNTMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "APPLEPAYAMOUNTMISMATCH")
    private static class APPLEPAYAMOUNTMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private APPLEPAYAMOUNTMISMATCH aPPLEPAYAMOUNTMISMATCH;

        APPLEPAYAMOUNTMISMATCHCase(APPLEPAYAMOUNTMISMATCH aPPLEPAYAMOUNTMISMATCH) {
            this.aPPLEPAYAMOUNTMISMATCH = aPPLEPAYAMOUNTMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.aPPLEPAYAMOUNTMISMATCH(this.aPPLEPAYAMOUNTMISMATCH);
        }

        @JsonCreator
        private APPLEPAYAMOUNTMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.aPPLEPAYAMOUNTMISMATCH = ApiHelper.deserialize(jsonNode,
                APPLEPAYAMOUNTMISMATCH.class);
        }

        @Override
        public String toString() {
            return aPPLEPAYAMOUNTMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for BILLINGADDRESSINVALIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "BILLINGADDRESSINVALID")
    private static class BILLINGADDRESSINVALIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private BILLINGADDRESSINVALID bILLINGADDRESSINVALID;

        BILLINGADDRESSINVALIDCase(BILLINGADDRESSINVALID bILLINGADDRESSINVALID) {
            this.bILLINGADDRESSINVALID = bILLINGADDRESSINVALID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.bILLINGADDRESSINVALID(this.bILLINGADDRESSINVALID);
        }

        @JsonCreator
        private BILLINGADDRESSINVALIDCase(JsonNode jsonNode) throws IOException {
            this.bILLINGADDRESSINVALID = ApiHelper.deserialize(jsonNode,
                BILLINGADDRESSINVALID.class);
        }

        @Override
        public String toString() {
            return bILLINGADDRESSINVALID.toString();
        }
    }

    /**
     * This is a implementation class for SHIPPINGADDRESSINVALIDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SHIPPINGADDRESSINVALID")
    private static class SHIPPINGADDRESSINVALIDCase extends UnprocessableErrorIssue {

        @JsonValue
        private SHIPPINGADDRESSINVALID sHIPPINGADDRESSINVALID;

        SHIPPINGADDRESSINVALIDCase(SHIPPINGADDRESSINVALID sHIPPINGADDRESSINVALID) {
            this.sHIPPINGADDRESSINVALID = sHIPPINGADDRESSINVALID;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.sHIPPINGADDRESSINVALID(this.sHIPPINGADDRESSINVALID);
        }

        @JsonCreator
        private SHIPPINGADDRESSINVALIDCase(JsonNode jsonNode) throws IOException {
            this.sHIPPINGADDRESSINVALID = ApiHelper.deserialize(jsonNode,
                SHIPPINGADDRESSINVALID.class);
        }

        @Override
        public String toString() {
            return sHIPPINGADDRESSINVALID.toString();
        }
    }

    /**
     * This is a implementation class for VAULTINSTRUCTIONDUPLICATEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "VAULTINSTRUCTIONDUPLICATED")
    private static class VAULTINSTRUCTIONDUPLICATEDCase extends UnprocessableErrorIssue {

        @JsonValue
        private VAULTINSTRUCTIONDUPLICATED vAULTINSTRUCTIONDUPLICATED;

        VAULTINSTRUCTIONDUPLICATEDCase(VAULTINSTRUCTIONDUPLICATED vAULTINSTRUCTIONDUPLICATED) {
            this.vAULTINSTRUCTIONDUPLICATED = vAULTINSTRUCTIONDUPLICATED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.vAULTINSTRUCTIONDUPLICATED(this.vAULTINSTRUCTIONDUPLICATED);
        }

        @JsonCreator
        private VAULTINSTRUCTIONDUPLICATEDCase(JsonNode jsonNode) throws IOException {
            this.vAULTINSTRUCTIONDUPLICATED = ApiHelper.deserialize(jsonNode,
                VAULTINSTRUCTIONDUPLICATED.class);
        }

        @Override
        public String toString() {
            return vAULTINSTRUCTIONDUPLICATED.toString();
        }
    }

    /**
     * This is a implementation class for VAULTINSTRUCTIONREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "VAULTINSTRUCTIONREQUIRED")
    private static class VAULTINSTRUCTIONREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private VAULTINSTRUCTIONREQUIRED vAULTINSTRUCTIONREQUIRED;

        VAULTINSTRUCTIONREQUIREDCase(VAULTINSTRUCTIONREQUIRED vAULTINSTRUCTIONREQUIRED) {
            this.vAULTINSTRUCTIONREQUIRED = vAULTINSTRUCTIONREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.vAULTINSTRUCTIONREQUIRED(this.vAULTINSTRUCTIONREQUIRED);
        }

        @JsonCreator
        private VAULTINSTRUCTIONREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.vAULTINSTRUCTIONREQUIRED = ApiHelper.deserialize(jsonNode,
                VAULTINSTRUCTIONREQUIRED.class);
        }

        @Override
        public String toString() {
            return vAULTINSTRUCTIONREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for MISMATCHEDVAULTIDTOPAYMENTSOURCECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MISMATCHEDVAULTIDTOPAYMENTSOURCE")
    private static class MISMATCHEDVAULTIDTOPAYMENTSOURCECase extends UnprocessableErrorIssue {

        @JsonValue
        private MISMATCHEDVAULTIDTOPAYMENTSOURCE mISMATCHEDVAULTIDTOPAYMENTSOURCE;

        MISMATCHEDVAULTIDTOPAYMENTSOURCECase(MISMATCHEDVAULTIDTOPAYMENTSOURCE mISMATCHEDVAULTIDTOPAYMENTSOURCE) {
            this.mISMATCHEDVAULTIDTOPAYMENTSOURCE = mISMATCHEDVAULTIDTOPAYMENTSOURCE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.mISMATCHEDVAULTIDTOPAYMENTSOURCE(this.mISMATCHEDVAULTIDTOPAYMENTSOURCE);
        }

        @JsonCreator
        private MISMATCHEDVAULTIDTOPAYMENTSOURCECase(JsonNode jsonNode) throws IOException {
            this.mISMATCHEDVAULTIDTOPAYMENTSOURCE = ApiHelper.deserialize(jsonNode,
                MISMATCHEDVAULTIDTOPAYMENTSOURCE.class);
        }

        @Override
        public String toString() {
            return mISMATCHEDVAULTIDTOPAYMENTSOURCE.toString();
        }
    }

    /**
     * This is a implementation class for CRYPTOGRAMREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CRYPTOGRAMREQUIRED")
    private static class CRYPTOGRAMREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private CRYPTOGRAMREQUIRED cRYPTOGRAMREQUIRED;

        CRYPTOGRAMREQUIREDCase(CRYPTOGRAMREQUIRED cRYPTOGRAMREQUIRED) {
            this.cRYPTOGRAMREQUIRED = cRYPTOGRAMREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cRYPTOGRAMREQUIRED(this.cRYPTOGRAMREQUIRED);
        }

        @JsonCreator
        private CRYPTOGRAMREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.cRYPTOGRAMREQUIRED = ApiHelper.deserialize(jsonNode,
                CRYPTOGRAMREQUIRED.class);
        }

        @Override
        public String toString() {
            return cRYPTOGRAMREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for EMVDATAREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "EMVDATAREQUIRED")
    private static class EMVDATAREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private EMVDATAREQUIRED eMVDATAREQUIRED;

        EMVDATAREQUIREDCase(EMVDATAREQUIRED eMVDATAREQUIRED) {
            this.eMVDATAREQUIRED = eMVDATAREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.eMVDATAREQUIRED(this.eMVDATAREQUIRED);
        }

        @JsonCreator
        private EMVDATAREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.eMVDATAREQUIRED = ApiHelper.deserialize(jsonNode,
                EMVDATAREQUIRED.class);
        }

        @Override
        public String toString() {
            return eMVDATAREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for NOTELIGIBLEFORPNREFPROCESSINGCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTELIGIBLEFORPNREFPROCESSING")
    private static class NOTELIGIBLEFORPNREFPROCESSINGCase extends UnprocessableErrorIssue {

        @JsonValue
        private NOTELIGIBLEFORPNREFPROCESSING nOTELIGIBLEFORPNREFPROCESSING;

        NOTELIGIBLEFORPNREFPROCESSINGCase(NOTELIGIBLEFORPNREFPROCESSING nOTELIGIBLEFORPNREFPROCESSING) {
            this.nOTELIGIBLEFORPNREFPROCESSING = nOTELIGIBLEFORPNREFPROCESSING;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTELIGIBLEFORPNREFPROCESSING(this.nOTELIGIBLEFORPNREFPROCESSING);
        }

        @JsonCreator
        private NOTELIGIBLEFORPNREFPROCESSINGCase(JsonNode jsonNode) throws IOException {
            this.nOTELIGIBLEFORPNREFPROCESSING = ApiHelper.deserialize(jsonNode,
                NOTELIGIBLEFORPNREFPROCESSING.class);
        }

        @Override
        public String toString() {
            return nOTELIGIBLEFORPNREFPROCESSING.toString();
        }
    }

    /**
     * This is a implementation class for NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING")
    private static class NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase extends UnprocessableErrorIssue {

        @JsonValue
        private NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING;

        NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase(NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING) {
            this.nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING = nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING(this.nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING);
        }

        @JsonCreator
        private NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase(JsonNode jsonNode) throws IOException {
            this.nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING = ApiHelper.deserialize(jsonNode,
                NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING.class);
        }

        @Override
        public String toString() {
            return nOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSING.toString();
        }
    }

    /**
     * This is a implementation class for PAYPALTRANSACTIONIDNOTFOUNDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PAYPALTRANSACTIONIDNOTFOUND")
    private static class PAYPALTRANSACTIONIDNOTFOUNDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PAYPALTRANSACTIONIDNOTFOUND pAYPALTRANSACTIONIDNOTFOUND;

        PAYPALTRANSACTIONIDNOTFOUNDCase(PAYPALTRANSACTIONIDNOTFOUND pAYPALTRANSACTIONIDNOTFOUND) {
            this.pAYPALTRANSACTIONIDNOTFOUND = pAYPALTRANSACTIONIDNOTFOUND;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pAYPALTRANSACTIONIDNOTFOUND(this.pAYPALTRANSACTIONIDNOTFOUND);
        }

        @JsonCreator
        private PAYPALTRANSACTIONIDNOTFOUNDCase(JsonNode jsonNode) throws IOException {
            this.pAYPALTRANSACTIONIDNOTFOUND = ApiHelper.deserialize(jsonNode,
                PAYPALTRANSACTIONIDNOTFOUND.class);
        }

        @Override
        public String toString() {
            return pAYPALTRANSACTIONIDNOTFOUND.toString();
        }
    }

    /**
     * This is a implementation class for PNREFNOTFOUNDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PNREFNOTFOUND")
    private static class PNREFNOTFOUNDCase extends UnprocessableErrorIssue {

        @JsonValue
        private PNREFNOTFOUND pNREFNOTFOUND;

        PNREFNOTFOUNDCase(PNREFNOTFOUND pNREFNOTFOUND) {
            this.pNREFNOTFOUND = pNREFNOTFOUND;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pNREFNOTFOUND(this.pNREFNOTFOUND);
        }

        @JsonCreator
        private PNREFNOTFOUNDCase(JsonNode jsonNode) throws IOException {
            this.pNREFNOTFOUND = ApiHelper.deserialize(jsonNode,
                PNREFNOTFOUND.class);
        }

        @Override
        public String toString() {
            return pNREFNOTFOUND.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDSECURITYCODELENGTHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDSECURITYCODELENGTH")
    private static class INVALIDSECURITYCODELENGTHCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDSECURITYCODELENGTH iNVALIDSECURITYCODELENGTH;

        INVALIDSECURITYCODELENGTHCase(INVALIDSECURITYCODELENGTH iNVALIDSECURITYCODELENGTH) {
            this.iNVALIDSECURITYCODELENGTH = iNVALIDSECURITYCODELENGTH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDSECURITYCODELENGTH(this.iNVALIDSECURITYCODELENGTH);
        }

        @JsonCreator
        private INVALIDSECURITYCODELENGTHCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDSECURITYCODELENGTH = ApiHelper.deserialize(jsonNode,
                INVALIDSECURITYCODELENGTH.class);
        }

        @Override
        public String toString() {
            return iNVALIDSECURITYCODELENGTH.toString();
        }
    }

    /**
     * This is a implementation class for NOTENABLEDTOVAULTPAYMENTSOURCECase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NOTENABLEDTOVAULTPAYMENTSOURCE")
    private static class NOTENABLEDTOVAULTPAYMENTSOURCECase extends UnprocessableErrorIssue {

        @JsonValue
        private NOTENABLEDTOVAULTPAYMENTSOURCE nOTENABLEDTOVAULTPAYMENTSOURCE;

        NOTENABLEDTOVAULTPAYMENTSOURCECase(NOTENABLEDTOVAULTPAYMENTSOURCE nOTENABLEDTOVAULTPAYMENTSOURCE) {
            this.nOTENABLEDTOVAULTPAYMENTSOURCE = nOTENABLEDTOVAULTPAYMENTSOURCE;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.nOTENABLEDTOVAULTPAYMENTSOURCE(this.nOTENABLEDTOVAULTPAYMENTSOURCE);
        }

        @JsonCreator
        private NOTENABLEDTOVAULTPAYMENTSOURCECase(JsonNode jsonNode) throws IOException {
            this.nOTENABLEDTOVAULTPAYMENTSOURCE = ApiHelper.deserialize(jsonNode,
                NOTENABLEDTOVAULTPAYMENTSOURCE.class);
        }

        @Override
        public String toString() {
            return nOTENABLEDTOVAULTPAYMENTSOURCE.toString();
        }
    }

    /**
     * This is a implementation class for REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT")
    private static class REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase extends UnprocessableErrorIssue {

        @JsonValue
        private REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT;

        REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase(REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT) {
            this.rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT = rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT(this.rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT);
        }

        @JsonCreator
        private REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase(JsonNode jsonNode) throws IOException {
            this.rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT = ApiHelper.deserialize(jsonNode,
                REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT.class);
        }

        @Override
        public String toString() {
            return rEQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENT.toString();
        }
    }

    /**
     * This is a implementation class for TOKENEXPIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "TOKENEXPIRED")
    private static class TOKENEXPIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private TOKENEXPIRED tOKENEXPIRED;

        TOKENEXPIREDCase(TOKENEXPIRED tOKENEXPIRED) {
            this.tOKENEXPIRED = tOKENEXPIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.tOKENEXPIRED(this.tOKENEXPIRED);
        }

        @JsonCreator
        private TOKENEXPIREDCase(JsonNode jsonNode) throws IOException {
            this.tOKENEXPIRED = ApiHelper.deserialize(jsonNode,
                TOKENEXPIRED.class);
        }

        @Override
        public String toString() {
            return tOKENEXPIRED.toString();
        }
    }

    /**
     * This is a implementation class for INVALIDGOOGLEPAYTOKENCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "INVALIDGOOGLEPAYTOKEN")
    private static class INVALIDGOOGLEPAYTOKENCase extends UnprocessableErrorIssue {

        @JsonValue
        private INVALIDGOOGLEPAYTOKEN iNVALIDGOOGLEPAYTOKEN;

        INVALIDGOOGLEPAYTOKENCase(INVALIDGOOGLEPAYTOKEN iNVALIDGOOGLEPAYTOKEN) {
            this.iNVALIDGOOGLEPAYTOKEN = iNVALIDGOOGLEPAYTOKEN;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.iNVALIDGOOGLEPAYTOKEN(this.iNVALIDGOOGLEPAYTOKEN);
        }

        @JsonCreator
        private INVALIDGOOGLEPAYTOKENCase(JsonNode jsonNode) throws IOException {
            this.iNVALIDGOOGLEPAYTOKEN = ApiHelper.deserialize(jsonNode,
                INVALIDGOOGLEPAYTOKEN.class);
        }

        @Override
        public String toString() {
            return iNVALIDGOOGLEPAYTOKEN.toString();
        }
    }

    /**
     * This is a implementation class for GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "GOOGLEPAYGATEWAYMERCHANTIDMISMATCH")
    private static class GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase extends UnprocessableErrorIssue {

        @JsonValue
        private GOOGLEPAYGATEWAYMERCHANTIDMISMATCH gOOGLEPAYGATEWAYMERCHANTIDMISMATCH;

        GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase(GOOGLEPAYGATEWAYMERCHANTIDMISMATCH gOOGLEPAYGATEWAYMERCHANTIDMISMATCH) {
            this.gOOGLEPAYGATEWAYMERCHANTIDMISMATCH = gOOGLEPAYGATEWAYMERCHANTIDMISMATCH;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.gOOGLEPAYGATEWAYMERCHANTIDMISMATCH(this.gOOGLEPAYGATEWAYMERCHANTIDMISMATCH);
        }

        @JsonCreator
        private GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase(JsonNode jsonNode) throws IOException {
            this.gOOGLEPAYGATEWAYMERCHANTIDMISMATCH = ApiHelper.deserialize(jsonNode,
                GOOGLEPAYGATEWAYMERCHANTIDMISMATCH.class);
        }

        @Override
        public String toString() {
            return gOOGLEPAYGATEWAYMERCHANTIDMISMATCH.toString();
        }
    }

    /**
     * This is a implementation class for ONEOFPARAMETERSREQUIREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ONEOFPARAMETERSREQUIRED")
    private static class ONEOFPARAMETERSREQUIREDCase extends UnprocessableErrorIssue {

        @JsonValue
        private ONEOFPARAMETERSREQUIRED oNEOFPARAMETERSREQUIRED;

        ONEOFPARAMETERSREQUIREDCase(ONEOFPARAMETERSREQUIRED oNEOFPARAMETERSREQUIRED) {
            this.oNEOFPARAMETERSREQUIRED = oNEOFPARAMETERSREQUIRED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.oNEOFPARAMETERSREQUIRED(this.oNEOFPARAMETERSREQUIRED);
        }

        @JsonCreator
        private ONEOFPARAMETERSREQUIREDCase(JsonNode jsonNode) throws IOException {
            this.oNEOFPARAMETERSREQUIRED = ApiHelper.deserialize(jsonNode,
                ONEOFPARAMETERSREQUIRED.class);
        }

        @Override
        public String toString() {
            return oNEOFPARAMETERSREQUIRED.toString();
        }
    }

    /**
     * This is a implementation class for ALIASDECLINEDBYPROCESSORCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "ALIASDECLINEDBYPROCESSOR")
    private static class ALIASDECLINEDBYPROCESSORCase extends UnprocessableErrorIssue {

        @JsonValue
        private ALIASDECLINEDBYPROCESSOR aLIASDECLINEDBYPROCESSOR;

        ALIASDECLINEDBYPROCESSORCase(ALIASDECLINEDBYPROCESSOR aLIASDECLINEDBYPROCESSOR) {
            this.aLIASDECLINEDBYPROCESSOR = aLIASDECLINEDBYPROCESSOR;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.aLIASDECLINEDBYPROCESSOR(this.aLIASDECLINEDBYPROCESSOR);
        }

        @JsonCreator
        private ALIASDECLINEDBYPROCESSORCase(JsonNode jsonNode) throws IOException {
            this.aLIASDECLINEDBYPROCESSOR = ApiHelper.deserialize(jsonNode,
                ALIASDECLINEDBYPROCESSOR.class);
        }

        @Override
        public String toString() {
            return aLIASDECLINEDBYPROCESSOR.toString();
        }
    }

    /**
     * This is a implementation class for BLIKONECLICKMISSINGREQUIREDPARAMETERCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "BLIKONECLICKMISSINGREQUIREDPARAMETER")
    private static class BLIKONECLICKMISSINGREQUIREDPARAMETERCase extends UnprocessableErrorIssue {

        @JsonValue
        private BLIKONECLICKMISSINGREQUIREDPARAMETER bLIKONECLICKMISSINGREQUIREDPARAMETER;

        BLIKONECLICKMISSINGREQUIREDPARAMETERCase(BLIKONECLICKMISSINGREQUIREDPARAMETER bLIKONECLICKMISSINGREQUIREDPARAMETER) {
            this.bLIKONECLICKMISSINGREQUIREDPARAMETER = bLIKONECLICKMISSINGREQUIREDPARAMETER;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.bLIKONECLICKMISSINGREQUIREDPARAMETER(this.bLIKONECLICKMISSINGREQUIREDPARAMETER);
        }

        @JsonCreator
        private BLIKONECLICKMISSINGREQUIREDPARAMETERCase(JsonNode jsonNode) throws IOException {
            this.bLIKONECLICKMISSINGREQUIREDPARAMETER = ApiHelper.deserialize(jsonNode,
                BLIKONECLICKMISSINGREQUIREDPARAMETER.class);
        }

        @Override
        public String toString() {
            return bLIKONECLICKMISSINGREQUIREDPARAMETER.toString();
        }
    }

    /**
     * This is a custom deserializer class for UnprocessableErrorIssue.
     */
    protected static class UnprocessableErrorIssueDeserializer
            extends JsonDeserializer<UnprocessableErrorIssue> {

        @Override
        public UnprocessableErrorIssue deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(AMOUNTMISMATCHCase.class,
                    CANNOTBENEGATIVECase.class, CANNOTBEZEROORNEGATIVECase.class,
                    CARDEXPIREDCase.class, MISSINGPREVIOUSREFERENCECase.class,
                    MISSINGCRYPTOGRAMCase.class, CITYREQUIREDCase.class, DECIMALPRECISIONCase.class,
                    DONATIONITEMSNOTSUPPORTEDCase.class, DUPLICATEREFERENCEIDCase.class,
                    INVALIDCURRENCYCODECase.class, INVALIDPAYERIDCase.class,
                    ITEMTOTALMISMATCHCase.class, ITEMTOTALREQUIREDCase.class,
                    MAXVALUEEXCEEDEDCase.class, MISSINGPICKUPADDRESSCase.class,
                    MULTICURRENCYORDERCase.class, MULTIPLEITEMCATEGORIESCase.class,
                    MULTIPLESHIPPINGADDRESSNOTSUPPORTEDCase.class,
                    MULTIPLESHIPPINGTYPENOTSUPPORTEDCase.class, PAYEEACCOUNTINVALIDCase.class,
                    PAYEEACCOUNTLOCKEDORCLOSEDCase.class, PAYEEACCOUNTRESTRICTEDCase.class,
                    PAYEEPRICINGTIERIDNOTENABLEDCase.class, INVALIDPAYEEPRICINGTIERIDCase.class,
                    PAYEEFXRATEIDEXPIREDCase.class, PAYEEFXRATEIDCURRENCYMISMATCHCase.class,
                    INVALIDFXRATEIDCase.class, PLATFORMFEESNOTSUPPORTEDCase.class,
                    INVALIDPLATFORMFEESACCOUNTCase.class, INVALIDPLATFORMFEESAMOUNTCase.class,
                    POSTALCODEREQUIREDCase.class, REFERENCEIDREQUIREDCase.class,
                    SHIPPINGOPTIONSNOTSUPPORTEDCase.class, TAXTOTALMISMATCHCase.class,
                    TAXTOTALREQUIREDCase.class, UNSUPPORTEDINTENTCase.class,
                    UNSUPPORTEDPAYMENTINSTRUCTIONCase.class,
                    SHIPPINGTYPENOTSUPPORTEDFORCLIENTCase.class, UNSUPPORTEDSHIPPINGTYPECase.class,
                    SHIPPINGOPTIONNOTSELECTEDCase.class, MULTIPLESHIPPINGOPTIONSELECTEDCase.class,
                    PREFERREDSHIPPINGOPTIONAMOUNTMISMATCHCase.class,
                    AGREEMENTALREADYCANCELLEDCase.class, BILLINGAGREEMENTNOTFOUNDCase.class,
                    COMPLIANCEVIOLATIONCase.class, DOMESTICTRANSACTIONREQUIREDCase.class,
                    DUPLICATEINVOICEIDCase.class, INSTRUMENTDECLINEDCase.class,
                    MAXNUMBEROFPAYMENTATTEMPTSEXCEEDEDCase.class,
                    NOTENABLEDFORCARDPROCESSINGCase.class, PAYEEBLOCKEDTRANSACTIONCase.class,
                    PAYERACCOUNTLOCKEDORCLOSEDCase.class, PAYERACCOUNTRESTRICTEDCase.class,
                    PAYERCANNOTPAYCase.class, TRANSACTIONBLOCKEDBYPAYEECase.class,
                    TRANSACTIONLIMITEXCEEDEDCase.class, TRANSACTIONRECEIVINGLIMITEXCEEDEDCase.class,
                    TRANSACTIONREFUSEDCase.class, AUTHCAPTURENOTENABLEDCase.class,
                    UNSUPPORTEDPROCESSINGINSTRUCTIONCase.class,
                    ORDERCOMPLETEONPAYMENTAPPROVALCase.class, INVALIDEXPIRYDATECase.class,
                    INCOMPATIBLEPARAMETERVALUECase.class,
                    INVALIDPREVIOUSTRANSACTIONREFERENCECase.class,
                    PREVIOUSTRANSACTIONREFERENCEHASCHARGEBACKCase.class,
                    PREVIOUSTRANSACTIONREFERENCEVOIDEDCase.class, PAYMENTSOURCEMISMATCHCase.class,
                    MERCHANTINITIATEDWITHSECURITYCODECase.class,
                    MERCHANTINITIATEDWITHAUTHENTICATIONRESULTSCase.class,
                    MERCHANTINITIATEDWITHMULTIPLEPURCHASEUNITSCase.class,
                    PAYMENTSOURCEINFOCANNOTBEVERIFIEDCase.class,
                    PAYMENTSOURCEDECLINEDBYPROCESSORCase.class, PAYMENTSOURCECANNOTBEUSEDCase.class,
                    NOTENABLEDFORAPPLEPAYCase.class, NOTENABLEDFORGOOGLEPAYCase.class,
                    APPLEPAYAMOUNTMISMATCHCase.class, BILLINGADDRESSINVALIDCase.class,
                    SHIPPINGADDRESSINVALIDCase.class, VAULTINSTRUCTIONDUPLICATEDCase.class,
                    VAULTINSTRUCTIONREQUIREDCase.class, MISMATCHEDVAULTIDTOPAYMENTSOURCECase.class,
                    CRYPTOGRAMREQUIREDCase.class, EMVDATAREQUIREDCase.class,
                    NOTELIGIBLEFORPNREFPROCESSINGCase.class,
                    NOTELIGIBLEFORPAYPALTRANSACTIONIDPROCESSINGCase.class,
                    PAYPALTRANSACTIONIDNOTFOUNDCase.class, PNREFNOTFOUNDCase.class,
                    INVALIDSECURITYCODELENGTHCase.class, NOTENABLEDTOVAULTPAYMENTSOURCECase.class,
                    REQUIREDPARAMETERFORCUSTOMERINITIATEDPAYMENTCase.class, TOKENEXPIREDCase.class,
                    INVALIDGOOGLEPAYTOKENCase.class, GOOGLEPAYGATEWAYMERCHANTIDMISMATCHCase.class,
                    ONEOFPARAMETERSREQUIREDCase.class, ALIASDECLINEDBYPROCESSORCase.class,
                    BLIKONECLICKMISSINGREQUIREDPARAMETERCase.class), false);
        }
    }

}
