/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.models.CANNOTBEVOIDED;
import com.paypal.sandbox.apim.models.PREVIOUSLYCAPTURED;
import com.paypal.sandbox.apim.models.PREVIOUSLYVOIDED;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = Authorizationsvoid422issuesItems.Authorizationsvoid422issuesItemsDeserializer.class)
public abstract class Authorizationsvoid422issuesItems {
    
    /**
     * This is PREVIOUSLY_CAPTURED case.
     * @param pREVIOUSLYCAPTURED PREVIOUSLYCAPTURED value for pREVIOUSLYCAPTURED.
     * @return The PREVIOUSLYCAPTUREDCase object.
     */
    public static Authorizationsvoid422issuesItems fromPREVIOUSLYCAPTURED(
            PREVIOUSLYCAPTURED pREVIOUSLYCAPTURED) {
        return pREVIOUSLYCAPTURED == null ? null : new PREVIOUSLYCAPTUREDCase(pREVIOUSLYCAPTURED);
    }

    /**
     * This is PREVIOUSLY_VOIDED case.
     * @param pREVIOUSLYVOIDED PREVIOUSLYVOIDED value for pREVIOUSLYVOIDED.
     * @return The PREVIOUSLYVOIDEDCase object.
     */
    public static Authorizationsvoid422issuesItems fromPREVIOUSLYVOIDED(
            PREVIOUSLYVOIDED pREVIOUSLYVOIDED) {
        return pREVIOUSLYVOIDED == null ? null : new PREVIOUSLYVOIDEDCase(pREVIOUSLYVOIDED);
    }

    /**
     * This is CANNOT_BE_VOIDED case.
     * @param cANNOTBEVOIDED CANNOTBEVOIDED value for cANNOTBEVOIDED.
     * @return The CANNOTBEVOIDEDCase object.
     */
    public static Authorizationsvoid422issuesItems fromCANNOTBEVOIDED(
            CANNOTBEVOIDED cANNOTBEVOIDED) {
        return cANNOTBEVOIDED == null ? null : new CANNOTBEVOIDEDCase(cANNOTBEVOIDED);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R pREVIOUSLYCAPTURED(PREVIOUSLYCAPTURED pREVIOUSLYCAPTURED);

        R pREVIOUSLYVOIDED(PREVIOUSLYVOIDED pREVIOUSLYVOIDED);

        R cANNOTBEVOIDED(CANNOTBEVOIDED cANNOTBEVOIDED);
    }

    /**
     * This is a implementation class for PREVIOUSLYCAPTUREDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PREVIOUSLYCAPTURED")
    private static class PREVIOUSLYCAPTUREDCase extends Authorizationsvoid422issuesItems {

        @JsonValue
        private PREVIOUSLYCAPTURED pREVIOUSLYCAPTURED;

        PREVIOUSLYCAPTUREDCase(PREVIOUSLYCAPTURED pREVIOUSLYCAPTURED) {
            this.pREVIOUSLYCAPTURED = pREVIOUSLYCAPTURED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pREVIOUSLYCAPTURED(this.pREVIOUSLYCAPTURED);
        }

        @JsonCreator
        private PREVIOUSLYCAPTUREDCase(JsonNode jsonNode) throws IOException {
            this.pREVIOUSLYCAPTURED = ApiHelper.deserialize(jsonNode,
                PREVIOUSLYCAPTURED.class);
        }

        @Override
        public String toString() {
            return pREVIOUSLYCAPTURED.toString();
        }
    }

    /**
     * This is a implementation class for PREVIOUSLYVOIDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "PREVIOUSLYVOIDED")
    private static class PREVIOUSLYVOIDEDCase extends Authorizationsvoid422issuesItems {

        @JsonValue
        private PREVIOUSLYVOIDED pREVIOUSLYVOIDED;

        PREVIOUSLYVOIDEDCase(PREVIOUSLYVOIDED pREVIOUSLYVOIDED) {
            this.pREVIOUSLYVOIDED = pREVIOUSLYVOIDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.pREVIOUSLYVOIDED(this.pREVIOUSLYVOIDED);
        }

        @JsonCreator
        private PREVIOUSLYVOIDEDCase(JsonNode jsonNode) throws IOException {
            this.pREVIOUSLYVOIDED = ApiHelper.deserialize(jsonNode,
                PREVIOUSLYVOIDED.class);
        }

        @Override
        public String toString() {
            return pREVIOUSLYVOIDED.toString();
        }
    }

    /**
     * This is a implementation class for CANNOTBEVOIDEDCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CANNOTBEVOIDED")
    private static class CANNOTBEVOIDEDCase extends Authorizationsvoid422issuesItems {

        @JsonValue
        private CANNOTBEVOIDED cANNOTBEVOIDED;

        CANNOTBEVOIDEDCase(CANNOTBEVOIDED cANNOTBEVOIDED) {
            this.cANNOTBEVOIDED = cANNOTBEVOIDED;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.cANNOTBEVOIDED(this.cANNOTBEVOIDED);
        }

        @JsonCreator
        private CANNOTBEVOIDEDCase(JsonNode jsonNode) throws IOException {
            this.cANNOTBEVOIDED = ApiHelper.deserialize(jsonNode,
                CANNOTBEVOIDED.class);
        }

        @Override
        public String toString() {
            return cANNOTBEVOIDED.toString();
        }
    }

    /**
     * This is a custom deserializer class for Authorizationsvoid422issuesItems.
     */
    protected static class Authorizationsvoid422issuesItemsDeserializer
            extends JsonDeserializer<Authorizationsvoid422issuesItems> {

        @Override
        public Authorizationsvoid422issuesItems deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(PREVIOUSLYCAPTUREDCase.class,
                    PREVIOUSLYVOIDEDCase.class, CANNOTBEVOIDEDCase.class), false);
        }
    }

}
