/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.MergedApiClient;
import com.paypal.sandbox.apim.exceptions.ApiException;
import com.paypal.sandbox.apim.models.Order;
import com.paypal.sandbox.apim.models.OrderRequest;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class OrdersControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static MergedApiClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static OrdersController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getOrdersController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce
     * risk and payment processing costs. For more information about processing payments, see &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/processing/"&gt;checkout&lt;/a&gt; or &lt;a
     * href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/"&gt;multiparty
     * checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see
     * &lt;a href="/api/rest/reference/orders/v2/errors/#create-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateOrder() throws Exception {
        // Parameters for the API call
        String payPalRequestId = 
                "7b92603e-77ed-4896-8e78-5dea2050476a";
        OrderRequest body = ApiHelper.deserialize(
                "{\"intent\":\"CAPTURE\",\"purchase_units\":[{\"reference_id\":\"d9f80740-38f0-11e8"
                + "-b467-0ed5f89f718b\",\"amount\":{\"currency_code\":\"USD\",\"value\":\"100.00\"}"
                + "}],\"payment_source\":{\"paypal\":{\"experience_context\":{\"payment_method_pref"
                + "erence\":\"IMMEDIATE_PAYMENT_REQUIRED\",\"payment_method_selected\":\"PAYPAL\","
                + "\"brand_name\":\"EXAMPLE INC\",\"locale\":\"en-US\",\"landing_page\":\"LOGIN\","
                + "\"user_action\":\"PAY_NOW\",\"return_url\":\"https://example.com/returnUrl\",\"c"
                + "ancel_url\":\"https://example.com/cancelUrl\"}}}}",
                OrderRequest.class);
        String payPalPartnerAttributionId = null;
        String payPalClientMetadataId = null;
        String prefer = 
                "return=minimal";

        // Set callback and perform API call
        Order result = null;
        try {
            result = controller.createOrder(payPalRequestId, body, payPalPartnerAttributionId, payPalClientMetadataId, prefer);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"id\":\"71P66832U2286831S\",\"status\":\"PAYER_ACTION_REQUIRED\",\"payment_sourc"
                + "e\":{\"paypal\":{}},\"links\":[{\"href\":\"https://api.sandbox.paypal.com/v2/che"
                + "ckout/orders/71P66832U2286831S\",\"rel\":\"self\",\"method\":\"GET\"},{\"href\":"
                + "\"https://www.sandbox.paypal.com/checkoutnow?token=71P66832U2286831S\",\"rel\":"
                + "\"payer-action\",\"method\":\"GET\"}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce
     * risk and payment processing costs. For more information about processing payments, see &lt;a
     * href="https://developer.paypal.com/docs/checkout/advanced/processing/"&gt;checkout&lt;/a&gt; or &lt;a
     * href="https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/"&gt;multiparty
     * checkout&lt;/a&gt;.&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt; For error handling and troubleshooting, see
     * &lt;a href="/api/rest/reference/orders/v2/errors/#create-order"&gt;Orders v2
     * errors&lt;/a&gt;.&lt;/blockquote&gt;.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreateOrder1() throws Exception {
        // Parameters for the API call
        String payPalRequestId = 
                "7b92603e-77ed-4896-8e78-5dea2050476a";
        OrderRequest body = ApiHelper.deserialize(
                "{\"intent\":\"CAPTURE\",\"purchase_units\":[{\"reference_id\":\"d9f80740-38f0-11e8"
                + "-b467-0ed5f89f718b\",\"amount\":{\"currency_code\":\"USD\",\"value\":\"100.00\"}"
                + "}],\"payment_source\":{\"paypal\":{\"experience_context\":{\"payment_method_pref"
                + "erence\":\"IMMEDIATE_PAYMENT_REQUIRED\",\"payment_method_selected\":\"PAYPAL\","
                + "\"brand_name\":\"EXAMPLE INC\",\"locale\":\"en-US\",\"landing_page\":\"LOGIN\","
                + "\"user_action\":\"PAY_NOW\",\"return_url\":\"https://example.com/returnUrl\",\"c"
                + "ancel_url\":\"https://example.com/cancelUrl\"}}}}",
                OrderRequest.class);
        String payPalPartnerAttributionId = null;
        String payPalClientMetadataId = null;
        String prefer = 
                "return=minimal";

        // Set callback and perform API call
        Order result = null;
        try {
            result = controller.createOrder(payPalRequestId, body, payPalPartnerAttributionId, payPalClientMetadataId, prefer);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"intent\":\"CAPTURE\",\"purchase_units\":[{\"reference_id\":\"d9f80740-38f0-11e8"
                + "-b467-0ed5f89f718b\",\"amount\":{\"currency_code\":\"USD\",\"value\":\"100.00\"}"
                + "}]}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
