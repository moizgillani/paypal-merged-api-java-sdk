/*
 * MergedApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.controllers;

import com.paypal.sandbox.apim.Environment;
import com.paypal.sandbox.apim.MergedApiClient;
import com.paypal.sandbox.apim.authentication.Oauth2Model;
import com.paypal.sandbox.apim.authentication.Oauth2PaymentMethodTokensModel;
import com.paypal.sandbox.apim.models.OAuthToken;
import com.paypal.sandbox.apim.testing.HttpCallbackCatcher;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.rules.Timeout;

/**
 * Base class for all test cases.
 */
public class BaseControllerTest {
    /**
     * Test configuration.
     */
    public static final int REQUEST_TIMEOUT = 30;

    public static final double ASSERT_PRECISION = 0.01;
    
    /**
     * Global rules for tests.
     */
    @Rule
    public Timeout globalTimeout = Timeout.seconds(REQUEST_TIMEOUT);
    
    /**
     * Test fixtures,
     * Used to serve as HttpCallback and to capture request & response.
     */

    protected static HttpCallbackCatcher httpResponse;
    
    /**
     * Setup test.
     */
    @BeforeClass
    public static void setUp() throws Exception {
        httpResponse = new HttpCallbackCatcher(); 
    }

    /**
     * Tear down test.
     */
    @AfterClass
    public static void tearDown() throws Exception {
        httpResponse = null;
    }

    /**
     * Create test configuration from Environment variables.
     */
    protected static MergedApiClient createConfigurationFromEnvironment() {
        MergedApiClient.Builder builder = new MergedApiClient.Builder();

        final String environment = System.getenv("MERGED_API_LIB_ENVIRONMENT");
        final String timeout = System.getenv("MERGED_API_LIB_TIMEOUT");
        final String oAuthClientId = System.getenv("MERGED_API_LIB_O_AUTH_CLIENT_ID");
        final String oAuthClientSecret = System.getenv("MERGED_API_LIB_O_AUTH_CLIENT_SECRET");
        final String oAuthClientId2 = System.getenv("MERGED_API_LIB_O_AUTH_CLIENT_ID_2");
        final String oAuthClientSecret2 = System.getenv("MERGED_API_LIB_O_AUTH_CLIENT_SECRET_2");

        if (oAuthClientId != null && oAuthClientSecret != null) {
            builder.oauth2Credentials(new Oauth2Model
                    .Builder(oAuthClientId, oAuthClientSecret)
                    .build());
        }
        if (oAuthClientId2 != null && oAuthClientSecret2 != null) {
            builder.oauth2PaymentMethodTokensCredentials(new Oauth2PaymentMethodTokensModel
                    .Builder(oAuthClientId2, oAuthClientSecret2)
                    .build());
        }
        if (environment != null) {
            builder.environment(Environment.fromString(environment));
        }
        if (timeout != null) {
            builder.httpClientConfig(configBuilder -> configBuilder.timeout(
                    Long.parseLong(timeout)));
        }
        return builder.build();
    }

    
    /**
     * Create test configuration.
     */
    protected static MergedApiClient createConfiguration() {
        // Set Configuration parameters for test execution
        MergedApiClient config = createConfigurationFromEnvironment();
        config = config.newBuilder()
                .httpCallback(httpResponse)
                .build();

        try {
            OAuthToken token = config.getOauth2Credentials().fetchToken();
            config = config.newBuilder()
                .oauth2Credentials(config.getOauth2Model()
                        .toBuilder()
                        .oAuthToken(token)
                        .build())
                .build();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        try {
            OAuthToken token = config.getOauth2PaymentMethodTokensCredentials().fetchToken();
            config = config.newBuilder()
                .oauth2PaymentMethodTokensCredentials(config.getOauth2PaymentMethodTokensModel()
                        .toBuilder()
                        .oAuthToken(token)
                        .build())
                .build();
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return config;
    }
}
